<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李飞阳</title>
  <subtitle>PM、Coder、Data mining</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://feiyang.li/"/>
  <updated>2017-04-15T06:52:12.839Z</updated>
  <id>http://feiyang.li/</id>
  
  <author>
    <name>Wing Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Coursera ML(5)-Logistic Regression and Regularization with Python</title>
    <link href="http://feiyang.li/2017/03/30/Coursera-ML-5-Programming-Exercise-2/index.html"/>
    <id>http://feiyang.li/2017/03/30/Coursera-ML-5-Programming-Exercise-2/index.html</id>
    <published>2017-03-30T04:46:00.000Z</published>
    <updated>2017-04-15T06:52:12.839Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p><a href="http://feiyang.li/2017/03/26/Coursera-ML-3-Multivariate-Linear-Regression-python/index.html">线性回归算法</a>，可用于房屋价格的估计及股票市场分析。 <a href="https://www.coursera.org/learn/machine-learning/programming/ixFof/logistic-regression" target="_blank" rel="external">Logistic Regression</a> （逻辑回归）是当前业界比较常用的机器学习方法，用于估计某种事物的可能性。比如某用户购买某商品的可能性，某病人患有某种疾病的可能性，以及某广告被用户点击的可能性等。相关公式推导在<a href="http://feiyang.li/2017/03/27/Coursera-ML-4-Logistic-Regression/index.html">这里</a></p>
</blockquote>
<hr>
<a id="more"></a>
<p>Stanford coursera Andrew Ng 机器学习课程编程作业（Exercise 2），作业下载链接貌似被墙了，下载链接放这。<a href="http://home.ustc.edu.cn/~mmmwhy/machine-learning-ex2.zip" target="_blank" rel="external">http://home.ustc.edu.cn/~mmmwhy/machine-learning-ex2.zip</a></p>
<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a><a href="http://feiyang.li/2017/03/27/Coursera-ML-4-Logistic-Regression/">预备知识</a></h1><p>这里应该分为 正常、过拟合和欠拟合，三种情况。</p>
<ul>
<li>Cost Function $$J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$$ </li>
<li><p>Gradient Descent</p>
 $$\begin{align*} & \text{Repeat}\ \lbrace \newline & \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline & \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2...n\rbrace\newline & \rbrace \end{align*}$$ 
</li>
<li><p>Grad</p>
 $$Grad =  \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)}+ \frac{\lambda}{m}\theta_j$$ 
</li>
</ul>
<p>后边有一个$\frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$和$\frac{\lambda}{m}\theta_j$小尾巴，作用就是进行 Regularization，防止拟合过度。</p>
<h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><ul>
<li>you will build a logistic regression model to predict whether a student gets admitted into a university.（根据各科目分数预测该学生是否能录取）</li>
<li>For each training example, you have the applicant’s scores on two exams and the admissions decision.</li>
<li>Your task is to build a <strong>classication model</strong> that estimates an <strong>applicant’s probability of admission based the scores from those two exams.</strong></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170327/203532750.png" alt="dataset" title="">
                </div>
                <div class="image-caption">dataset</div>
            </figure>
<h2 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(path)</span>:</span></div><div class="line">    X,y = load_dataset(path) <span class="comment"># 调用底下那个东西</span></div><div class="line">    m, n = shape(X)</div><div class="line">    initial_theta = zeros(n + <span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> X,y,m,n,initial_theta</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">(path)</span>:</span></div><div class="line">    data = loadtxt(path, delimiter=<span class="string">','</span>)</div><div class="line">    X = data[:,:<span class="number">2</span>]</div><div class="line">    y = data[:, <span class="number">2</span>]</div><div class="line">    <span class="keyword">return</span> X,y</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(X,y)</span>:</span></div><div class="line">    plt.plot(X[y==<span class="number">1</span>][:,<span class="number">0</span>],X[y==<span class="number">1</span>][:,<span class="number">1</span>],<span class="string">'k+'</span>,linewidth=<span class="number">2</span>,)</div><div class="line">    plt.plot(X[y==<span class="number">0</span>][:,<span class="number">0</span>],X[y==<span class="number">0</span>][:,<span class="number">1</span>],<span class="string">'ko'</span>,color=<span class="string">'y'</span>,linewidth=<span class="number">2</span>)</div><div class="line">    plt.xlabel(<span class="string">'科目一成绩'</span>, fontproperties=<span class="string">'SimHei'</span>)</div><div class="line">    plt.ylabel(<span class="string">'科目二成绩'</span>, fontproperties=<span class="string">'SimHei'</span>)</div><div class="line">    plt.title(<span class="string">'分数与录取的关系'</span>, fontproperties=<span class="string">'SimHei'</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(X, theta)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + exp(-dot(X, theta)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cost</span><span class="params">(theta, X, y)</span>:</span></div><div class="line">    J = sum((-y*log(sigmoid(X,theta)) - (<span class="number">1</span>-y)*log(<span class="number">1</span>-sigmoid(X,theta))))/len(X)</div><div class="line">    <span class="keyword">return</span> J</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_grad</span><span class="params">(theta, X, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (sigmoid(X,theta) - mat(y))*X*(<span class="number">1</span>/m)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotDecisionBoundary</span><span class="params">(theta, X, y)</span>:</span></div><div class="line">    plotData(X[:, <span class="number">1</span>:<span class="number">3</span>], y)</div><div class="line">    <span class="keyword">if</span> X.shape[<span class="number">1</span>] &lt;= <span class="number">3</span>:</div><div class="line">        plot_x = r_[X[:,<span class="number">2</span>].min()<span class="number">-2</span>,  X[:,<span class="number">2</span>].max()+<span class="number">2</span>]</div><div class="line">        plot_y = - (theta[<span class="number">1</span>]*plot_x + theta[<span class="number">0</span>])/theta[<span class="number">2</span>]</div><div class="line">        plt.plot(plot_x, plot_y)</div><div class="line">        plt.axis([<span class="number">30</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="number">100</span>])</div><div class="line">        plt.legend([<span class="string">'Accepted'</span>, <span class="string">'Not Accepted'</span>, <span class="string">'Decision Boundary'</span>])</div><div class="line">        plt.show()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(theta, X)</span>:</span>  </div><div class="line">    prob = sigmoid([<span class="number">1</span>,<span class="number">45</span>,<span class="number">85</span>] , result[<span class="number">0</span>])</div><div class="line">    <span class="keyword">return</span> prob</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    path = <span class="string">'C:\\Users\\wing\\Desktop\\machine-learning-ex2\\ex2\\ex2data1.txt'</span></div><div class="line">    X,y,m,n,initial_theta = init(path)</div><div class="line">    X = column_stack((ones(m), X))</div><div class="line">    cost = get_cost(initial_theta, X, y)</div><div class="line">    grad = get_grad(initial_theta, X, y)</div><div class="line"></div><div class="line">    <span class="comment"># obtain the optimal theta</span></div><div class="line">    result = optimize.fmin_tnc(func=get_cost, x0=initial_theta, fprime=get_grad, args=(X, y))  </div><div class="line">    get_cost(result[<span class="number">0</span>], X, y)  </div><div class="line">    <span class="comment"># result = (array([-25.16131863,   0.20623159,   0.20147149]), 36, 0)</span></div><div class="line">    <span class="comment"># get_cost(result[0], X, y)  = 0.20349770158947464</span></div><div class="line">    plotDecisionBoundary(result[<span class="number">0</span>], X, y)</div><div class="line">    print(<span class="string">'For a student with scores 45 and 85, we predict an admission '</span> \</div><div class="line">         <span class="string">'probability of %f\n'</span>%predict(result[<span class="number">0</span>], X))</div><div class="line"></div><div class="line"><span class="comment"># For a student with scores 45 and 85, we predict an admission probability of 0.776291</span></div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170330/121908473.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>最后进行了一个测试，如果一个学生两门考试成绩，一门45分，另外一门85分，那么他被录取的概率为77%。幸亏是在外国，在中国这分数，连大专都考不上。</p>
<h1 id="Logistic-Regression-and-Regularization"><a href="#Logistic-Regression-and-Regularization" class="headerlink" title="Logistic Regression and Regularization"></a>Logistic Regression and Regularization</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>Suppose you are the product manager of the factory and you have the test results for some microchips on two dierent tests.</li>
<li>对于一批产品，有两个检测环节，通过检测结果判断产品是否合格。比如，宜家会有三十年床垫保证，那么如果确保床垫合格（用30年），我们只能通过一些检测，来推测产品是否合格。</li>
</ul>
<h2 id="python-code-1"><a href="#python-code-1" class="headerlink" title="python code"></a>python code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(path)</span>:</span></div><div class="line">    X,y = load_dataset(path)</div><div class="line">    dataplot(X,y)</div><div class="line">    X = map_feature(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>])</div><div class="line">    initial_theta = zeros(size(X[<span class="number">1</span>]))</div><div class="line">    lam = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> X,y,initial_theta,lam</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">(path)</span>:</span></div><div class="line">    data = loadtxt(path, delimiter=<span class="string">','</span>)</div><div class="line">    X = data[:,:<span class="number">2</span>]</div><div class="line">    y = data[:, <span class="number">2</span>]</div><div class="line">    <span class="keyword">return</span> X,y</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataplot</span><span class="params">(X,y)</span>:</span></div><div class="line">    plt.plot(X[y==<span class="number">1</span>][:,<span class="number">0</span>],X[y==<span class="number">1</span>][:,<span class="number">1</span>],<span class="string">'k+'</span>,linewidth=<span class="number">2</span>)</div><div class="line">    plt.plot(X[y==<span class="number">0</span>][:,<span class="number">0</span>],X[y==<span class="number">0</span>][:,<span class="number">1</span>],<span class="string">'ko'</span>,color=<span class="string">'y'</span>,linewidth=<span class="number">2</span>)</div><div class="line">    plt.legend([ <span class="string">'y = 1'</span>,<span class="string">'y = 0'</span>])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(X, theta)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + exp(-dot(X, theta)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_feature</span><span class="params">(x1, x2)</span>:</span></div><div class="line">    <span class="comment">#X1, X2, X1 ** 2, X2 ** 2, X1*X2, X1*X2 ** 2, etc...</span></div><div class="line"></div><div class="line">    x1.shape = (x1.size, <span class="number">1</span>)</div><div class="line">    x2.shape = (x2.size, <span class="number">1</span>)</div><div class="line">    degree = <span class="number">6</span></div><div class="line">    out = ones(shape=(x1[:, <span class="number">0</span>].size, <span class="number">1</span>))</div><div class="line">    m, n = out.shape</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, degree + <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>):</div><div class="line">            r = (x1 ** (i - j)) * (x2 ** j)</div><div class="line">            out = append(out, r, axis=<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cost</span><span class="params">(theta, X, y,lam)</span>:</span></div><div class="line">    hx = sigmoid(X,theta)</div><div class="line">    thetaR = theta[<span class="number">1</span>:]</div><div class="line">    J = sum((-y*log(hx) - (<span class="number">1</span>-y)*log(<span class="number">1</span>-hx)))/len(X) \</div><div class="line">        + (lam / (<span class="number">2.0</span> * len(X))) * (thetaR.T.dot(thetaR))</div><div class="line">    <span class="keyword">return</span> J</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_grad</span><span class="params">(theta, X, y,lam)</span>:</span></div><div class="line">    reg = (lam/len(y))*theta</div><div class="line">    reg[<span class="number">0</span>] = <span class="number">0</span></div><div class="line">    grad = X.T.dot(sigmoid(X,theta)-y)/len(y)+reg</div><div class="line">    <span class="keyword">return</span> grad</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotDecisionBoundary</span><span class="params">(theta,lam)</span>:</span></div><div class="line">    u = linspace(<span class="number">-1</span>, <span class="number">1.5</span>, <span class="number">50</span>)</div><div class="line">    v = linspace(<span class="number">-1</span>, <span class="number">1.5</span>, <span class="number">50</span>)</div><div class="line">    z = zeros(shape=(len(u), len(v)))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(u)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(v)):</div><div class="line">            z[i, j] = (map_feature(array(u[i]), array(v[j])).dot(array(theta)))</div><div class="line">    z = z.T</div><div class="line">    plt.contour(u, v, z)</div><div class="line">    plt.title(<span class="string">'lambda = %f'</span> % lam)</div><div class="line">    plt.xlabel(<span class="string">'Microchip Test 1'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Microchip Test 2'</span>)</div><div class="line">    plt.axis([<span class="number">-0.85</span>,<span class="number">1.1</span>,<span class="number">-0.85</span>,<span class="number">1.1</span>])</div><div class="line">    plt.legend([<span class="string">'y = 1'</span>, <span class="string">'y = 0'</span>, <span class="string">'Decision boundary'</span>])</div><div class="line">    plt.show()</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    path = <span class="string">'C:\\Users\\wing\\Desktop\\machine-learning-ex2\\ex2\\ex2data2.txt'</span></div><div class="line">    X,y,initial_theta,lam = init(path)</div><div class="line">    result = optimize.fmin_tnc(func=get_cost, x0=initial_theta, fprime=get_grad, args=(X, y,lam))  </div><div class="line">    plotDecisionBoundary(result[<span class="number">0</span>],lam)</div></pre></td></tr></table></figure>
<h2 id="运算结果"><a href="#运算结果" class="headerlink" title="运算结果"></a>运算结果</h2><ul>
<li>过拟合<br>lambda=0。不考虑 $\frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$和$\frac{\lambda}{m}\theta_j$ ，我们可以看到图像已经被拟合过度。这样的答案没有通用性<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170330/122914544.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>欠拟合<br>lambda=10，欠拟合会导致数据的很多细节被抛弃。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170330/123134133.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>拟合较好<br>lambda=1，准确性到91%左右，这个准确率算低的了吧，还有很大上升空间。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170330/123236964.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><a href="http://news.ustc.edu.cn/xwbl/201412/t20141205_206292.html" target="_blank" rel="external">熊辉</a>上课的时候，说机器学习需要调参数，参数很不好调，需要使用者对数据有极高的敏感度。</p>
<p>参数lambda就是这种感觉，感觉真的是乱调一通，然后就发现，诶哟，好像还不错。</p>
<p>参考链接：<br><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html" target="_blank" rel="external">scipy.optimize.minimize</a><br><a href="https://en.wikipedia.org/wiki/Logistic_regression" target="_blank" rel="external">Logistic regression</a><br><a href="http://www.johnwittenauer.net/machine-learning-exercises-in-python-part-3/" target="_blank" rel="external">Machine Learning Exercises In Python, Part 3</a><br><a href="http://aimotion.blogspot.com/2011/11/machine-learning-with-python-logistic.html" target="_blank" rel="external">machine-learning-with-python-logistic</a></p>
<hr>
<p>以上</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=421091970&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://feiyang.li/2017/03/26/Coursera-ML-3-Multivariate-Linear-Regression-python/index.html&quot;&gt;线性回归算法&lt;/a&gt;，可用于房屋价格的估计及股票市场分析。 &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/programming/ixFof/logistic-regression&quot;&gt;Logistic Regression&lt;/a&gt; （逻辑回归）是当前业界比较常用的机器学习方法，用于估计某种事物的可能性。比如某用户购买某商品的可能性，某病人患有某种疾病的可能性，以及某广告被用户点击的可能性等。相关公式推导在&lt;a href=&quot;http://feiyang.li/2017/03/27/Coursera-ML-4-Logistic-Regression/index.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Coursera ML" scheme="http://feiyang.li/categories/Coursera-ML/"/>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="读书笔记" scheme="http://feiyang.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Coursera ML(4)-Logistic Regression</title>
    <link href="http://feiyang.li/2017/03/27/Coursera-ML-4-Logistic-Regression/index.html"/>
    <id>http://feiyang.li/2017/03/27/Coursera-ML-4-Logistic-Regression/index.html</id>
    <published>2017-03-27T11:13:38.000Z</published>
    <updated>2017-03-28T07:49:36.625Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>本节笔记对应<a href="https://www.coursera.org/learn/machine-learning/home/week/3" target="_blank" rel="external">第三周Coursera课程</a>  <strong>binary classification problem</strong></p>
</blockquote>
<hr>
<a id="more"></a>
<p><strong>Classification is not actually a linear function.</strong></p>
<h1 id="Classification-and-Representation"><a href="#Classification-and-Representation" class="headerlink" title="Classification and Representation"></a>Classification and Representation</h1><h2 id="Hypothesis-Representation"><a href="#Hypothesis-Representation" class="headerlink" title="Hypothesis Representation"></a>Hypothesis Representation</h2><ul>
<li>Sigmoid Function(or we called Logistic Function) $$\begin{align*}& h_\theta (x) = g ( \theta^T x ) \newline \newline& z = \theta^T x \newline& g(z) = \dfrac{1}{1 + e^{-z}}\end{align*}$$ 
Sigmoid Function 可以使输出值范围在$(0,1)$之间。$g(z)$对应的图为：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170327/112711489.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<ul>
<li>$h_\theta(x)$ will give us the <strong>probability</strong> that our output is 1.</li>
<li>Some basic knowledge of discrete $$\begin{align*}& h_\theta(x) = P(y=1 | x ; \theta) = 1 - P(y=0 | x ; \theta) \newline& P(y = 0 | x;\theta) + P(y = 1 | x ; \theta) = 1\end{align*}$$ 
</li>
</ul>
<h2 id="Decision-Boundary"><a href="#Decision-Boundary" class="headerlink" title="Decision Boundary"></a>Decision Boundary</h2><ul>
<li>translate the output of the hypothesis function as follows: $$\begin{align*}& h_\theta(x) \geq 0.5 \rightarrow y = 1 \newline& h_\theta(x) < 0.5 \rightarrow y = 0 \newline\end{align*}$$ </li>
<li>From these statements we can now say: $$\begin{align*}& \theta^T x \geq 0 \Rightarrow y = 1 \newline& \theta^T x < 0 \Rightarrow y = 0 \newline\end{align*}$$ 
</li>
</ul>
<h1 id="Logistic-Regression-Model"><a href="#Logistic-Regression-Model" class="headerlink" title="Logistic Regression Model"></a>Logistic Regression Model</h1><h2 id="Cost-function-for-one-variable-hypothesis"><a href="#Cost-function-for-one-variable-hypothesis" class="headerlink" title="Cost function for one variable hypothesis"></a>Cost function for one variable hypothesis</h2><ul>
<li>To let the cost function be convex for gradient descent, it should be like this: $$J(\theta) = \dfrac{1}{m} \sum_{i=1}^m \mathrm{Cost}(h_\theta(x^{(i)}),y^{(i)})$$ 
</li>
</ul>
 $$Cost(h_\theta (x), y) =\begin{cases}-log(h_\theta (x)),  (y = 1) \\-log(1 - h_\theta (x)), (y = 0) \\\end{cases}$$ 
<ul>
<li>example $$\begin{align*}& \mathrm{Cost}(h_\theta(x),y) = 0 \text{ if } h_\theta(x) = y \newline & \mathrm{Cost}(h_\theta(x),y) \rightarrow \infty \text{ if } y = 0 \; \mathrm{and} \; h_\theta(x) \rightarrow 1 \newline & \mathrm{Cost}(h_\theta(x),y) \rightarrow \infty \text{ if } y = 1 \; \mathrm{and} \; h_\theta(x) \rightarrow 0 \newline \end{align*}$$ 
</li>
</ul>
<h2 id="Simplified-Cost-Function-and-Gradient-Descent"><a href="#Simplified-Cost-Function-and-Gradient-Descent" class="headerlink" title="Simplified Cost Function and Gradient Descent"></a>Simplified Cost Function and Gradient Descent</h2><ul>
<li><p>compress our cost function’s two conditional cases into one case:</p>
 $$\mathrm{Cost}(h_\theta(x),y) = - y \; \log(h_\theta(x)) - (1 - y) \log(1 - h_\theta(x))$$ 
</li>
<li><p>entire cost function</p>
 $$J(\theta) = - \frac{1}{m} \displaystyle \sum_{i=1}^m [y^{(i)}\log (h_\theta (x^{(i)})) + (1 - y^{(i)})\log (1 - h_\theta(x^{(i)}))]$$ 
</li>
</ul>
<h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><ul>
<li><p>the general form of gradient descent ，求偏导的得到$J(\theta)$的极值</p>
 $$\begin{align*}& Repeat \; \lbrace \newline & \; \theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta) \newline & \rbrace\end{align*}$$ 
</li>
<li><p>using calculus </p>
 $$\frac{\partial}{\partial \theta_j} J(\theta) = \frac{1}{m}\sum\limits_{i=1}^{m}[(h_\theta (x^{(i)}) - y^{(i)})x_j^{(i)}]$$ 
</li>
<li><p>get</p>
 $$\begin{align*} & Repeat \; \lbrace \newline & \; \theta_j := \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} \newline & \rbrace \end{align*}$$  
</li>
</ul>
<h2 id="Multiclass-Classification-One-vs-all"><a href="#Multiclass-Classification-One-vs-all" class="headerlink" title="Multiclass Classification: One-vs-all"></a>Multiclass Classification: One-vs-all</h2><ul>
<li>For more than 2 features of y, do logisitc regression for each feature separately</li>
<li>Train a logistic regression classifier $h_\theta(x)$ for each class￼ to predict the probability that ￼ ￼y = i￼ ￼. </li>
<li>To make a prediction on a new x, pick the class ￼that maximizes $ h_\theta (x) $<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170327/182954425.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h1 id="Solving-the-Problem-of-Overfitting"><a href="#Solving-the-Problem-of-Overfitting" class="headerlink" title="Solving the Problem of Overfitting"></a>Solving the Problem of Overfitting</h1><h2 id="The-Problem-of-Overfitting"><a href="#The-Problem-of-Overfitting" class="headerlink" title="The Problem of Overfitting"></a>The Problem of Overfitting</h2><p><img src="http://cdn.mmmxcc.cn/blog/20170327/183239547.png" alt="mark"></p>
<h2 id="address-the-issue-of-overfitting"><a href="#address-the-issue-of-overfitting" class="headerlink" title="address the issue of overfitting"></a>address the issue of overfitting</h2><ul>
<li>Reduce the number of features:<ul>
<li>Manually select which features to keep.</li>
<li>Use a model selection algorithm (studied later in the course).</li>
</ul>
</li>
<li>Regularization:<ul>
<li>Keep all the features, but reduce the magnitude of parameters $θ_j$. </li>
<li>Regularization works well when we have a lot of slightly useful features.</li>
</ul>
</li>
</ul>
<h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170327/184128038.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>in a single summation $$min_\theta\ \dfrac{1}{2m}\  \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})^2 + \lambda\ \sum_{j=1}^n \theta_j^2$$ 
</li>
</ul>
<p>The λ, or lambda, is the regularization parameter. It determines how much the costs of our theta parameters are inflated.</p>
<h2 id="Regularized-Linear-Regression"><a href="#Regularized-Linear-Regression" class="headerlink" title="Regularized Linear Regression"></a>Regularized Linear Regression</h2><ul>
<li><p>Gradient Descent</p>
 $$\begin{align*} & \text{Repeat}\ \lbrace \newline & \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline & \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2...n\rbrace\newline & \rbrace \end{align*}$$ 
</li>
<li><p>Normal Equation</p>
 $$\begin{align*}& \theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty \newline& \text{where}\ \ L = \begin{bmatrix} 0 & & & & \newline & 1 & & & \newline & & 1 & & \newline & & & \ddots & \newline & & & & 1 \newline\end{bmatrix}\end{align*}$$ 
<ul>
<li>L is a matrix with 0 at the top left and 1’s down the diagonal, with 0’s everywhere else. It should have dimension (n+1)×(n+1)</li>
<li>Recall that if m ≤ n, then $X^TX$ is non-invertible. However, when we add the term λ⋅L, then $X^TX + λ⋅L $becomes invertible.</li>
</ul>
</li>
</ul>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>我在这里整理一下上述两个方法，补全课程上的相关推导。</p>
<h2 id="Logistic-Regression-Model-1"><a href="#Logistic-Regression-Model-1" class="headerlink" title="Logistic Regression Model"></a>Logistic Regression Model</h2><h3 id="h-theta-x-是假设函数"><a href="#h-theta-x-是假设函数" class="headerlink" title="$h_\theta(x)$是假设函数"></a>$h_\theta(x)$是假设函数</h3> $$h_\theta (x) = g ( \theta^T x ) = \dfrac{1}{1 + e^{- \theta^T x}} $$ 
<p>注意假设函数和真实数据之间的区别</p>
<h3 id="Cost-Function-1"><a href="#Cost-Function-1" class="headerlink" title="Cost Function"></a>Cost Function</h3> $$J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large]$$ 
<p>回头看看上边的那个$h_\theta (x)$ ，cost function定义了训练集给出的结果 和 当前计算结果之间的差距。当然，该差距越小越好，那么需要求导一下。</p>
<h3 id="Gradient-Descent-1"><a href="#Gradient-Descent-1" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><ul>
<li>原始公式 $$\theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta)$$ </li>
<li>求导计算 $$\frac{\partial}{\partial \theta_j} J(\theta) = \frac{1}{m}\sum\limits_{i=1}^{m}[(h_\theta (x^{(i)}) - y^{(i)})x_j^{(i)}]$$ </li>
<li>计算结果 $$\theta_j := \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} $$ 
</li>
</ul>
<p>这里推导一下$\frac{\partial}{\partial \theta_j} J(\theta)$：</p>
<ul>
<li><p>计算$h_\theta’(x)$导数</p>
 $$\begin{align*} &h_\theta'(x) = ( \frac1{1+e^{- \theta x}})'\newline &\ \ \ \ \ \ \ \  =   \frac{e^{- \theta x}x}{1+e^{- \theta x}}\newline &\ \ \ \ \ \ \ \  =   \frac{1+e^{- \theta x}-1}{(1+e^{- \theta x})^2}x\newline &\ \ \ \ \ \ \ \  =  \large[\frac{1}{1+e^{- \theta x}}-\frac{1}{(1+e^{- \theta x})^2}\large]x\newline &\ \ \ \ \ \ \ \  = h_\theta(x)(1-h_\theta(x))x  \end{align*}$$ 
</li>
<li><p>推导$\frac{\partial}{\partial \theta_j} J(\theta)$</p>
</li>
</ul>
 $$\begin{align*} &\frac{\partial}{\partial \theta_j} J(\theta) = \frac{\partial}{\partial \theta_j}   \frac{1}{m} \sum_{i=1}^m \large[ -y^{(i)}\ \log (h_\theta (x^{(i)})) - (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \  =   \frac{1}{m} \sum_{i=1}^m \large[ -y^{(i)}\ \frac1{h_\theta(x^{(i)})}h_\theta'(x^{(i)}) - (1 - y^{(i)}) \frac{-1}{1-h_\theta(x^{(i)})}h_\theta'(x^{(i)})\large] \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \  =   \frac{1}{m} \sum_{i=1}^m \large[ -y^{(i)}\ \frac1{h_\theta(x^{(i)})}h_\theta(x^{(i)})(1-h_\theta(x^{(i)}))x^{(i)}  \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ - (1 - y^{(i)}) \frac{-1}{1-h_\theta(x^{(i)})}h_\theta(x^{(i)})(1-h_\theta(x^{(i)}))x^{(i)}\large] \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \  =   \frac{1}{m} \sum_{i=1}^m \large[ -y^{(i)}(1-h_\theta(x^{(i)}) x^{(i)})+(1- y)h_\theta(x^{(i)}) x^{(i)})\large]  \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \  =   \frac{1}{m} \sum_{i=1}^m \large[ -x^{(i)}y^{(i)}+x^{(i)}y^{(i)}h_\theta(x^{(i)}) \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +x^{(i)}h_\theta(x^{(i)}) - x^{(i)}y^{(i)}h_\theta(x^{(i)}) \large] \newline &\ \ \ \ \ \ \ \ \ \ \ \ \ \  = \frac{1}{m}\sum\limits_{i=1}^{m}[(h_\theta (x^{(i)}) - y^{(i)})x_j^{(i)}] \end{align*}$$ 
<p>即：<br> $$\begin{align*} &\frac{\partial}{\partial \theta_j} J(\theta) = \frac{1}{m}\sum\limits_{i=1}^{m}[(h_\theta (x^{(i)}) - y^{(i)})x_j^{(i)}] \end{align*}$$ </p>
<h2 id="Solving-the-Problem-of-Overfitting-1"><a href="#Solving-the-Problem-of-Overfitting-1" class="headerlink" title="Solving the Problem of Overfitting"></a>Solving the Problem of Overfitting</h2><p>其他地方都一样，稍作修改</p>
<h3 id="Cost-Function-2"><a href="#Cost-Function-2" class="headerlink" title="Cost Function"></a>Cost Function</h3> $$J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$$ 
<h3 id="Gradient-Descent-2"><a href="#Gradient-Descent-2" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3> $$\begin{align*} & \text{Repeat}\ \lbrace \newline & \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline & \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2...n\rbrace\newline & \rbrace \end{align*}$$ 
<hr>
<p>以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本节笔记对应&lt;a href=&quot;https://www.coursera.org/learn/machine-learning/home/week/3&quot;&gt;第三周Coursera课程&lt;/a&gt;  &lt;strong&gt;binary classification problem&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Coursera ML" scheme="http://feiyang.li/categories/Coursera-ML/"/>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="读书笔记" scheme="http://feiyang.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Coursera ML(3)-Multivariate Linear Regression python实现</title>
    <link href="http://feiyang.li/2017/03/26/Coursera-ML-3-Multivariate-Linear-Regression-python/index.html"/>
    <id>http://feiyang.li/2017/03/26/Coursera-ML-3-Multivariate-Linear-Regression-python/index.html</id>
    <published>2017-03-26T11:00:29.000Z</published>
    <updated>2017-03-27T11:32:14.121Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>Multivariate Linear Regression and Programming Exercise 1</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="Gradient-Descent-for-Multiple-Variables"><a href="#Gradient-Descent-for-Multiple-Variables" class="headerlink" title="Gradient Descent for Multiple Variables"></a>Gradient Descent for Multiple Variables</h1><ul>
<li>Suppose we have n variables, set hypothesis to be:</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/192353908.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><p>Cost Function</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/192415558.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
<li><p>Gradient Descent  Algorithm</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/192709947.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Get every feature into approximately [-1, 1]. Just normalize all the parameters :)</p>
</li>
<li><p>Learning Rate:Not too big(fail to converge), not too small(too slow)</p>
</li>
<li>Polynormal Regression:Use feature scalling. (Somewhat like normalizing dimension)</li>
</ul>
<h1 id="Programming-Exercise-1"><a href="#Programming-Exercise-1" class="headerlink" title="Programming Exercise 1"></a>Programming Exercise 1</h1><h2 id="下载程序及相关数据"><a href="#下载程序及相关数据" class="headerlink" title="下载程序及相关数据"></a>下载程序及相关数据</h2><p>Stanford coursera Andrew Ng 机器学习课程编程作业（Exercise 1），作业下载链接貌似被墙了，下载链接放这。<br><a href="http://home.ustc.edu.cn/~mmmwhy/machine-learning-ex1.zip" target="_blank" rel="external">http://home.ustc.edu.cn/~mmmwhy/machine-learning-ex1.zip</a></p>
<h2 id="重新推导一下："><a href="#重新推导一下：" class="headerlink" title="重新推导一下："></a>重新推导一下：</h2><p>其实这里一共就两个式子：</p>
<ul>
<li><p>computeCost</p>
 
$$h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \theta_3 x_3 + \cdots + \theta_n x_n$$
$$J(\theta_0,\theta_1 )=\frac1{wm} \sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})^w$$
 
</li>
<li><p>gradientDescent</p>
 
 $$\begin{align*} \text{repeat until convergence: } \lbrace & \newline \theta_0 := & \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}(h_\theta(x_{i}) - y_{i}) \newline \theta_1 := & \theta_1 - \alpha \frac1m \sum\limits_{i=1}^m\left((h_\theta(x_i) - y_i) x_i\right) \newline \rbrace& \end{align*}$$
 
</li>
</ul>
<h2 id="python拟合实现代码"><a href="#python拟合实现代码" class="headerlink" title="python拟合实现代码"></a>python拟合实现代码</h2><p>原本用的是matlab代码，我用python实现了一下，结果是一样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(path)</span>:</span></div><div class="line">    X=[]</div><div class="line">    y=[]</div><div class="line">    <span class="keyword">with</span> open(path,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            X.append([<span class="number">1</span>,float(line.split(<span class="string">','</span>)[<span class="number">0</span>])])</div><div class="line">            y.append(float(line.split(<span class="string">','</span>)[<span class="number">1</span>]))</div><div class="line">    <span class="keyword">return</span> X,y</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataplot</span><span class="params">(x,theta,y)</span>:</span></div><div class="line">    plt.plot(x, y, <span class="string">'rx'</span>, markersize=<span class="number">10</span>)</div><div class="line">    plt.ylabel(<span class="string">'Profit in $10,000s'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Population of City in 10,000s'</span>)</div><div class="line">    plt.plot(X[:,<span class="number">1</span>],X*theta,<span class="string">'-'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span><span class="params">(X,y,theta)</span>:</span></div><div class="line">    m = len(y)</div><div class="line">    J = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">        J = J + float((X[i]*theta-y[i])**<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> J/(<span class="number">2</span>*m)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, num_iters)</span>:</span></div><div class="line">    m = len(y)</div><div class="line">    num_iters = <span class="number">1500</span></div><div class="line">    J_history = np.zeros(num_iters)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iters):</div><div class="line">        S =X.T * (X * theta - np.mat(y).T) / m</div><div class="line">        theta = theta - alpha * S;</div><div class="line">        J_history[i] = computeCost(X,y,theta)</div><div class="line">    <span class="keyword">return</span> theta</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    theta = np.mat([[<span class="number">0</span>],[<span class="number">0</span>]])</div><div class="line">    iterations = <span class="number">1500</span></div><div class="line">    alpha = <span class="number">0.01</span></div><div class="line">    iterations = <span class="number">1500</span></div><div class="line">    path = <span class="string">"C:\Users\wing\Documents\MATLAB\ex1\ex1data1.txt"</span></div><div class="line">    </div><div class="line">    x,y = readfile(path)<span class="comment"># 小写的X不是矩阵，是list，大写的X是矩阵。</span></div><div class="line">    X = np.mat(x)</div><div class="line">    J = computeCost(X, y, theta)</div><div class="line">    theta = gradientDescent(X, y, theta, alpha, iterations)</div><div class="line">    dataplot(X[:,<span class="number">1</span>],theta,y)</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170326/171141428.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> 
<p>输出的图有点小，就这样吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Multivariate Linear Regression and Programming Exercise 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Coursera ML" scheme="http://feiyang.li/categories/Coursera-ML/"/>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="读书笔记" scheme="http://feiyang.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Coursera ML(2)-Model and Cost Function</title>
    <link href="http://feiyang.li/2017/03/25/Coursera-ML-2-Model-and-Cost-Function/index.html"/>
    <id>http://feiyang.li/2017/03/25/Coursera-ML-2-Model-and-Cost-Function/index.html</id>
    <published>2017-03-25T10:49:36.000Z</published>
    <updated>2017-03-27T11:35:22.375Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>Model and Cost Function / Parameter Learning / Gradient Descent For Linear Regression</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="Model-and-Cost-Function"><a href="#Model-and-Cost-Function" class="headerlink" title="Model and Cost Function"></a>Model and Cost Function</h1><table>
<thead>
<tr>
<th style="text-align:center">Tables</th>
<th style="text-align:center">Are</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Hypothesis</td>
<td style="text-align:center">$$h_{\theta}={\theta}_0+{\theta}_1x$$</td>
</tr>
<tr>
<td style="text-align:center">Parameter</td>
<td style="text-align:center">${\theta}_0$，${\theta}_1$</td>
</tr>
<tr>
<td style="text-align:center">Cost Function</td>
<td style="text-align:center"> $J(\theta_0,\theta_1)= \frac1{2m}\sum_{i=1}^m(h_{\theta}(x^i)-y^i)^w$ </td>
</tr>
<tr>
<td style="text-align:center">Goal</td>
<td style="text-align:center">$minimiseJ(\theta_0,\theta_1)$</td>
</tr>
</tbody>
</table>
<h2 id="Model-Representation"><a href="#Model-Representation" class="headerlink" title="Model Representation"></a>Model Representation</h2><ul>
<li>Hypothesis:<br>$$h_{\theta}={\theta}_0+{\theta}_1x$$<br>${\theta}_0$和${\theta}_1$称为模型参数</li>
</ul>
<h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><p>We can measure the accuracy of our hypothesis function by using a <strong>cost function</strong>. his takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x’s and the actual output y’s. 如何尽可能的将直线与我们的数据相拟合</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/211048488.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/134518022.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="Parameter-Learning"><a href="#Parameter-Learning" class="headerlink" title="Parameter Learning"></a>Parameter Learning</h1><h2 id="Gradient-descent-idea"><a href="#Gradient-descent-idea" class="headerlink" title="Gradient descent idea"></a>Gradient descent idea</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/152030096.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>Turns out, that if you’re standing at that point on the hill, you look all around and you find that the best direction is to take a little step downhill is roughly that direction. Okay, and now you’re at this new point on your hill. You’re gonna, again, look all around and say what direction should I step in order to take a little baby step downhill? And if you do that and take another step, you take a step in that direction. </p>
</blockquote>
<h2 id="Gradient-descent-algorithm"><a href="#Gradient-descent-algorithm" class="headerlink" title="Gradient descent algorithm"></a>Gradient descent algorithm</h2><p>repeat until convergence:{<br>    $\theta_j:=\theta_j-\alpha\frac\partial{\partial\theta_j}J(\theta_0,\theta_1)$<br>}</p>
<ul>
<li>use <strong>:=</strong> to denote assignment, so it’s the assignment operator.</li>
<li>$\alpha$ called:learning rate.controls how big a step we take downhill with creating descent. </li>
<li>$\theta_0,\theta_1 $should be updated simultaneously(using multiple temp var should work!)<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/154825347.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h1 id="Gradient-Descent-For-Linear-Regression"><a href="#Gradient-Descent-For-Linear-Regression" class="headerlink" title="Gradient Descent For Linear Regression"></a>Gradient Descent For Linear Regression</h1>
 $$\begin{align*} \text{repeat until convergence: } \lbrace & \newline \theta_0 := & \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}(h_\theta(x_{i}) - y_{i}) \newline \theta_1 := & \theta_1 - \alpha \frac1m \sum\limits_{i=1}^m\left((h_\theta(x_i) - y_i) x_i\right) \newline \rbrace& \end{align*}$$

<p> where m is the size of the training set, $\theta_0$ a constant that will be changing simultaneously with $\theta_1$  and $x_i y_i$are values of the given training set (data).</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170325/182301586.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></center>

<ul>
<li><p>The $J(θ_0,θ_1)$ is a convex function, which means it has only one global minimun, which means gradient descent will always hit the best fit</p>
</li>
<li><p>“Batch” Gradient Descent: “Batch” means the algo is trained from all the samples every time</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Model and Cost Function / Parameter Learning / Gradient Descent For Linear Regression&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Coursera ML" scheme="http://feiyang.li/categories/Coursera-ML/"/>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="读书笔记" scheme="http://feiyang.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>算法导论 第15章 动态规划</title>
    <link href="http://feiyang.li/2017/03/24/dynamic-programming/index.html"/>
    <id>http://feiyang.li/2017/03/24/dynamic-programming/index.html</id>
    <published>2017-03-24T09:05:47.000Z</published>
    <updated>2017-03-24T09:26:24.294Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>《算法导论》这门课的老师是<a href="http://cs.ustc.edu.cn/szdw/bdjs/201006/t20100614_22062.html" target="_blank" rel="external">黄刘生</a>和张曙，两位都是老人家了，代课很慢很没有激情，不过这一章非常有意思。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>书中列举四个常见问题，分析如何采用动态规划方法进行解决。<br>　　装配线调度问题<br>　　矩阵链乘问题：<br>　　最长公共子序列问题：<br>　　最优二叉查找树问题：</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>动态规划</strong>通常应用于最优化问题，此类问题可能包含多个可行解。每个解有一个值，而我们期望找到<strong>最大</strong>或者<strong>最小</strong>的解。</p>
<h2 id="动态规划算法的设计可以分为以下4个步骤："><a href="#动态规划算法的设计可以分为以下4个步骤：" class="headerlink" title="动态规划算法的设计可以分为以下4个步骤："></a>动态规划算法的设计可以分为以下4个步骤：</h2><ul>
<li>描述最优解的结构。</li>
<li>递归定义最优解的值。</li>
<li>按自底向上的方式计算最优解的值。（其实还应该有自顶向下的求解）</li>
<li>由计算出的结果构造一个最优解。</li>
</ul>
<p>动态规划算法效率会非常高的原因在于，其特殊的<strong>实现方法</strong>，也就是第三步。</p>
<h2 id="两种等价的实现方法："><a href="#两种等价的实现方法：" class="headerlink" title="两种等价的实现方法："></a>两种等价的实现方法：</h2><ul>
<li><strong>带备忘的自顶向下法</strong>，此方法按照正常的递归编写过程，但过程会保存每个子问题的解（通常保存在一个数组或散列表中）。当需要一个子问题的解时，程序首先检查是否已经保存过此解。如果是，直接返回；若不是，递归计算这个子问题。这种递归方式是<strong>带备忘的</strong>。</li>
<li><strong>自底而上法</strong>，这种方法需要恰当的定义子问题的<strong>规模</strong>，因为任何一个子问题的求解的依赖着<strong>更小的</strong>子问题。因此需要将问题进行排序，从小的问题开始处理。这样可以确保，在处理到大的问题时，其所依赖的更小的子问题已经求解完毕，结果已经保存。</li>
</ul>
<p>因此，我们会说  动态规划算法属于典型的用<strong>空间换取时间</strong>。由于没有频繁的递归函数的开销，自底而上方法的时间复杂度会更好一些。</p>
<h2 id="动态规划与分治法之间的区别："><a href="#动态规划与分治法之间的区别：" class="headerlink" title="动态规划与分治法之间的区别："></a>动态规划与分治法之间的区别：</h2><ul>
<li>分治法是指将问题分成一些独立的子问题，递归的求解各子问题。</li>
<li>动态规划适用于这些子问题不是独立的情况，也就是各子问题包含公共子问题。</li>
</ul>
<h1 id="动态规划基础"><a href="#动态规划基础" class="headerlink" title="动态规划基础"></a>动态规划基础</h1><p>什么时候可以使用动态规范方法解决问题呢？这个问题需要讨论一下，书中给出了采用动态规范方法的最优化问题中的两个要素：<strong>最优子结构</strong>和<strong>重叠子结构</strong>。</p>
<h2 id="最优子结构（自下向上）"><a href="#最优子结构（自下向上）" class="headerlink" title="最优子结构（自下向上）"></a>最优子结构（自下向上）</h2><p>最优子结构是指问题的一个最优解中包含了其子问题的最优解。在动态规划中，每次采用子问题的最优解来构造问题的一个最优解。</p>
<h3 id="寻找最优子结构，遵循的共同的模式："><a href="#寻找最优子结构，遵循的共同的模式：" class="headerlink" title="寻找最优子结构，遵循的共同的模式："></a>寻找最优子结构，遵循的共同的模式：</h3><ul>
<li><p>问题的一个解可以是做一个选择，得到一个或者多个有待解决的子问题。</p>
</li>
<li><p>假设对一个给定的问题，已知的是一个可以导致最优解的选择，不必关心如何确定这个选择。</p>
</li>
<li><p>在已知这个选择后，要确定哪些子问题会随之发生，如何最好地描述所得到的子问题空间。</p>
</li>
<li><p>利用“剪贴”技术，来证明问题的一个最优解中，使用的子问题的解本身也是最优的。</p>
</li>
</ul>
<h3 id="最优子结构在问题域中以两种方式变化："><a href="#最优子结构在问题域中以两种方式变化：" class="headerlink" title="最优子结构在问题域中以两种方式变化："></a>最优子结构在问题域中以两种方式变化：</h3><ul>
<li>有多少个子问题被使用在原问题的一个最优解中。</li>
<li>在决定一个最优解中使用哪些子问题时有多少个选择。</li>
</ul>
<p>动态规划按照自底向上的策略利用最优子结构，即：<strong>首先找到子问题的最优解，解决子问题，然后逐步向上找到问题的一个最优解</strong>。</p>
<p>为了描述子问题空间，可以遵循这样一条有效的经验规则，就是尽量保持这个空间简单，然后在需要时再扩充它。</p>
<p>注意：在不能应用最优子结构的时候，就一定不能假设它能够应用。 <strong>警惕使用动态规划去解决缺乏最优子结构的问题！</strong></p>
<p>使用动态规划时，子问题之间必须是相互独立的！可以这样理解，N个子问题域互不相干，属于完全不同的空间。</p>
<h2 id="重叠子问题（自上向下）"><a href="#重叠子问题（自上向下）" class="headerlink" title="重叠子问题（自上向下）"></a>重叠子问题（自上向下）</h2><p>用来解决原问题的递归算法可以反复地解同样的子问题，而不是总是产生新的子问题。</p>
<p>重叠子问题是指当一个递归算法不断地调用同一个问题。</p>
<p>动态规划算法总是充分利用重叠子问题，通过每个子问题只解一次，把解保存在一个需要时就可以查看的表中，每次查表的时间为常数。</p>
<p>由计算出的结果反向构造一个最优解：把动态规划或者是递归过程中作出的每一次选择（记住：保存的是每次作出的选择）都保存下来，在最后就一定可以通过这些保存的选择来反向构造出最优解。</p>
<p>做备忘录的递归方法：这种方法是动态规划的一个变形，它本质上与动态规划是一样的，但是比动态规划更好理解！<br>　　（1） 使用普通的递归结构，自上而下的解决问题。<br>　　（2） 当在递归算法的执行中每一次遇到一个子问题时，就计算它的解并填入一个表中。以后每次遇到该子问题时，只要查看并返回表中先前填入的值即可。</p>
<h1 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> 给定一个长度为n的钢条，以及一个价格表p，p中列出了每英寸钢条的价格，将长度为n的钢条切割为若干短钢条出售，求一个钢条的切割方案，使得收益最大，切割工序没有成本。比如价格表p如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170323/194427893.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>长度为n的钢条，一共有$2^{n-1}$种不同的切割方案，因为可以再距离钢条左边为i（i=1,2,…,n-1）处，我们总是可以选择切割或者不切割。比如下图表示了n=4的切割情况：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170323/195029493.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure>
<h2 id="理论依据"><a href="#理论依据" class="headerlink" title="理论依据"></a>理论依据</h2><p>我们称钢条切割问题满足<strong>最优子结构</strong>性质：问题的最优解由相关子问题的最优解组合而成，而这些子问题可以独立求解。</p>
<p>我们可以这样理解钢条问题：将钢条从左边切下一段长度为i的一段，对剩下的n-i的部分继续进行切割（递归求解），而不对左边长度为i的一段在进行切割。</p>
<p><img src="http://cdn.mmmxcc.cn/blog/20170324/172614530.png" alt=""></p>
<p>这样问题的解就转化为最优解了。</p>
<h2 id="自顶向下递归实现"><a href="#自顶向下递归实现" class="headerlink" title="自顶向下递归实现"></a>自顶向下递归实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CUT-ROD(p,n)</div><div class="line"><span class="keyword">if</span>  n == <span class="number">0</span></div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span></div><div class="line">q = -∞</div><div class="line"><span class="keyword">for</span>  i = <span class="number">1</span> to n</div><div class="line">   q = max(q,  p[i]+CUT-ROD(p, n-i))</div><div class="line"><span class="keyword">return</span>  q</div></pre></td></tr></table></figure>
<p>  CUT-ROD的效率很差，这是因为CUT-ROD反复的求解一些相同的子问题，下图显示了当n==4时的调用情况：<br>  <img src="http://cdn.mmmxcc.cn/blog/20170323/200833676.png" alt="mark"></p>
<h2 id="带备忘的自顶向下"><a href="#带备忘的自顶向下" class="headerlink" title="带备忘的自顶向下"></a>带备忘的自顶向下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">MEMOIZED-CUT-ROD(p,n)</div><div class="line">let  r[<span class="number">0.</span>.n] be a <span class="keyword">new</span> <span class="built_in">array</span></div><div class="line"><span class="keyword">for</span>  i = <span class="number">0</span> to n</div><div class="line">    r[i]= -∞</div><div class="line"><span class="keyword">return</span>  MEMOIZED-CUT-ROD-AUX(p, n, r)</div><div class="line"> </div><div class="line">MEMOIZED-CUT-ROD-AUX(p,n, r)</div><div class="line"><span class="keyword">if</span>  r[n] &gt;= <span class="number">0</span></div><div class="line">    <span class="keyword">return</span>  r[n]</div><div class="line"><span class="keyword">if</span>  n == <span class="number">0</span></div><div class="line">    q = <span class="number">0</span></div><div class="line"><span class="keyword">else</span>  q = -∞</div><div class="line">    <span class="keyword">for</span>  i = <span class="number">1</span> to n</div><div class="line">        q= max(q,  p[i]+MEMOIZED-CUT-ROD-AUX(p, n-i,r))</div><div class="line">r[n] = q</div><div class="line"><span class="keyword">return</span> q</div></pre></td></tr></table></figure>
<p>该方法与之前的普通递归方法类似，只是会在过程中保存子问题的解，当需要一个子问题的解的时候，先查看是否已经保存过了，如果是，则直接使用即可。否则，按常规的递归方式计算子问题。所以称为带备忘的，因为它记住了之前已经计算出的结果。</p>
<h2 id="自底向上的方法"><a href="#自底向上的方法" class="headerlink" title="自底向上的方法"></a>自底向上的方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">BOTTOM-UP-CUT-ROD(p,n)</div><div class="line">let  r[<span class="number">0.</span>.n] be a <span class="keyword">new</span> <span class="built_in">array</span></div><div class="line">r[<span class="number">0</span>]= <span class="number">0</span></div><div class="line"><span class="keyword">for</span>  j = <span class="number">1</span> to n</div><div class="line">    q= -∞</div><div class="line">    <span class="keyword">for</span>  i = <span class="number">1</span> to j</div><div class="line">        q = max(q, p[i]+r[j-i])</div><div class="line">    r[j]= q</div><div class="line"><span class="keyword">return</span>  r[n]</div></pre></td></tr></table></figure>
<p>方法采用子问题的自然顺序，因此过程中依次求解规模为$j=0,1,2,3,4…,n$的问题。             </p>
<p>这两种算法具有相同的时间复杂度，BOTTOM-UP-CUT-ROD主要是双层嵌套循环，所以时间复杂度$Θ(n^2)$。MEMOIZED-CUT-ROD的时间复杂度也是$Θ(n^2)$。可以使用子问题图进行分析。</p>
<h2 id="python实现切割钢条问题"><a href="#python实现切割钢条问题" class="headerlink" title="python实现切割钢条问题"></a>python实现切割钢条问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod</span><span class="params">()</span>:</span></div><div class="line">    p = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">30</span>]</div><div class="line">    n = len(p)</div><div class="line">    r = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</div><div class="line">    s = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</div><div class="line">        q = <span class="number">-10</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> q &lt; (p[i]+r[j-i]):</div><div class="line">                q = (p[i]+r[j-i])</div><div class="line">                s[j] = i</div><div class="line">            <span class="comment">#q = max(q,p[i]+r[j-i])</span></div><div class="line">        r[j] = q</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_way</span><span class="params">(n)</span>:</span></div><div class="line">    cut_rod()</div><div class="line">    print(n,<span class="string">'---&gt;'</span>,r[n])</div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        print(s[n])</div><div class="line">        n = n - s[n]</div></pre></td></tr></table></figure>
<p>调用<code>find_way(9)</code>输出</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170324/145547041.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="矩阵链乘法"><a href="#矩阵链乘法" class="headerlink" title="矩阵链乘法"></a>矩阵链乘法</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>给定n 个矩阵的序列，希望求它们的乘积：$A_1A_2A_3…A_n$ 。因为矩阵的乘法满足结合律，所以可以对n个矩阵序列加括号，来改变乘积顺序。比如对于矩阵链&lt; $A_1$, $A_2$,$A_3$,$A_4$&gt;可以有下面的加括号方案：</p>
<p><center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170324/150009279.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><center></center></center></p>
<p>不同的加括号的方案，对于乘积运算的代价影响很大.</p>
<p>两个矩阵相乘，A为p <em> q矩阵，B为q </em> r矩阵。所以A 的乘法次数为p<em>q</em>r。</p>
<p>如果A（10,100 ），B（100,5）， C（5,50 ）三个矩阵相乘。</p>
<p>如果按照((AB)C)的顺序，则需要10<em>100</em>5  + 10<em>5</em>50  = 7500次乘法运算，如果按照(A(BC))的顺序，则需要100<em>5</em>50  + 10<em>100</em>50  = 75000次乘法运算。所以，不同的加括号方案，对于矩阵链乘法的代价影响很大。</p>
<h2 id="刻画最优解的结构特征"><a href="#刻画最优解的结构特征" class="headerlink" title="刻画最优解的结构特征"></a>刻画最优解的结构特征</h2><p>通过寻找最优子结构，利用最优子结构从子问题的最优解中构造出原问题的最优解。<br>假设$A<em>iA</em>{i+1}…A_j$的最优括号花方案的分割点是在$A<em>k$和$A</em>{K+1}$之间，一个非平凡的矩阵链乘法任何时候都是需要划分链的，<strong>任何最优解都是有子问题的最优解构成的</strong>。</p>
<h2 id="递归的定义最优解的值"><a href="#递归的定义最优解的值" class="headerlink" title="递归的定义最优解的值"></a>递归的定义最优解的值</h2><p>令 $m[i,j]$ 表示计算矩阵 $A<em>{i,j}$ 所需标量乘法的最小值，也即原问题的最优解，计算 $A</em>{1..n}$ 的最低代价就是 $m[1,n]$。</p>
<ul>
<li>对于i == j 的平凡问题，矩阵链只包含唯一的矩阵$A_{i,j}$。</li>
<li>对于$A<em>iA</em>{i+1}…A_j$的最优括号化方案的切割点在$A<em>k$和$A</em>{k+1}$之间。那么$m[i,j]$的解相当于计算$A<em>{i..k}$和$A</em>{k+1..j}$的代价加上，合并这两个子答案所需要的代价$p_{i-1}p_k p_j$</li>
</ul>
<p>因此，我们得到</p>
<p>$$m[i,j] = m[i,k]+m[k,j]+p_{i-1}p_k p_j$$</p>
<h2 id="计算最优解的值"><a href="#计算最优解的值" class="headerlink" title="计算最优解的值"></a>计算最优解的值</h2><p>算法应当按照长度递增的顺序求解矩阵链括号化问题，并按照对应的顺序填写表m。对举证连$A_{i,j}$，其规模为链的长度j-i+1</p>
<p>伪代码就不写了，直接写python代码</p>
<h2 id="python实现矩阵链乘法问题"><a href="#python实现矩阵链乘法问题" class="headerlink" title="python实现矩阵链乘法问题"></a>python实现矩阵链乘法问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">MATRIX_CHAIN_ORDER</span><span class="params">(p)</span>:</span>  </div><div class="line">    n = len(p)  </div><div class="line">    s = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]  </div><div class="line">    m = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]  </div><div class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">2</span>, n):           <span class="comment">#l is the chain length  </span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n-l+<span class="number">1</span>):  </div><div class="line">            j = i + l - <span class="number">1</span>  </div><div class="line">            m[i][j] = <span class="number">1e9</span>  </div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, j):  </div><div class="line">                q = m[i][k] + m[k+<span class="number">1</span>][j] + p[i<span class="number">-1</span>]*p[k]*p[j]  </div><div class="line">                <span class="keyword">if</span> q &lt; m[i][j]:  </div><div class="line">                    m[i][j] = q  </div><div class="line">                    s[i][j] = k  </div><div class="line">    PRINT_OPTIMAL_PARENS(s, <span class="number">1</span>, n<span class="number">-1</span>)</div><div class="line">    <span class="keyword">return</span> m</div><div class="line">    </div><div class="line">      </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PRINT_OPTIMAL_PARENS</span><span class="params">(s, i, j)</span>:</span>  </div><div class="line">    <span class="keyword">if</span> i == j:  </div><div class="line">        print(<span class="string">'A'</span>, end = <span class="string">''</span>)  </div><div class="line">        print(i, end = <span class="string">''</span>)  </div><div class="line">    <span class="keyword">else</span>:  </div><div class="line">        print(<span class="string">'('</span>, end = <span class="string">''</span>)  </div><div class="line">        PRINT_OPTIMAL_PARENS(s, i, s[i][j])  </div><div class="line">        PRINT_OPTIMAL_PARENS(s, s[i][j]+<span class="number">1</span>, j)  </div><div class="line">        print(<span class="string">')'</span>, end = <span class="string">''</span>)  </div><div class="line">   </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    A = [<span class="number">30</span>, <span class="number">35</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>,<span class="number">25</span>]</div><div class="line">    m = MATRIX_CHAIN_ORDER(A) </div><div class="line">    print(<span class="string">'\n'</span>,<span class="string">'共计需要'</span>,m[<span class="number">1</span>][n<span class="number">-1</span>],<span class="string">'次相乘'</span>)</div></pre></td></tr></table></figure>
<p>需要注意的问题是，这个算法的复杂度在O(n∧3)。而且这个算法和算法导论等地方的伪码比有些细微的差异体现在数组从0开始还是1开始上。大体上还是一致的。这里的空间复杂度也到了O(n∧2)。大致的计算顺序就是通过这个函数中的l来控制。l=2的时候，依次计算矩阵A[0]<em>A[1], A[1]</em>A[2], A[2]<em>A[3]…的次数。l=3的时候就开始计算A[0]</em>A[1]<em>A[2], A[1]</em>A[2]*A[3]..的次数。用更形象的话来说就是倒三角的顺序。下面的这个图就是对上面流程的描述：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170324/171007882.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<hr>
<p>以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《算法导论》这门课的老师是&lt;a href=&quot;http://cs.ustc.edu.cn/szdw/bdjs/201006/t20100614_22062.html&quot;&gt;黄刘生&lt;/a&gt;和张曙，两位都是老人家了，代课很慢很没有激情，不过这一章非常有意思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Algorithms" scheme="http://feiyang.li/tags/Algorithms/"/>
    
      <category term="dynamic programming" scheme="http://feiyang.li/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Python读取mnist</title>
    <link href="http://feiyang.li/2017/03/17/python-mnist/index.html"/>
    <id>http://feiyang.li/2017/03/17/python-mnist/index.html</id>
    <published>2017-03-17T08:25:27.000Z</published>
    <updated>2017-03-26T11:39:21.829Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>在做 TensorFlow和Python实现神经网络的时候，需要利用到一个MNIST数据集，数据集的格式是以<code>.idx1-ubyte</code>后缀，包含60000个训练图像。将这些图像展示出来，需要利用到<a href="http://feiyang.li/2017/03/17/python-struct/">struct模块</a>。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="下载MNIST训练数据集"><a href="#下载MNIST训练数据集" class="headerlink" title="下载MNIST训练数据集"></a>下载MNIST训练数据集</h1><h2 id="手动下载"><a href="#手动下载" class="headerlink" title="手动下载"></a>手动下载</h2><p>下载链接为： <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="external">http://yann.lecun.com/exdb/mnist/</a>  下载好之后解压就可以了，网站好像被墙了？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170317/110144292.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure>
<h2 id="使用tensorflow自带下载"><a href="#使用tensorflow自带下载" class="headerlink" title="使用tensorflow自带下载"></a>使用tensorflow自带下载</h2><p>可以看到，这个地方是有监督学习   (有label这个东西嘛)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="comment"># 下载mnist数据集</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">'/tmp/'</span>, one_hot=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># 数字(label)只能是0-9，神经网络使用10个出口节点就可以编码表示0-9；</span></div><div class="line"><span class="comment">#  1 -&gt; [0,1.0,0,0,0,0,0,0,0]   one_hot表示只有一个出口节点是hot</span></div><div class="line"><span class="comment">#  2 -&gt; [0,0.1,0,0,0,0,0,0,0]</span></div><div class="line"><span class="comment">#  5 -&gt; [0,0,0,0,0,1.0,0,0,0]</span></div><div class="line"><span class="comment">#  /tmp是macOS的临时目录，重启系统数据丢失; Linux的临时目录也是/tmp</span></div></pre></td></tr></table></figure></p>
<h1 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h1><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(filename ,<span class="string">'rb'</span>) <span class="keyword">as</span> f1:</div><div class="line">    buf1 = f1.read()</div></pre></td></tr></table></figure>
<p>还有另外一种常用的方法，两个方法目前来看没有什么区别。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1 = open(filename , <span class="string">'rb'</span>)</div><div class="line">buf = binfile.read() <span class="comment"># 先使用二进制方式把文件都读进来</span></div></pre></td></tr></table></figure></p>
<h2 id="跨过头部区域"><a href="#跨过头部区域" class="headerlink" title="跨过头部区域"></a>跨过头部区域</h2><h3 id="train-images-idx3-ubyte"><a href="#train-images-idx3-ubyte" class="headerlink" title="train-images-idx3-ubyte"></a>train-images-idx3-ubyte</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">TRAINING SET IMAGE FILE (train-images-idx3-ubyte):</div><div class="line"></div><div class="line">[offset] [type]          [value]          [description] </div><div class="line">0000     32 bit integer  0x00000803(2051) magic number </div><div class="line">0004     32 bit integer  60000            number of images </div><div class="line">0008     32 bit integer  28               number of rows </div><div class="line">0012     32 bit integer  28               number of columns </div><div class="line">0016     unsigned byte   ??               pixel </div><div class="line">0017     unsigned byte   ??               pixel </div><div class="line">........ </div><div class="line">xxxx     unsigned byte   ??               pixel</div></pre></td></tr></table></figure>
<p>可以看到头部有4个integer 类型，设置<code>image_index += struct.calcsize(&#39;&gt;IIII&#39;)</code>计算4个integer 值的位置，然后image_index 直接跳过去。至于为什么用<a href="http://feiyang.li/2017/03/17/python-struct/">IIII</a>，愿意的话可以点击了解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">temp = struct.unpack_from(<span class="string">'&gt;784B'</span>, buf1, image_index) </div><div class="line"><span class="comment"># '&gt;784B'的意思就是用大端法读取784( 28*28 )个unsigned byte</span></div><div class="line">im = np.reshape(temp,(<span class="number">28</span>,<span class="number">28</span>))</div></pre></td></tr></table></figure>
<p>最后那句<code>np.reshape(temp,(28,28))</code>是以下两句的缩写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">im = np.array(im)</div><div class="line">im = im.reshape(<span class="number">28</span>,<span class="number">28</span>)</div></pre></td></tr></table></figure></p>
<h3 id="train-labels-idx1-ubyte"><a href="#train-labels-idx1-ubyte" class="headerlink" title="train-labels-idx1-ubyte"></a>train-labels-idx1-ubyte</h3><p>可以看到头部有2个integer 类型，同理，label_index 直接跳过去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">TRAINING SET LABEL FILE (train-labels-idx1-ubyte):</div><div class="line"></div><div class="line">[offset] [type]          [value]          [description] </div><div class="line">0000     32 bit integer  0x00000801(2049) magic number (MSB first) </div><div class="line">0004     32 bit integer  60000            number of items </div><div class="line">0008     unsigned byte   ??               label </div><div class="line">0009     unsigned byte   ??               label </div><div class="line">........ </div><div class="line">xxxx     unsigned byte   ??               label</div><div class="line">The labels values are 0 to 9.</div></pre></td></tr></table></figure></p>
<h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.imshow(im , cmap=<span class="string">'gray'</span>)</div></pre></td></tr></table></figure>
<p>应该就可以看到图片了，是一张5， 当然头部文件还是要有的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">path = <span class="string">'E:\\Machine Learning\\train-images.idx3-ubyte'</span></div><div class="line"><span class="keyword">with</span> open(path,<span class="string">'rb'</span>) <span class="keyword">as</span> f1:</div><div class="line">    buf1 = f1.read() </div><div class="line">image_index = <span class="number">0</span></div><div class="line">image_index += struct.calcsize(<span class="string">'&gt;IIII'</span>)</div><div class="line">temp = struct.unpack_from(<span class="string">'&gt;784B'</span>, buf1, image_index) </div><div class="line"><span class="comment"># '&gt;784B'的意思就是用大端法读取784( 28*28 )个unsigned byte</span></div><div class="line">im = np.reshape(temp,(<span class="number">28</span>,<span class="number">28</span>))</div><div class="line">plt.imshow(im , cmap=<span class="string">'gray'</span>)</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170317/162019276.png" alt="give me 5" title="">
                </div>
                <div class="image-caption">give me 5</div>
            </figure>
<h1 id="多张图片读取"><a href="#多张图片读取" class="headerlink" title="多张图片读取"></a>多张图片读取</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170317/162228549.png" alt="多张图片" title="">
                </div>
                <div class="image-caption">多张图片</div>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'E:\\Machine Learning\\train-images.idx3-ubyte'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f1:</div><div class="line">        buf1 = f1.read()</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'E:\\Machine Learning\\train-labels.idx1-ubyte'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f2:</div><div class="line">        buf2 = f2.read()</div><div class="line">    <span class="keyword">return</span> buf1, buf2</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image</span><span class="params">(buf1)</span>:</span></div><div class="line">    image_index = <span class="number">0</span></div><div class="line">    image_index += struct.calcsize(<span class="string">'&gt;IIII'</span>)</div><div class="line">    im = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">        temp = struct.unpack_from(<span class="string">'&gt;784B'</span>, buf1, image_index) <span class="comment"># '&gt;784B'的意思就是用大端法读取784个unsigned byte</span></div><div class="line">        im.append(np.reshape(temp,(<span class="number">28</span>,<span class="number">28</span>)))</div><div class="line">        image_index += struct.calcsize(<span class="string">'&gt;784B'</span>)  <span class="comment"># 每次增加784B</span></div><div class="line">    <span class="keyword">return</span> im</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_label</span><span class="params">(buf2)</span>:</span> <span class="comment"># 得到标签数据</span></div><div class="line">    label_index = <span class="number">0</span></div><div class="line">    label_index += struct.calcsize(<span class="string">'&gt;II'</span>)</div><div class="line">    <span class="keyword">return</span> struct.unpack_from(<span class="string">'&gt;9B'</span>, buf2, label_index)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    image_data, label_data = readfile()</div><div class="line">    im = get_image(image_data)</div><div class="line">    label = get_label(label_data)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">        plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i + <span class="number">1</span>)</div><div class="line">        title = <span class="string">u"标签对应为："</span>+ str(label[i])</div><div class="line">        plt.title(title, fontproperties=<span class="string">'SimHei'</span>)</div><div class="line">        plt.imshow(im[i], cmap=<span class="string">'gray'</span>)</div><div class="line">    plt.show()</div></pre></td></tr></table></figure>
<hr>
<p>遇到的一些坑：</p>
<ul>
<li><p>中文标题乱码的问题</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.title(title, fontproperties=<span class="string">'SimHei'</span>) <span class="comment"># 后边这个字体**SimHei**加上就好了</span></div></pre></td></tr></table></figure>
</li>
<li><p>标题内部不能用<strong>+</strong><br>在外部加好之后，赋值给新变量，然后放进<code>title</code>即可</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在做 TensorFlow和Python实现神经网络的时候，需要利用到一个MNIST数据集，数据集的格式是以&lt;code&gt;.idx1-ubyte&lt;/code&gt;后缀，包含60000个训练图像。将这些图像展示出来，需要利用到&lt;a href=&quot;http://feiyang.li/2017/03/17/python-struct/&quot;&gt;struct模块&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>细究Python struct 模块</title>
    <link href="http://feiyang.li/2017/03/17/python-struct/index.html"/>
    <id>http://feiyang.li/2017/03/17/python-struct/index.html</id>
    <published>2017-03-17T06:08:07.000Z</published>
    <updated>2017-03-26T11:39:20.941Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p><a href="https://docs.python.org/3/library/struct.html#module-struct" target="_blank" rel="external">struct</a> — Interpret bytes as packed binary data，将字节与二进制文件相互转化的工具<strong>Python struct 模块</strong>。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="关于格式字符串"><a href="#关于格式字符串" class="headerlink" title="关于格式字符串"></a>关于格式字符串</h1><p>在Python手册中，给出了C语言中常用类型与Python类型对应的格式符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">格式符</th>
<th style="text-align:left">C语言类型</th>
<th style="text-align:left">Python类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:left">pad byte</td>
<td style="text-align:left">no value</td>
</tr>
<tr>
<td style="text-align:left">c</td>
<td style="text-align:left">char</td>
<td style="text-align:left">string of length 1</td>
</tr>
<tr>
<td style="text-align:left">b</td>
<td style="text-align:left">signed char</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">unsigned char</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">_Bool</td>
<td style="text-align:left">bool</td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:left">short</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">H</td>
<td style="text-align:left">unsigned short</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:left">int</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">I</td>
<td style="text-align:left">unsigned int</td>
<td style="text-align:left">integer or long</td>
</tr>
<tr>
<td style="text-align:left">l</td>
<td style="text-align:left">long</td>
<td style="text-align:left">integer</td>
</tr>
<tr>
<td style="text-align:left">L</td>
<td style="text-align:left">unsigned long</td>
<td style="text-align:left">long</td>
</tr>
<tr>
<td style="text-align:left">q</td>
<td style="text-align:left">long long</td>
<td style="text-align:left">long</td>
</tr>
<tr>
<td style="text-align:left">Q</td>
<td style="text-align:left">unsigned long</td>
<td style="text-align:left">long    long</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">float</td>
<td style="text-align:left">float</td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td style="text-align:left">double</td>
<td style="text-align:left">float</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:left">char[]</td>
<td style="text-align:left">string</td>
</tr>
<tr>
<td style="text-align:left">p</td>
<td style="text-align:left">char[]</td>
<td style="text-align:left">string</td>
</tr>
<tr>
<td style="text-align:left">P</td>
<td style="text-align:left">void *</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1 id="struct-pack-fmt-v1-v2-…"><a href="#struct-pack-fmt-v1-v2-…" class="headerlink" title="struct.pack(fmt, v1, v2, …)"></a>struct.pack(fmt, v1, v2, …)</h1><blockquote>
<p>Return a string containing the values v1, v2, … packed according to the given format. The arguments must match the values required by the format exactly.</p>
</blockquote>
<p>struct.pack用于将Python的值根据格式符，转换为字符串,准确来说是Byte。这个地方我们之前有提过，<a href="http://feiyang.li/2017/02/16/python-camp9/#Python3内的unicode和bytes">Python3内的unicode和bytes</a>，在Py3内<strong>文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170216/212835886.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>Py2是没有Byte这么个东西的。参数fmt是格式字符串，v1, v2, …表示要转换的python值。下面的例子将两个整数转换为字符串:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct  </div><div class="line"></div><div class="line">a = <span class="number">20</span>  </div><div class="line">b = <span class="number">400</span></div><div class="line"></div><div class="line">byte = struct.pack(<span class="string">"ii"</span>, a, b) <span class="comment">#转换后的str相当于其他语言中的字节流（字节数组），可以在网络上传输  </span></div><div class="line">big = struct.pack(<span class="string">"&gt;ii"</span>, a, b)  <span class="comment">#大端保存</span></div><div class="line">small = struct.pack(<span class="string">"&lt;ii"</span>, a, b) <span class="comment">#小端保存</span></div><div class="line">print(byte)</div><div class="line"><span class="comment"># &gt;&gt;&gt;:b'\x14\x00\x00\x00\x90\x01\x00\x00'</span></div><div class="line">print(big)</div><div class="line"><span class="comment"># &gt;&gt;&gt;:b'\x00\x00\x00\x14\x00\x00\x01\x90'</span></div><div class="line">print(small)</div><div class="line"><span class="comment"># &gt;&gt;&gt;:b'\x14\x00\x00\x00\x90\x01\x00\x00'</span></div><div class="line"><span class="keyword">print</span> (byte[<span class="number">0</span>],byte[<span class="number">4</span>]) </div><div class="line"><span class="comment"># &gt;&gt;&gt;:b'\x14\x00\x00\x00\x90\x01\x00\x00'</span></div></pre></td></tr></table></figure>
<p>格式符”i”表示转换为int，’ii’表示有两个int变量。进行转换后的结果长度为8个字节（int类型占用4个字节，两个int为8个字节）<del>可以看到输出的结果是乱码，因为结果是二进制数据，所以显示为乱码。可以使用python的内置函数repr来获取可识别的字符串</del> ，以上问题在Python3中不会出现了其中十六进制的0x00000014, 0x00000190分别表示20和400。</p>
<p>上一段代码<strong>最后那个很有意思诶，竟然是默认采用小端</strong>。</p>
<h2 id="大端存储和小端存储"><a href="#大端存储和小端存储" class="headerlink" title="大端存储和小端存储"></a>大端存储和小端存储</h2><p>小端：<strong>较高</strong>的有效字节存放在<strong>较高</strong>的存储器地址，<strong>较低</strong>的有效字节存放在<strong>较低</strong>的存储器地址。<br>大端：<strong>较高</strong>的有效字节存放在<strong>较低</strong>的存储器地址，<strong>较低</strong>的有效字节存放在<strong>较高</strong>的存储器地址。</p>
<p>如果将一个16位的整数0x1234存放到一个短整型变量（short）中。这个短整型变量在内存中的存储在大小端模式由下表所示。 </p>
<table>
<thead>
<tr>
<th style="text-align:left">地址偏移</th>
<th style="text-align:left">大端模式</th>
<th style="text-align:left">小端模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0x00</td>
<td style="text-align:left">12（OP0）</td>
<td style="text-align:left">34（OP1）</td>
</tr>
<tr>
<td style="text-align:left">0x01</td>
<td style="text-align:left">34（OP1）</td>
<td style="text-align:left">12（OP0）</td>
</tr>
</tbody>
</table>
<p>采用大端方式进行数据存放符合人类的正常思维，而采用小端方式进行数据存放利于计算机处理。</p>
<h1 id="struct-unpack-fmt-buffer"><a href="#struct-unpack-fmt-buffer" class="headerlink" title="struct.unpack(fmt, buffer)"></a>struct.unpack(fmt, buffer)</h1><blockquote>
<p>Unpack from the buffer <em>buffer</em> (presumably packed by pack(fmt, …)) according to the format string <em>fmt</em>. The result is a tuple even if it contains exactly one item. The buffer’s size in bytes must match the size required by the format, as reflected by <a href="https://docs.python.org/3/library/struct.html#struct.calcsize" target="_blank" rel="external">calcsize()</a>.</p>
</blockquote>
<p>struct.unpack做的工作刚好与struct.pack相反，用于将字节流转换成python数据类型。它的函数原型为：struct.unpack(fmt, string)，该函数返回一个tuple。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a1, a2 = struct.unpack(<span class="string">"ii"</span>, byte)  </div><div class="line">print(type(struct.unpack(<span class="string">"ii"</span>, byte)),a1,a2)</div><div class="line"><span class="comment"># &gt;&gt;&gt;:&lt;class 'tuple'&gt; 20 400</span></div></pre></td></tr></table></figure>
<h1 id="struct-calcsize-fmt"><a href="#struct-calcsize-fmt" class="headerlink" title="struct.calcsize(fmt)"></a>struct.calcsize(fmt)</h1><blockquote>
<p>Return the size of the struct (and hence of the bytes object produced by pack(fmt, …)) corresponding to the format string fmt.</p>
</blockquote>
<p>struct.calcsize用于计算格式字符串所对应的结果的长度，如：struct.calcsize(‘ii’)，返回8。因为两个int类型所占用的长度是8个字节。</p>
<hr>
<p>参考链接：<br><a href="https://docs.python.org/3/library/struct.html" target="_blank" rel="external">https://docs.python.org/3/library/struct.html</a><br><a href="http://blog.csdn.net/occupy8/article/details/11052103" target="_blank" rel="external">http://blog.csdn.net/occupy8/article/details/11052103</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/struct.html#module-struct&quot;&gt;struct&lt;/a&gt; — Interpret bytes as packed binary data，将字节与二进制文件相互转化的工具&lt;strong&gt;Python struct 模块&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04+CPU+Python的Caffe安装教程</title>
    <link href="http://feiyang.li/2017/03/16/Ubuntu-caffe/index.html"/>
    <id>http://feiyang.li/2017/03/16/Ubuntu-caffe/index.html</id>
    <published>2017-03-16T02:52:28.000Z</published>
    <updated>2017-03-25T10:51:10.817Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>背景：手头只有一个win主机，虚拟机版本：Ubuntu14.04，目标是安装后CAFFE能作为PYTHON MODULE来使用，只使用CPU模式</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="安装开发所依赖的安装包"><a href="#安装开发所依赖的安装包" class="headerlink" title="安装开发所依赖的安装包"></a>安装开发所依赖的安装包</h1><p> 打开Ubuntu的终端，输入命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</div><div class="line">sudo apt-get install --no-install-recommends libboost-all-dev</div><div class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</div><div class="line">sudo apt-get install libatlas-base-dev</div></pre></td></tr></table></figure></p>
<h2 id="升级g"><a href="#升级g" class="headerlink" title="升级g++"></a>升级g++</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ --version&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>查看g++版本，由于编译需要至少4.8版本的g++，一般来说，自带版本应该时4.8。如果想要升级g++，这里也提供以下下载方式，并且设置默认编译的g++为最新版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/test #用来添加库信息的帮助脚本。  </div><div class="line">sudo apt-get update                                 #更新  </div><div class="line">sudo apt-get install gcc-4.9                        </div><div class="line">sudo apt-get install g++-4.9                        #更新g++，gcc  </div><div class="line">sudo ln -sf /usr/bin/gcc-4.9 /usr/bin/gcc           #在调用的gcc库上做一个与最新版本的软连接，更改g++的默认版本。  </div><div class="line">sudo ln -sf /usr/bin/gcc-ar-4.9 /usr/bin/gcc-ar  </div><div class="line">sudo ln -sf /usr/bin/gcc-ranlib-4.9 /usr/bin/gcc-ranlib</div></pre></td></tr></table></figure></p>
<h2 id="安装anaconda，建议安装。"><a href="#安装anaconda，建议安装。" class="headerlink" title="安装anaconda，建议安装。"></a>安装anaconda，建议安装。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.3.1-Linux-x86_64.sh</div><div class="line">bash Anaconda3-4.3.1-Linux-x86_64.sh</div></pre></td></tr></table></figure>
<p>安装过程中记得一直选择默认的就行，傻瓜式安装。是否在bashrc中添加路径，这里选择“yes”就可以。忘了的话，解决方法很麻烦，自己查查吧。</p>
<h2 id="安装OpenCV2-4-这个经常失败，建议跳过，不影响使用"><a href="#安装OpenCV2-4-这个经常失败，建议跳过，不影响使用" class="headerlink" title="安装OpenCV2.4(这个经常失败，建议跳过，不影响使用)"></a>安装OpenCV2.4(这个经常失败，建议跳过，不影响使用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/bearpaw/Install-OpenCV</div><div class="line">cd Install-OpenCV/Ubuntu/2.4</div><div class="line">sh ./opencv2_4_10.sh</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170315/155549210.png" alt="jayrambhia/Install-OpenCV.git" title="">
                </div>
                <div class="image-caption">jayrambhia/Install-OpenCV.git</div>
            </figure>
<p>编译过程很慢，中间我还报过一次错，不得不重新来了一次。如果觉得难度不够的话，可以选择官网的安装包：<a href="http://opencv.org/" target="_blank" rel="external">http://opencv.org/</a>，我这里是根据大神编译过的版本进行安装的。</p>
<h2 id="安装atlas"><a href="#安装atlas" class="headerlink" title="安装atlas"></a>安装atlas</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libatlas-base-dev                #安装atlas简单易行。</div></pre></td></tr></table></figure>
<h1 id="编译Caffe"><a href="#编译Caffe" class="headerlink" title="编译Caffe"></a>编译Caffe</h1><h2 id="下载caffe"><a href="#下载caffe" class="headerlink" title="下载caffe"></a>下载caffe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~  </div><div class="line">git clone https://github.com/BVLC/caffe.git</div></pre></td></tr></table></figure>
<h2 id="修改Makefile配置"><a href="#修改Makefile配置" class="headerlink" title="修改Makefile配置"></a>修改Makefile配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd caffe  </div><div class="line">cp Makefile.config.example Makefile.config </div><div class="line">gedit Makefile.config         #我个人比较喜欢gedit ，用起来方便。</div></pre></td></tr></table></figure>
<ul>
<li>CPU_ONLY := 1</li>
<li>配置一些引用文件（增加部分主要是解决新版本下，HDF5的路径问题）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE)  /usr/local/include  /usr/include/hdf5/serial</div><div class="line">LIBRARY_DIRS := $(PYTHON_LIB)  /usr/local/lib   /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial</div><div class="line">BLAS := atlas</div></pre></td></tr></table></figure>
<h2 id="编译caffe"><a href="#编译caffe" class="headerlink" title="编译caffe"></a>编译caffe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make all -j8</div><div class="line">make test -j8</div><div class="line">make runtest -j8</div></pre></td></tr></table></figure>
<p>另外, 这个make默认是用CPU单核运算,如果想要快一点, 比如我想使用四核, 在make后面加上-j4标签。<br>如果上面4行某一行报错之后想要重试,建议先make clean再重新开始。</p>
<h2 id="更新安装依赖。"><a href="#更新安装依赖。" class="headerlink" title="更新安装依赖。"></a>更新安装依赖。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd caffe  </div><div class="line">cat python/requirements.txt | xargs -L 1 sudo pip install</div></pre></td></tr></table></figure>
<h1 id="编译Python接口"><a href="#编译Python接口" class="headerlink" title="编译Python接口"></a>编译Python接口</h1><p>打开新的终端, 用which Python和which pip<br>确定使用的是anaconda提供的python环境，然后进入<code>caffe/python,</code> 执行下列命令，</p>
<h2 id="确保pip已经安装"><a href="#确保pip已经安装" class="headerlink" title="确保pip已经安装"></a>确保pip已经安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip</div><div class="line">for req in $(cat requirements.txt); do pip install $req; done  #python运行需要的库。</div></pre></td></tr></table></figure>
<h2 id="再次回到caffe根目录我们可以执行："><a href="#再次回到caffe根目录我们可以执行：" class="headerlink" title="再次回到caffe根目录我们可以执行："></a>再次回到caffe根目录我们可以执行：</h2><p>在caffe根目录的python文件夹下，有一个requirements.txt的清单文件，上面列出了需要的依赖库，按照这个清单安装就可以了。<br>在安装scipy库的时候，需要fortran编译器（gfortran)，如果没有这个编译器就会报错，因此，我们可以先安装一下。</p>
<p>回到caffe的根目录，然后执行安装代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/caffe</div><div class="line">sudo apt-get install gfortran</div><div class="line">cd ./python</div><div class="line">for req in $(cat requirements.txt); do pip install $req; done</div></pre></td></tr></table></figure>
<p>安装完成以后，再次回到caffe根目录我们可以执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install -r python/requirements.txt</div></pre></td></tr></table></figure></p>
<p>就会看到，安装成功的，都会显示Requirement already satisfied, 没有安装成功的，会继续安装。</p>
<h2 id="编译python接口"><a href="#编译python接口" class="headerlink" title="编译python接口"></a>编译python接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make pycaffe -j8</div></pre></td></tr></table></figure>
<h2 id="运行python"><a href="#运行python" class="headerlink" title="运行python"></a>运行python</h2><p>进入<code>caffe/python</code> ，运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python2<span class="number">.7</span></div><div class="line">Python <span class="number">2.7</span><span class="number">.12</span> (default, Jul  <span class="number">1</span> <span class="number">2016</span>, <span class="number">15</span>:<span class="number">12</span>:<span class="number">24</span>) </div><div class="line">[GCC <span class="number">5.4</span><span class="number">.0</span> <span class="number">20160609</span>] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> caffe</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h2 id="加入PythonPath"><a href="#加入PythonPath" class="headerlink" title="加入PythonPath"></a>加入PythonPath</h2><p><code>gedit ~/.bashrc</code><br>将<code>export PYTHONPATH=/home/wing/caffe/python:$PYTHONPATH</code>添加到文件最后。<br><code>source ~/.bashrc</code> 使更改生效。<br>这样，在其他地方打开python，也可以import caffe了。</p>
<hr>
<p>出现过一个问题：<br><strong>error ：No module named google.protobuf.internal</strong><br>解决方法是：<br><code>sudo chmod 777 -R  anaconda</code>（文件夹） 改变权限 然后<br><code>conda install protobuf</code><br>可以很方便的解决的问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;背景：手头只有一个win主机，虚拟机版本：Ubuntu14.04，目标是安装后CAFFE能作为PYTHON MODULE来使用，只使用CPU模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Win10 Anaconda中安装Tensorflow并配置到jupter kernel</title>
    <link href="http://feiyang.li/2017/03/15/win10-conda-tensorflow/index.html"/>
    <id>http://feiyang.li/2017/03/15/win10-conda-tensorflow/index.html</id>
    <published>2017-03-15T05:22:44.000Z</published>
    <updated>2017-03-16T02:57:34.710Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>Windows环境下 Anaconda中安装Tensorflow，并且将Tensorflow配置到jupyter notebook中去。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h1><p>下载：<a href="https://www.continuum.io/downloads" target="_blank" rel="external">https://www.continuum.io/downloads</a>   ，我用的是Python 3.5<br>下载完以后，安装。</p>
<h2 id="输入清华的仓库镜像，更新包更快："><a href="#输入清华的仓库镜像，更新包更快：" class="headerlink" title="输入清华的仓库镜像，更新包更快："></a>输入清华的仓库镜像，更新包更快：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line">conda config --set show_channel_urls yes</div></pre></td></tr></table></figure>
<p>推荐第一行命令输入两次，以便把这个镜像地址放在首位。</p>
<h2 id="安装TensorFlow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow"></a>安装TensorFlow</h2><p>一般来说，我们推荐新建一个新的virtualenv，这样可以预防同一个环境中的包太多，相互发生冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n tensorflow python=3.5</div></pre></td></tr></table></figure></p>
<p>既然是建议，那么<strong>忽视上边这一句话，也是可以的。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">activate tensorflow</div></pre></td></tr></table></figure>
<p>激活后，我选择安装的是CPU版本，输入：</p>
<p><code>pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-0.12.0-cp35-cp35m-win_amd64.whl</code></p>
<p>安装失败的话多试几次</p>
<h2 id="加入jupyter-notebook的ipykernel内核"><a href="#加入jupyter-notebook的ipykernel内核" class="headerlink" title="加入jupyter notebook的ipykernel内核"></a>加入jupyter notebook的ipykernel内核</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source activate tensorflow# On Windows, remove the word &apos;source&apos;</div><div class="line">install ipykernel</div><div class="line">python -m ipykernel install --user --name tensorflow--display-name &quot;Python (myenv)&quot;</div></pre></td></tr></table></figure>
<p>在激活状态下，安装<code>ipykernel</code>，后边那个展示名称，自己可以随便填。进入jupyter notebook ，运行一下测试文件，看是否可以使用。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170315/130833100.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果不行，输入<code>jupyter --paths</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170315/130930707.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>检查一下kernal是不是设置的有问题，比如我的就是<code>C:\Users\wing\AppData\Roaming\jupyter\kernels\tensorflow</code><br>一般来说是环境所在的地址有问题，修改一下就可以啦。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170315/131024268.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通过这个方法，可以把自己手贱多加上去的kernel删掉。<strong>jupyter kernal 删除</strong><br>更多建议阅读<a href="http://ipython.readthedocs.io/en/stable/install/kernel_install.html" target="_blank" rel="external">官方文档</a></p>
<p>我记得这个地方蛮复杂的，我当时往kernel里边加入R内核，费了大力气。当时还没写博客的习惯，现在又忘记怎么加的，真是日了狗。</p>
<p><img src="http://cdn.mmmxcc.cn/blog/20170315/131835074.png" alt=""></p>
<h1 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line">tf.__version__</div><div class="line">&gt;&gt;&gt;:<span class="string">'1.0.1'</span></div><div class="line">sess = tf.InteractiveSession()</div><div class="line">x = tf.Variable([<span class="number">1.0</span>, <span class="number">2.0</span>])</div><div class="line">a = tf.constant([<span class="number">3.0</span>, <span class="number">3.0</span>])</div><div class="line">x.initializer.run()<span class="comment"># 使用初始化器 initializer op 的 run() 方法初始化 ‘x‘ </span></div><div class="line">sub = tf.sub(x, a)<span class="comment"># 增加一个减法 sub op, 从 ‘x‘ 减去 ‘a‘. 运行减法 op, 输出结果 </span></div><div class="line">sub.eval()</div><div class="line">&gt;&gt;&gt;:array([<span class="number">-2.</span>, <span class="number">-1.</span>], dtype=float32)</div></pre></td></tr></table></figure>
<p>我碰到了一个<code>module &#39;tensorflow&#39; has no attribute &#39;sub&#39;</code>，原因是tensorflow升级了之后，这个<code>sub</code>函数被改成了<code>subtract</code>，代码改成<code>sub = tf.subtract(x, a)</code>即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Windows环境下 Anaconda中安装Tensorflow，并且将Tensorflow配置到jupyter notebook中去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://feiyang.li/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Jupyter" scheme="http://feiyang.li/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>《小萝莉的猴神大叔》</title>
    <link href="http://feiyang.li/2017/03/11/indian-movie/index.html"/>
    <id>http://feiyang.li/2017/03/11/indian-movie/index.html</id>
    <published>2017-03-11T07:06:14.000Z</published>
    <updated>2017-03-13T10:45:25.356Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>但行好事，莫问前程。真正能做到的能有几个呢？</p>
</blockquote>
<hr>
<a id="more"></a>
<div align="center"><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/145041434.png" alt="你是我心脏跳动的力量" title="">
                </div>
                <div class="image-caption">你是我心脏跳动的力量</div>
            </figure><br></div>



<p>没看过几部印度电影，算上三傻，这也仅仅是第二部而已。什么小萝莉的猴神大叔，印度电影命名水平还是一如既往的差。</p>
<div align="center"><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/145415244.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br></div>

<p>刚开始看的时候呀，我一边哈哈哈一边和室友猜下边将发生啥，猜了好几次，竟然都猜对了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/145514334.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>后来不知道怎么了，就不想说话了，戴着耳机投入到猴神大叔的世界了。就算猜到了结尾，也丝毫不影响我看的时候哭的稀里哗啦的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/145548062.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我其实不太懂印度巴基斯坦那边的渊源，也不太懂宗教信仰之类的，所以我觉得我应该错过了好多值得玩味的小细节。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/151454612.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>印度电影中的人物好像总是一言不合就唱歌跳舞，开心也跳，难过也跳，想跳就跳，一跳还跳很长时间，但我还挺喜欢看的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/145814885.png" alt="童话里的巴士" title="">
                </div>
                <div class="image-caption">童话里的巴士</div>
            </figure>
<p>国家和国家之间，宗教和宗教之间也许有很多矛盾，但是爱和信仰是相通的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/150129990.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>善良朴实虔诚的猴神大叔因为对小女孩的一个承诺，毅然决然的走上了送小女孩回家的路。这一路，太凶险，却也不乏各种各样善良的人的帮助。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/150007185.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>小女孩从小无法说话，后来又和家人走丢，这本是一件不幸的事，却因为遇到了猴神大叔，遇到正义的摄影师，遇到善良的伊斯兰教父，还有很多很多充满善意的人，才如此幸运的回到妈妈身边。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/150040056.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>感觉这个世界上，像猴神大叔这样的好人还是太少了。</p>
<p>因为爱，扛起对一个陌生小姑娘的全部责任，从一个平庸的别人眼中的失败者，到无所不能面对重重困难都充满力量的人。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170311/151638605.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>但行好事，莫问前程。真正能做到的能有几个呢？</strong></p>
<hr>
<p>主题歌是这样唱的：</p>
<ul>
<li>你是我的道路，你与我为伴</li>
<li>我找寻着你，也找到了自己</li>
<li>我是你的声音，而你是我的语言</li>
<li>我们相遇之后，我感觉充满了力量</li>
<li>我们相遇之后，我变得无所不能</li>
<li>尽管终点困难重重，但前方的路不再迷茫</li>
<li>我是你的小路，你是我的小棉袄</li>
<li>找到你的足迹，我也找到了自己</li>
<li>因为你是我心脏跳动的力量。</li>
</ul>
<hr>
<p>最后一幕永远定格在我的内心深处，人至善、水至柔、景至美、情至真！再铁骨铮铮的汉子也会为之动容。</p>
<p>记得有人说过，<strong>好人会受伤，会流泪，会不知所措，但好人永远是这个世界的魂</strong>，向好人致敬！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=35778201&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;但行好事，莫问前程。真正能做到的能有几个呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="臭臭" scheme="http://feiyang.li/tags/%E8%87%AD%E8%87%AD/"/>
    
      <category term="Movie" scheme="http://feiyang.li/tags/Movie/"/>
    
  </entry>
  
  <entry>
    <title>细究Python键盘输入</title>
    <link href="http://feiyang.li/2017/03/10/python-input/index.html"/>
    <id>http://feiyang.li/2017/03/10/python-input/index.html</id>
    <published>2017-03-10T05:52:53.000Z</published>
    <updated>2017-03-27T11:44:05.567Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>本文介绍了<code>raw_input</code> 和 <code>input</code>在<code>python2</code>和<code>python3</code>上的区别，以及如何利用正则表达式和<code>input</code>键盘输入一维数组和二维数组。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="raw-input-和-input"><a href="#raw-input-和-input" class="headerlink" title="raw_input 和 input"></a>raw_input 和 input</h1><h2 id="python2中"><a href="#python2中" class="headerlink" title="python2中"></a>python2中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">raw_input_A = raw_input(<span class="string">"raw_input: "</span>)</div><div class="line">type(raw_input_A)</div></pre></td></tr></table></figure>
<p>可以看到输出的是 <code>str</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">input_A = input(<span class="string">"Input: "</span>) <span class="comment">#不能输入字母</span></div><div class="line">type(raw_input_A)</div></pre></td></tr></table></figure>
<p>可以看到输出的是 <code>int</code>，并且我们发现，input根本不能输入字母，会直接报<code>NameError: name &#39;abc&#39; is not defined</code>，提示没有定义。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170310/125930252.png" alt="Python2报错" title="">
                </div>
                <div class="image-caption">Python2报错</div>
            </figure></p>
<p>查看 <a href="http://docs.python.org/library/functions.html?highlight=input#built-in-functions" target="_blank" rel="external">Built-in Functions</a> ，得知：<br><code>input([prompt])
    Equivalent to eval(raw_input(prompt))</code></p>
<p>input() 本质上还是使用 raw_input() 来实现的，只是调用完 raw_input() 之后再调用 eval() 函数，所以，你甚至可以将表达式作为 input() 的参数，并且它会计算表达式的值并返回它。<br>不过在 Built-in Functions 里有一句话是这样写的：Consider using the raw_input() function for general input from users.<br>除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。</p>
<h2 id="python3中"><a href="#python3中" class="headerlink" title="python3中"></a>python3中</h2><p>因为刚才说的那个原因，input其实没有什么必要，所以就被改进了。</p>
<p>简单来说，<code>raw_input</code>没有了，只剩下<code>input</code>。现在这个input就是之前那个<code>raw_input</code>。</p>
<p>查看 <a href="https://docs.python.org/3/library/functions.html#input" target="_blank" rel="external">Python官方文档input([prompt])</a> ，得知：</p>
<p><code>If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError is raised.</code></p>
<p>简单说，返回的内容都是str，括号里边的<code>prompt</code>写什么，就会当做提示内容输出。比如底下的那个 <code>--&gt;</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = input('--&gt; ')  </div><div class="line">--&gt; Monty Python's Flying Circus</div><div class="line">&gt;&gt;&gt; s  </div><div class="line">"Monty Python's Flying Circus"</div></pre></td></tr></table></figure></p>
<p>因为我一般都是用python3，接下来的内容都是以3为准。</p>
<hr>
<h1 id="Python输入数组"><a href="#Python输入数组" class="headerlink" title="Python输入数组"></a>Python输入数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ul>
<li>使用<code>int()</code>进行强制类型转型</li>
<li>当输入内容不为数字时，不能转型，发生<code>except</code>跳出循环。</li>
<li>先声明<code>data</code>是一个list，将<code>input_A</code>一个个<code>+</code>进去。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data = []</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        input_A = int(input(<span class="string">"Input: "</span>))</div><div class="line">        data +=[input_A]</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">data</div><div class="line">type(data)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170310/132018132.png" alt="输入数组" title="">
                </div>
                <div class="image-caption">输入数组</div>
            </figure>
<p>在以上的基础上，我们可以用python输入二维数组</p>
<h2 id="python输入二维数组"><a href="#python输入二维数组" class="headerlink" title="python输入二维数组"></a>python输入二维数组</h2><p>正则表达式会利用非数字的字符，进行切割，因此数字之间插入什么都无所谓。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">data2D = []</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    userInput = input(<span class="string">'Input:'</span>) <span class="comment"># 输入数组，用空格隔开即可</span></div><div class="line">    info = re.split(<span class="string">r'[\D]'</span>,userInput)<span class="comment">#正则表达式分割</span></div><div class="line">    data = []<span class="comment"># 定义一维数组</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> info:</div><div class="line">            data+=[int(number)] <span class="comment"># 一维数组加入数字</span></div><div class="line">        data2D+=[data] <span class="comment">#一维数组加入到二维中去</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">data2D</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170310/135120083.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文介绍了&lt;code&gt;raw_input&lt;/code&gt; 和 &lt;code&gt;input&lt;/code&gt;在&lt;code&gt;python2&lt;/code&gt;和&lt;code&gt;python3&lt;/code&gt;上的区别，以及如何利用正则表达式和&lt;code&gt;input&lt;/code&gt;键盘输入一维数组和二维数组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python_camp" scheme="http://feiyang.li/categories/Python-camp/"/>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Python_camp" scheme="http://feiyang.li/tags/Python-camp/"/>
    
  </entry>
  
  <entry>
    <title>算法导论 第7章 快速排序</title>
    <link href="http://feiyang.li/2017/03/09/Python-quick-order/index.html"/>
    <id>http://feiyang.li/2017/03/09/Python-quick-order/index.html</id>
    <published>2017-03-09T14:22:16.000Z</published>
    <updated>2017-03-25T05:10:12.327Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>快速排序是一种非常优秀的排序方法 </p>
</blockquote>
<a id="more"></a>
<p>对于包含n个数的输入数组来说，快速排序是一种最坏情况是<br>$$\theta(n^{2})$$ 的算法，虽然表现出的状态和堆排序是相似的。但实际上，快速排序的复杂度绝大部分情况的都可以做到<br>$$\theta(nlgn)$$)</p>
<hr>
<h1 id="快排算法的描述"><a href="#快排算法的描述" class="headerlink" title="快排算法的描述"></a>快排算法的描述</h1><h2 id="快排算法分为两部分："><a href="#快排算法分为两部分：" class="headerlink" title="快排算法分为两部分："></a>快排算法分为两部分：</h2><ul>
<li>分解：数组<code>A[p..r]</code>被分解为<code>A[p...q-1]</code>和<code>A[q+1...r]</code>，其中<code>A[p...q-1]</code>内的元素都比<code>A[q]</code>小，<code>A[q+1...r]</code>中的元素都比<code>A[q]</code>大。</li>
<li>解决：通过调用快速排序，解决<code>A[p...q-1]</code>和<code>A[q+1...r]</code>。</li>
<li>合并：因为元素都是原址排序，因此不需要合并操作。</li>
</ul>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>对整个数组进行递归排序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">QUICKSORT(A,p,r)</div><div class="line"><span class="keyword">if</span> p &lt; r:</div><div class="line">    q = PARTITION(A,p,r);</div><div class="line">    QUICKSORT(A,p,q<span class="number">-1</span>);</div><div class="line">    QUICKSORT(A,q+<span class="number">1</span>,r);</div></pre></td></tr></table></figure></p>
<p>快速排序算法的关键是PARTITION过程，它对A[p..r]进行就地重排：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PARTITION(A,p,r)</div><div class="line">x = A[r]</div><div class="line">i = p<span class="number">-1</span></div><div class="line"><span class="keyword">for</span> j = p to r<span class="number">-1</span><span class="comment">// A[j]是待比较的元素</span></div><div class="line">  <span class="keyword">if</span> A[j] ≤ r<span class="comment">// 若A[j]比主元小</span></div><div class="line">    i = i + <span class="number">1</span> <span class="comment">// i往后一位（符合，不用替换；不符合i就停在这个地方，等着j过来叫唤）</span></div><div class="line">    exchange A[i] with A[j]<span class="comment">//倘若A[j]比主元小，其实是不发生交换的。</span></div><div class="line">exchange A[i+<span class="number">1</span>] with A[r]</div><div class="line"><span class="keyword">return</span> i + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>借用一张《算法导论》的图<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170309/191837286.png" alt="Introduction to Algorithms" title="">
                </div>
                <div class="image-caption">Introduction to Algorithms</div>
            </figure></p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><p>基本和伪代码是一样的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = *b;</div><div class="line">    *b = *a;</div><div class="line">    *a = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%4d"</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">PARTITION</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = p - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> x = A[r];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = p; j &lt; r; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (A[j] &lt;= x) &#123;</div><div class="line">            i++;</div><div class="line">            swap(&amp;A[i], &amp;A[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    swap(&amp;A[i + <span class="number">1</span>], &amp;A[r]);</div><div class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">QUICKSORT</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> q = PARTITION(A, p, r);</div><div class="line">        QUICKSORT(A, p, q - <span class="number">1</span>);</div><div class="line">        QUICKSORT(A, q + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span> &#125;;</div><div class="line">    print(A, <span class="number">11</span>);</div><div class="line">    QUICKSORT(A, <span class="number">0</span>, <span class="number">10</span>);</div><div class="line">    print(A,<span class="number">11</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>期间出了一个错误，error C3861: 找不到标识符。后发现是因为把PARTITION放在了QUICKSORT后边，导致QUICKSORT找不到PARTITION。</p>
<h2 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PARTITION</span><span class="params">(A,p,r)</span>:</span></div><div class="line">    x = A[r]</div><div class="line">    i = p - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(p,r):</div><div class="line">        <span class="keyword">if</span> A[j]&lt;=x:</div><div class="line">            i = i + <span class="number">1</span></div><div class="line">            temp = A[i]</div><div class="line">            A[i] = A[j]</div><div class="line">            A[j] = temp <span class="comment">#python没有指针，这个地方稍微不一样</span></div><div class="line">    temp = A[i+<span class="number">1</span>]</div><div class="line">    A[i+<span class="number">1</span>] = A[r]</div><div class="line">    A[r] = temp</div><div class="line">    <span class="keyword">return</span> i+<span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">QUICKSORT</span><span class="params">(A,p,r)</span>:</span></div><div class="line">    <span class="keyword">if</span> p &gt;= r:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    q = PARTITION(A,p,r)</div><div class="line">    QUICKSORT(A,p,q<span class="number">-1</span>)</div><div class="line">    QUICKSORT(A,q+<span class="number">1</span>,r)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    l =  [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>] ;</div><div class="line">    QUICKSORT(l,<span class="number">0</span>,len(l)<span class="number">-1</span>)</div><div class="line">    print(l)</div></pre></td></tr></table></figure>
<p>这里使用的数组是list，声明方式是<code>l =  [9,10,11,7,1,2,3,6,5,8,4]</code>，注意那个[]。如果使用元组tuple，会导致元素不能修改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;快速排序是一种非常优秀的排序方法 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Algorithms" scheme="http://feiyang.li/tags/Algorithms/"/>
    
      <category term="sort" scheme="http://feiyang.li/tags/sort/"/>
    
      <category term="cpp" scheme="http://feiyang.li/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Digitalocean一键搭建vpn</title>
    <link href="http://feiyang.li/2017/03/03/do-vpn/index.html"/>
    <id>http://feiyang.li/2017/03/03/do-vpn/index.html</id>
    <published>2017-03-03T06:17:00.000Z</published>
    <updated>2017-03-06T14:07:04.569Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>使用github学生优惠内的digitalocean，一键搭建vpn。获得60刀，免费用一年~</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="为什么选择DigitalOcean"><a href="#为什么选择DigitalOcean" class="headerlink" title="为什么选择DigitalOcean"></a>为什么选择DigitalOcean</h2><ul>
<li>可以不用信用卡，通过Paypal即可绑定。</li>
<li>有512MB内存、单核处理器可选，每月5美元。</li>
<li>每月1000GB的流量</li>
</ul>
<h2 id="申请github学生优惠包"><a href="#申请github学生优惠包" class="headerlink" title="申请github学生优惠包"></a>申请github学生优惠包</h2><ul>
<li>前往 <a href="https://education.github.com/pack/" target="_blank" rel="external">https://education.github.com/pack/</a> 申请学生优惠包<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/130655469.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>有账号就直接登录，没有账号选择注册账号：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/133824667.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>申请的时候，会问你是不是学生，那我肯定说是学生啦，我又不是撒<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/133923463.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>然后会要求提供学校名称，所以那么骗人的edu邮箱基本是没有办法使用的。最后那句<code>How do you plan to use GitHub?</code> 你就说<code>I&#39;ll public my program at github.</code>或者什么<code>I love github</code>，开心就好，说什么无所谓。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/134154441.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>很快就会审核通过，会邮件通知。</li>
</ul>
<h2 id="领取-DigitalOcean-优惠包"><a href="#领取-DigitalOcean-优惠包" class="headerlink" title="领取 DigitalOcean 优惠包"></a>领取 <a href="https://www.digitalocean.com/company/contact/" target="_blank" rel="external">DigitalOcean</a> 优惠包</h2><ul>
<li>看到这个码，50刀就到你手了。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/134605243.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>注册DO账号，用我的邀请链接注册，多送10刀。<a href="https://m.do.co/c/990a117f5061" target="_blank" rel="external">https://m.do.co/c/990a117f5061</a> ，注册之后需要付款5刀，这个时候不要用paypel的汇率，用本地的汇率。</li>
</ul>
<h2 id="使用DigitalOcean邀请注册之后就不能使用github学生包50刀的处理方法"><a href="#使用DigitalOcean邀请注册之后就不能使用github学生包50刀的处理方法" class="headerlink" title="使用DigitalOcean邀请注册之后就不能使用github学生包50刀的处理方法"></a>使用DigitalOcean邀请注册之后就不能使用github学生包50刀的处理方法</h2><p>我看到很多人提到领取了这个10刀之后，那个50刀的github优惠包里边的码就不能用了。简直<strong>一派胡言，I’m angry</strong>。<br>可以通过<a href="https://cloud.digitalocean.com/support/tickets/new?i=f00e90" target="_blank" rel="external">提交ticket</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/135235188.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure><br>然后告诉他，我不知道github学生优惠包里边的码怎么用，让他给你处理。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/135344548.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure><br>一般来说分分钟就会回复邮件，帮你加上50刀。<strong>如果使用我的推荐链接的话，我可以把我的回复内容复制给你。</strong></p>
<h1 id="安装vpn"><a href="#安装vpn" class="headerlink" title="安装vpn"></a>安装vpn</h1><p>这里使用一键安装脚本，基于centos。</p>
<h2 id="新建vps"><a href="#新建vps" class="headerlink" title="新建vps"></a>新建vps</h2><p>选择顶栏第一个 <a href="https://cloud.digitalocean.com/droplets?i=f00e90" target="_blank" rel="external">Droplets</a>，点击<code>create droplet</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/135808655.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure><br>选择5刀，centos的这一款，地点选择<code>San Francisco</code>，这个新加坡，虽然离中国近，但是速度慢，旧金山还是比较合适的。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/135912016.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure><br>选择确定之后，会发邮件告诉你IP地址以及账号密码。</p>
<h2 id="一键安装vpn"><a href="#一键安装vpn" class="headerlink" title="一键安装vpn"></a>一键安装vpn</h2><ul>
<li>使用<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="external">putty</a> 连接vps，我在打马赛克那个地方输入ip地址。然后点open<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/140209424.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>第一次进行会有个提示，点击确定就好。之后会要求输入当前密码账号，按照邮箱里边给的密码写就可以了。</li>
<li>成功登陆后，还会要求输入当前密码，然后自己设置<strong>新密码</strong></li>
<li>一键安装vpn代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://raw.githubusercontent.com/mmmwhy/centos-setup-simple-pptp-vpn/master/setup.sh</div><div class="line"></div><div class="line">chmod +x ./setup.sh</div><div class="line"></div><div class="line">./setup.sh</div></pre></td></tr></table></figure>
<p>全部复制，点两下确定，然后坐等片刻，vpn就搭好了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/140730763.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></p>
<p>搭建的是最常见的pptp协议类型的vpn，使用win自带拨号程序即可连接。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170303/140844414.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></p>
<h2 id="修改账户密码"><a href="#修改账户密码" class="headerlink" title="修改账户密码"></a>修改账户密码</h2><p><code>sudo vi /etc/ppp/chap-secrets</code><br>都有提示，按<code>i</code>之后修改就可以了。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>之前一直懒得写这样一篇教程，但是发现好多人对这方面都不了解，我稍微解释了一下。</p>
<ul>
<li>邀请得到的10刀和github50刀可以共存的问题</li>
<li>申请github学生优惠包的时候怎样描述自己的plan</li>
<li>paypel付款时，不要用paypel的汇率，用本地的汇率</li>
<li>一键安装包用的是linuxeye的脚本，我略微修改，还请多多指教。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用github学生优惠内的digitalocean，一键搭建vpn。获得60刀，免费用一年~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="GFW" scheme="http://feiyang.li/tags/GFW/"/>
    
      <category term="Linux" scheme="http://feiyang.li/tags/Linux/"/>
    
      <category term="github" scheme="http://feiyang.li/tags/github/"/>
    
      <category term="vpn" scheme="http://feiyang.li/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ 、Pycharm激活码及激活服务器</title>
    <link href="http://feiyang.li/2017/02/26/jetbrains/index.html"/>
    <id>http://feiyang.li/2017/02/26/jetbrains/index.html</id>
    <published>2017-02-26T13:28:39.000Z</published>
    <updated>2017-02-28T03:22:11.178Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>jetbrains 家的东西都非常好看，但是价格贵的令人发指，所以我搭建了一个 Pycharm激活服务器，可以用来激活 Pycharm，IntelliJ IDEA，WebStorm。避免频繁更换激活码的问题。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="jetbrains-激活服务器搭建"><a href="#jetbrains-激活服务器搭建" class="headerlink" title="jetbrains 激活服务器搭建"></a>jetbrains 激活服务器搭建</h1><h2 id="一台VPS"><a href="#一台VPS" class="headerlink" title="一台VPS"></a>一台VPS</h2><p>连vps都没有，小拳头你怕不怕(ง •̀_•́)ง 。 那你用我的吧，╮(╯▽╰)╭  。</p>
<h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><p>建议在特权模式下运行，即<code>sudo -s</code>一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://home.ustc.edu.cn/~mmmwhy/jetbrain.sh &amp;&amp; sh ./jetbrain.sh</div></pre></td></tr></table></figure></p>
<p>会出现两个空，用于输入端口号和默认用户名，建议直接回车，否则可能会出现莫名其妙的错误。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170227/131856881.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>将最后那个<strong>License sever地址</strong>记下，之后激活用。</p>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>选择<strong>License sever</strong>激活方式，输入激活地址<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170226/211949408.png" alt="License sever激活" title="">
                </div>
                <div class="image-caption">License sever激活</div>
            </figure></p>
<p>分分钟应该就会弹出提示，一劳永逸解决激活问题。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170226/212224250.png" alt="激活成功提示" title="">
                </div>
                <div class="image-caption">激活成功提示</div>
            </figure></p>
<h2 id="激活服务器分享"><a href="#激活服务器分享" class="headerlink" title="激活服务器分享"></a>激活服务器分享</h2><p>我搭建了一个激活服务器，直接公布会很容易被封，需要的请关注：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170226/214429172.jpg" alt="小小臭臭" title="">
                </div>
                <div class="image-caption">小小臭臭</div>
            </figure><br>回复“激活”即可获得地址。</p>
<h1 id="Pycharm激活码-IntelliJ-IDEA激活码"><a href="#Pycharm激活码-IntelliJ-IDEA激活码" class="headerlink" title="Pycharm激活码 / IntelliJ IDEA激活码"></a>Pycharm激活码 / IntelliJ IDEA激活码</h1><p>双击复制全部<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CNEKJPQZEX-eyJsaWNlbnNlSWQiOiJDTkVLSlBRWkVYIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9XSwiaGFzaCI6IjUxOTU1OTMvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-QOxwjWvRwJz6vo6J6adC3CJ4ukQHosbPYZ94URUVFna/Rbew8xK/M5gP3kAaPh6ZDveFdtMR1UBoumq3eCwXtXM3U3ls5noB4LIr+QplVlCj2pK5uNq7g/feyNyQcHpSXtvhIOnXDBLOecB05DOsxzm0p7ulGGJoAInmHeb9mc0eYjqc4RPpUQfh6HSYBnvEnKMlLF5bz4KEtzmsvvgA55CwzwQ3gRitm5Q/wUT7AQCBdjmBfNUjKVQL6TSjSDPp56FUdEs4Aab8LqstA2DIMbxocO64rvytmcUeIwu8Mi5uq87KQP5AQMSMYb59Inbd+dmVfx5cJo3fRS4/5s3/Hg==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</div></pre></td></tr></table></figure></p>
<p>在Activate code处粘贴进去即可<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170226/213942164.png" alt="Activate code" title="">
                </div>
                <div class="image-caption">Activate code</div>
            </figure></p>
<hr>
<p>衷心感谢博主：ilanyu， <a href="http://blog.lanyus.com/" target="_blank" rel="external">http://blog.lanyus.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;jetbrains 家的东西都非常好看，但是价格贵的令人发指，所以我搭建了一个 Pycharm激活服务器，可以用来激活 Pycharm，IntelliJ IDEA，WebStorm。避免频繁更换激活码的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Pycharm激活" scheme="http://feiyang.li/tags/Pycharm%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客中插入音乐/视频</title>
    <link href="http://feiyang.li/2017/02/24/Hexo-music-video/index.html"/>
    <id>http://feiyang.li/2017/02/24/Hexo-music-video/index.html</id>
    <published>2017-02-24T12:57:01.000Z</published>
    <updated>2017-02-25T05:59:28.975Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>Hexo插入音乐/视频/网易云音乐/bilibili视频，会让博客看起来很洋气  (ง •̀_•́)ง </p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="Markdown-通用的音乐视频插入方法"><a href="#Markdown-通用的音乐视频插入方法" class="headerlink" title="Markdown 通用的音乐视频插入方法"></a>Markdown 通用的音乐视频插入方法</h1><h2 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h2><p>代码从网易云音乐获得<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170224/221537233.png" alt="网易云音乐" title="">
                </div>
                <div class="image-caption">网易云音乐</div>
            </figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=430 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=114389&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="430" height="86" src="//music.163.com/outchain/player?type=2&id=114389&auto=0&height=66"></iframe>



<h2 id="embed标签"><a href="#embed标签" class="headerlink" title="embed标签"></a>embed标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;embed height=&quot;415&quot; width=&quot;544&quot; quality=&quot;high&quot; allowfullscreen=&quot;true&quot; type=&quot;application/x-shockwave-flash&quot; src=&quot;//static.hdslb.com/miniloader.swf&quot; flashvars=&quot;aid=8506694&amp;page=1&quot; pluginspage=&quot;//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash&quot;&gt;&lt;/embed&gt;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=8506694&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">


<h2 id="javascript标签举例"><a href="#javascript标签举例" class="headerlink" title="javascript标签举例"></a>javascript标签举例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xiami.com/widget/player-single?uid=32329501&amp;sid=1776238762&amp;mode=js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<script type="text/javascript" src="http://www.xiami.com/widget/player-single?uid=32329501&sid=1776238762&mode=js"></script>

<h1 id="使用-Hexo-插件插入音乐-视频"><a href="#使用-Hexo-插件插入音乐-视频" class="headerlink" title="使用 Hexo 插件插入音乐/视频"></a>使用 Hexo 插件插入音乐/视频</h1><p>两个好用的hexo插件：</p>
<p><strong>hexo-tag-aplayer：<a href="https://github.com/grzhan/hexo-tag-aplayer" target="_blank" rel="external">https://github.com/grzhan/hexo-tag-aplayer</a></strong></p>
<p><strong>hexo-tag-dplayer： <a href="https://github.com/NextMoe/hexo-tag-dplayer" target="_blank" rel="external">https://github.com/NextMoe/hexo-tag-dplayer</a></strong></p>
<h2 id="播放音乐的aplayer"><a href="#播放音乐的aplayer" class="headerlink" title="播放音乐的aplayer"></a>播放音乐的aplayer</h2><p>在cmd页面内，使用npm安装：<br><code>npm install hexo-tag-aplayer</code></p>
<p>在markdown内添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% aplayer &quot;她的睫毛&quot; &quot;周杰伦&quot; &quot;http://home.ustc.edu.cn/~mmmwhy/%d6%dc%bd%dc%c2%d7%20-%20%cb%fd%b5%c4%bd%de%c3%ab.mp3&quot;  &quot;http://home.ustc.edu.cn/~mmmwhy/jay.jpg&quot; &quot;autoplay=false&quot; %&#125;</div></pre></td></tr></table></figure>
<p>效果如下所示：<br><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div>
		<script>
			new APlayer({
				element: document.getElementById("aplayer0"),
				narrow: false,
				autoplay: false,
				showlrc: 0,
				music: {
					title: "她的睫毛",
					author: "周杰伦",
					url: "http://home.ustc.edu.cn/~mmmwhy/%d6%dc%bd%dc%c2%d7%20-%20%cb%fd%b5%c4%bd%de%c3%ab.mp3",
					pic: "http://home.ustc.edu.cn/~mmmwhy/jay.jpg",
				}
			});
		</script></p>
<h2 id="播放视频的dplayer"><a href="#播放视频的dplayer" class="headerlink" title="播放视频的dplayer"></a>播放视频的dplayer</h2><p>在cmd页面内，使用npm安装：<br><code>npm install hexo-tag-dplayer</code></p>
<p>在markdown内添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% dplayer &quot;url=http://home.ustc.edu.cn/~mmmwhy/GEM.mp4&quot;  &quot;pic=http://home.ustc.edu.cn/~mmmwhy/GEM.jpg&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125;</div></pre></td></tr></table></figure>
<p>效果如下所示：</p>
<div id="dplayer0" class="dplayer" style="margin-bottom: 20px;"></div><script>var dplayer0 = new DPlayer({"element":document.getElementById("dplayer0"),"autoplay":false,"theme":"#FADFA3","loop":true,"video":{"url":"http://home.ustc.edu.cn/~mmmwhy/GEM.mp4","pic":"http://home.ustc.edu.cn/~mmmwhy/GEM.jpg"}});</script>
<hr>
<p>以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo插入音乐/视频/网易云音乐/bilibili视频，会让博客看起来很洋气  (ง •̀_•́)ง &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://feiyang.li/tags/hexo/"/>
    
      <category term="plugins" scheme="http://feiyang.li/tags/plugins/"/>
    
  </entry>
  
  <entry>
    <title>Django 创建第一个项目</title>
    <link href="http://feiyang.li/2017/02/18/django-hello-world/index.html"/>
    <id>http://feiyang.li/2017/02/18/django-hello-world/index.html</id>
    <published>2017-02-18T11:37:59.000Z</published>
    <updated>2017-02-18T12:41:10.174Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>上手使用Python的Web框架– Django</p>
</blockquote>
<hr>
<a id="more"></a>
<p>网上教程安装环境多是linux环境，所以我写一下windows系统下创建Django项目。基于Django 1.10 和Python3.5，作为学生狗的好处之一，就是有很多时间，慢慢琢磨新技术。</p>
<h1 id="windows上virtualenv-安装及使用"><a href="#windows上virtualenv-安装及使用" class="headerlink" title="windows上virtualenv 安装及使用"></a>windows上virtualenv 安装及使用</h1><p>一开始我不太懂virtualenv 到底有什么意思，后来慢慢各种package装的多了后，发现还是很有必要的。举个例子：如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？</p>
<p>这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>
<h2 id="正常安装过程"><a href="#正常安装过程" class="headerlink" title="正常安装过程"></a>正常安装过程</h2><ul>
<li><p>安装virtualenv</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
</li>
<li><p>为项目安装虚拟环境<br>为该<strong>虚拟环境</strong>起个名字，新建文件夹，<code>cd</code>进入。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv env</div></pre></td></tr></table></figure>
</li>
<li><p>激活环境</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">your_env_dir\Scripts\activate</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Pycharm使用虚拟环境"><a href="#Pycharm使用虚拟环境" class="headerlink" title="Pycharm使用虚拟环境"></a>Pycharm使用虚拟环境</h2><p>上边说的那种方法，完全没有实用性，太扯淡了。切换环境难于上青天，用Pycharm会简便很多。</p>
<ul>
<li>新建项目<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170218/191620497.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>用Pycharm建立虚拟环境<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170218/191841405.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure>
</li>
</ul>
<p>新建之后，在第一个图片那个地方进行选择就可以了，建议新建conda-env，自动新建在envs环境下，方便管理</p>
<p>至此，django环境搭建完毕，接下来学习django工程的创建，以及简单的在网页中显示出”Hello World”。</p>
<h1 id="初识Django工程"><a href="#初识Django工程" class="headerlink" title="初识Django工程"></a>初识Django工程</h1><h2 id="点击Create创建工程"><a href="#点击Create创建工程" class="headerlink" title="点击Create创建工程"></a>点击Create创建工程</h2><p>见创建后的工程截图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170218/192837742.png" alt="Django" title="">
                </div>
                <div class="image-caption">Django</div>
            </figure></p>
<p>文件如下:</p>
<ul>
<li>my_site: 项目的容器。</li>
<li>manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li>
<li>my_site/<strong>init</strong>.py: 一个空文件，告诉 Python 该目录是一个 Python 包。</li>
<li>my_site/settings.py: 该 Django 项目的设置/配置。</li>
<li>my_site/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”。</li>
<li>my_site/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
</ul>
<h2 id="直接启动Django项目"><a href="#直接启动Django项目" class="headerlink" title="直接启动Django项目"></a>直接启动Django项目</h2><p>来看执行的结果，启动的方式是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></div></pre></td></tr></table></figure></p>
<p>0.0.0.0让其它电脑可连接到开发服务器，8000为端口号。如果不说明，那么端口号默认为8000。</p>
<h2 id="Pycharm启动Django项目"><a href="#Pycharm启动Django项目" class="headerlink" title="Pycharm启动Django项目"></a>Pycharm启动Django项目</h2><ul>
<li>打开manage.py文件</li>
<li>在菜单栏中Run中选择Edit Configurations，见截图：<br>修改<strong>Script parameters:</strong> <code>runserver</code><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170218/193330168.png" alt="Script parameters" title="">
                </div>
                <div class="image-caption">Script parameters</div>
            </figure></li>
<li>ctrl + shift+ F10 运行<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170218/193636035.png" alt="输出" title="">
                </div>
                <div class="image-caption">输出</div>
            </figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170218/193700547.png" alt="页面" title="">
                </div>
                <div class="image-caption">页面</div>
            </figure>
<hr>
<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><ul>
<li><p>新建 view.py<br>在先前创建的 my_site 目录下的 my_site 目录新建一个 view.py 文件，并输入代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello world ! "</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p>我们从 django.http 中导入了 HttpResponse 这个类。我们会在接下来用到这个类。</p>
</li>
<li><p>我们定义了一个叫做 hello 的视图函数(view function)。每个view function至少要有一个参数，通常被叫做 request 。这是一个对象，包含了触发这个 view function的Web请求的信息， 它是 django.http.HttpRequest 的一个实例(instance)。 在这个例子中，虽然我们不对这个 request 做任何处理，但是我们还必须要把它作为视图的第一个参数。</p>
</li>
<li><p>这个函数只有一行简单的代码：它仅仅返回一个 HttpResponse 对象，这个对象包含了文本“Hello world”。</p>
</li>
</ul>
</li>
</ul>
<p>记住，一个视图本身就是一个Python的函数，这个函数接受一个 HttpRequest 作为它的第一个参数，并返回 一个 HttpResponse 的实例。要想让一个Python函数成为一个Django的视图，你需要让它满足这两个条件。 </p>
<ul>
<li>修改urls.py<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> my_site.view <span class="keyword">import</span> hello</div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">    url(<span class="string">r'^hello/$'</span>, hello)</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ul>
<li><p>URLconf<br>在Django里，要关联view function到一个URL，需要用到 URLconf。URLconf 就像是你的Django站点的目录。本质上，它是一个URL和这个URL将调用的view function之间的映射关系。 通过这种方式，你就可以告诉Django：“对于这个URL，调用这段代码，对于那个URL，调用那段代码。”例如，当用户访问 /hello/ 时，调用view function hello() ， 这个view function在 views.py 中。因此需要在使用function前，进行声明：<code>from my_site.view import hello</code>。</p>
</li>
<li><p>URLpattern<br>首先，我们从模块mysite/views.py中导入了 hello 这个view function。Python的导入语法用mysite.views表示 mysite/views.py 。(这段代码假设了mysite/views.py在Python的搜索路径中) 接着，我们添加了url(r’^hello/$’, hello), 到 urlpatterns 中。这一行被叫做一个URLpattern。 url() 函数会告诉Django如何处理你配置的url。 url() 的第一个参数是一个模式匹配字符串( 正则表达式)，第二个参数处理这个URLpattern的view function。</p>
</li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul>
<li><p>正则表达式<br>我们在正则表达式字符串前面加了一个 r 。在Python中，这表示一个原始字符串(raw string)，Python不会去转义那些反斜杠()。在普通的Python字符串中，反斜杠会被用来转义特殊字符，比如字符串 ‘\n’ 会被解释成换行符。当你加上 r 之后，Python就不会转义那些字符了， r’\n’ 就是一个包括了一个反斜杠和一个小写字母“n”的字符串。正则表达式中反斜杠的用法和Python字符串中反斜杠的用法刚好冲突了。所以在Python中使用正则表达式的时候最好都加上 r 。本书中所有的URLpattern都会用这种形式。</p>
</li>
<li><p>URLpattern的语法</p>
<ul>
<li><p>Django在检查URL模式之前，会移除每个URL最开始的斜杠。这意味着URLpattern并不包括 /hello 开头那个斜杠。(一开始，这可能不太直观，但是这样做简化了很多事情。)</p>
</li>
<li><p>匹配模式里面包括了一个脱字符( ^ )和一个美元符( \$ )。这两个符号在正则表达式里面的有特别的意义： ^ 要求从字符串开头开始匹配， \$ 则是要求对字符串尾部进行匹配。</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>这个URLconf中我们是把 hello 这个view function直接作为一个对象传递的，而不是去调用它。 这是Pyhton(作为动态语言)的一个重要特征，函数是一级对象(first-class objects)，你可以像 传递其它变量一样传递一个函数。很洋气吧？</p>
<hr>
<p>以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上手使用Python的Web框架– Django&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Django" scheme="http://feiyang.li/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>第2.1题：Python统计日记最重要的词</title>
    <link href="http://feiyang.li/2017/02/17/python-camp2-1/index.html"/>
    <id>http://feiyang.li/2017/02/17/python-camp2-1/index.html</id>
    <published>2017-02-17T09:04:55.000Z</published>
    <updated>2017-03-27T11:44:11.367Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>。<strong>题目2.1</strong>： 你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> re, os</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"><span class="comment"># 目标文件所在目录</span></div><div class="line">PATH = <span class="string">'D:'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCounter</span><span class="params">(source)</span>:</span></div><div class="line">    <span class="comment">#输入一个英文的纯文本文件，统计其中的单词出现的个数</span></div><div class="line">    <span class="keyword">with</span> open(source) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line">    data = data.lower()<span class="comment">#字母全部小写</span></div><div class="line">    datalist = re.split(<span class="string">r'[\s]+'</span>, data)<span class="comment">#根据空白字符，将data进行划分</span></div><div class="line">    <span class="keyword">return</span> Counter(datalist)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(PATH)</span>:</span></div><div class="line">    <span class="comment"># 切换到目标文件所在目录</span></div><div class="line">    os.chdir(PATH)</div><div class="line">    <span class="comment"># 遍历该目录下的txt文件</span></div><div class="line">    total_counter = Counter() <span class="comment"># 生成Counter()对象</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(os.getcwd()):</div><div class="line">        <span class="keyword">if</span> os.path.splitext(i)[<span class="number">1</span>] == <span class="string">'.txt'</span>:<span class="comment">#分离扩展名</span></div><div class="line">            total_counter += getCounter(i)<span class="comment"># 多个Counter()叠加</span></div><div class="line">    <span class="keyword">return</span> total_counter.most_common()<span class="comment">#Counter对象转化为list格式</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    dic = run(PATH)</div><div class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> range(len(dic)):</div><div class="line">        print(<span class="string">'%15s  ----&gt;   %3s'</span> % (dic[i][<span class="number">0</span>],dic[i][<span class="number">1</span>]))</div></pre></td></tr></table></figure>
<h1 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h1><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p><strong>UnicodeDecodeError: ‘gbk’ codec can’t decode byte…</strong><br>两种解决方法：</p>
<ul>
<li><p>decode(‘utf-8’)重新编码一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fp = open(filename,<span class="string">'rb'</span>)</div><div class="line"></div><div class="line">content = fp.read().decode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>open方法指定参数encoding=’UTF-8’:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content= open(<span class="string">'filename'</span>, mode=<span class="string">'rb'</span>, encoding=<span class="string">'UTF-8'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是得注意一下，原文到底是不是UTF-8编码。反正Python编码这里是个大坑，多加小心。</p>
<h2 id="文件名、目录名或卷标语法不正确"><a href="#文件名、目录名或卷标语法不正确" class="headerlink" title="文件名、目录名或卷标语法不正确"></a>文件名、目录名或卷标语法不正确</h2><p>Path里边的斜杠是 <strong>/</strong> 不是 \<br><code>PATH = &#39;E:/Python/pydata-book-master/ch02&#39;</code></p>
<h1 id="AttributeError-‘list’-object-has-no-attribute-‘…"><a href="#AttributeError-‘list’-object-has-no-attribute-‘…" class="headerlink" title="AttributeError: ‘list’ object has no attribute ‘…"></a>AttributeError: ‘list’ object has no attribute ‘…</h1><p>看看那个object到底是什么，<code>print(type(name))</code> ，然后再查查其对应的函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;。&lt;strong&gt;题目2.1&lt;/strong&gt;： 你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python_camp" scheme="http://feiyang.li/categories/Python-camp/"/>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Python_camp" scheme="http://feiyang.li/tags/Python-camp/"/>
    
      <category term="自然语言处理" scheme="http://feiyang.li/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>第1.9题：Python对密码加密</title>
    <link href="http://feiyang.li/2017/02/16/python-camp9/index.html"/>
    <id>http://feiyang.li/2017/02/16/python-camp9/index.html</id>
    <published>2017-02-16T13:59:43.000Z</published>
    <updated>2017-03-27T11:44:14.250Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>。<strong>题目1.9</strong>： 通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。</p>
</blockquote>
<hr>
<a id="more"></a>
<p>思路：salt 加 hash 来单向转换密码明文</p>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p>以下给出Py2和Py3两段代码，输出的内容是一样的。因为加密之后的内容不是unicode代码，所以存储可能不方便，可以使用<code>base64.b64encode(hashed)</code>转化为base64编码格式。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170216/194046518.png" alt="输出结果" title="">
                </div>
                <div class="image-caption">输出结果</div>
            </figure>
<p>Python2代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os,base64</div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</div><div class="line"><span class="keyword">from</span> hmac <span class="keyword">import</span> HMAC</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_password</span><span class="params">(password, salt=None)</span>:</span></div><div class="line">    <span class="string">"""Hash password on the fly."""</span></div><div class="line">    <span class="keyword">if</span> salt <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        salt = os.urandom(<span class="number">8</span>) <span class="comment"># 64 bits.</span></div><div class="line"></div><div class="line">    <span class="keyword">assert</span> <span class="number">8</span> == len(salt)</div><div class="line">    <span class="keyword">assert</span> isinstance(salt, str)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isinstance(password, unicode):</div><div class="line">        password = password.encode(<span class="string">'UTF-8'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">assert</span> isinstance(password, str)</div><div class="line"></div><div class="line">    result = password</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</div><div class="line">        result = HMAC(result, salt, sha256).digest()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> salt + result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_password</span><span class="params">(hashed, input_password)</span>:</span></div><div class="line">    <span class="keyword">return</span> hashed == encrypt_password(input_password, salt=hashed[:<span class="number">8</span>])</div><div class="line">    </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    hashed = encrypt_password(<span class="string">'secret password'</span>)</div><div class="line">    <span class="keyword">assert</span> validate_password(hashed, <span class="string">'secret password'</span>)</div><div class="line">    <span class="keyword">print</span> (hashed)</div><div class="line">    <span class="keyword">print</span> (base64.b64encode(hashed))</div><div class="line">    <span class="keyword">print</span> (base64.b64decode(base64.b64encode(hashed)))</div></pre></td></tr></table></figure></p>
<p>Python3代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os, base64</div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</div><div class="line"><span class="keyword">from</span> hmac <span class="keyword">import</span> HMAC</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_password</span><span class="params">(password, salt=None)</span>:</span></div><div class="line">    <span class="string">"""Hash password on the fly."""</span></div><div class="line">    <span class="keyword">if</span> salt <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        salt = os.urandom(<span class="number">8</span>)  <span class="comment"># 64 bits.</span></div><div class="line"></div><div class="line">    <span class="keyword">assert</span> <span class="number">8</span> == len(salt)</div><div class="line">    <span class="keyword">assert</span> isinstance(salt, bytes)</div><div class="line">    <span class="keyword">assert</span> isinstance(password, str)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> isinstance(password, str):</div><div class="line">        password = password.encode(<span class="string">'UTF-8'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">assert</span> isinstance(password, bytes)</div><div class="line"></div><div class="line">    result = password</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        result = HMAC(result, salt, sha256).digest()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> salt + result</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_password</span><span class="params">(hashed, input_password)</span>:</span></div><div class="line">    <span class="keyword">return</span> hashed == encrypt_password(input_password, salt=hashed[:<span class="number">8</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    hashed = encrypt_password(<span class="string">'secret password'</span>)</div><div class="line">    <span class="keyword">assert</span> validate_password(hashed, <span class="string">'secret password'</span>)</div><div class="line">    <span class="keyword">print</span> (hashed)</div><div class="line">    <span class="keyword">print</span> (base64.b64encode(hashed))</div><div class="line">    <span class="keyword">print</span> (base64.b64decode(base64.b64encode(hashed)))</div></pre></td></tr></table></figure></p>
<h1 id="Python编码问题"><a href="#Python编码问题" class="headerlink" title="Python编码问题"></a>Python编码问题</h1><p>一开始直接在Python3环境运行第一段代码的时候，总会报错<code>NameError: global name &#39;unicode&#39; is not defined</code>，百思不得其解。</p>
<p>查了资料，才发现是因为Python更新的时候，Python 3 renamed the <strong>unicode</strong> type to <strong>str</strong>, the old <strong>str</strong> type has been replaced by <strong>bytes</strong>。在<a href="https://docs.python.org/dev/howto/pyporting.html" target="_blank" rel="external">Python升级文档</a>内可以查到相关内容，也就是<strong>unicode</strong>直接改名<strong>str</strong>，<strong>str</strong>改名成<strong>bytes</strong>。<br>Python2和Python3，在编码方面挖下太多的坑<br>举个简单的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isinstance(<span class="string">u'中文'</span>, unicode) <span class="comment">#python2内是正确的</span></div><div class="line">isinstance(<span class="string">u'中文'</span>, str) <span class="comment">#python3内是正确的</span></div></pre></td></tr></table></figure></p>
<h1 id="Python3内的unicode和bytes"><a href="#Python3内的unicode和bytes" class="headerlink" title="Python3内的unicode和bytes"></a>Python3内的unicode和bytes</h1><p>Python 3最重要的新特性大概要算是<strong>对文本和二进制数据作了更为清晰的区分</strong>。文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。</p>
<p>在将字符串存入磁盘和从磁盘读取字符串的过程中，Python 自动地帮你完成了编码和解码的工作，你不需要关心它的过程，例如你能把一个中文赋值给字符串。而使用 bytes 类型，实质上是告诉 Python，不需要它帮你自动地完成编码和解码的工作，而是用户自己手动进行，并指定编码格式。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170216/212835886.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<hr>
<p>参考链接：<br><a href="http://zhuoqiang.me/password-storage-and-python-example.html" target="_blank" rel="external">http://zhuoqiang.me/password-storage-and-python-example.html</a><br><a href="http://www.ituring.com.cn/article/61192" target="_blank" rel="external">http://www.ituring.com.cn/article/61192</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;。&lt;strong&gt;题目1.9&lt;/strong&gt;： 通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python_camp" scheme="http://feiyang.li/categories/Python-camp/"/>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Python_camp" scheme="http://feiyang.li/tags/Python-camp/"/>
    
      <category term="密码处理" scheme="http://feiyang.li/tags/%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>第1.8题：文本读取转化</title>
    <link href="http://feiyang.li/2017/02/15/python-camp8/index.html"/>
    <id>http://feiyang.li/2017/02/15/python-camp8/index.html</id>
    <published>2017-02-15T14:07:40.000Z</published>
    <updated>2017-03-27T11:44:20.470Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>。<strong>题目1.8：</strong> 将纯文本文件 student.txt为学生信息,，写到 student.xls 文件内。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><strong>题目1.8：</strong> 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</p>
<pre><code>{
    &quot;1&quot;:[&quot;张三&quot;,150,120,100],
    &quot;2&quot;:[&quot;李四&quot;,90,99,95],
    &quot;3&quot;:[&quot;王五&quot;,60,66,68]
}
</code></pre><p>请将上述内容写到 student.xls 文件中，如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/164341562.png" alt="student.xls" title="">
                </div>
                <div class="image-caption">student.xls</div>
            </figure>
<p>这个题使用到<strong>文件读取</strong>，<strong>数据读取</strong>，<strong>Xls文件输出</strong>三部分内容。</p>
<h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><p>使用<strong>open()</strong>函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'student.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    content = f.read()</div></pre></td></tr></table></figure></p>
<h1 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = json.loads(content)</div></pre></td></tr></table></figure>
<h1 id="xls文件输出"><a href="#xls文件输出" class="headerlink" title="xls文件输出"></a>xls文件输出</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">file = xlwt.Workbook()</div><div class="line"><span class="comment"># 添加sheet</span></div><div class="line">table = file.add_sheet(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">for</span> row, i <span class="keyword">in</span> enumerate(list(d)):</div><div class="line">    table.write(row, <span class="number">0</span>, i)</div><div class="line">    <span class="keyword">for</span> col, j <span class="keyword">in</span> enumerate(d[i]):</div><div class="line">        table.write(row, col + <span class="number">1</span>, j)</div><div class="line">file.save(<span class="string">'student.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p>student.txt 可以在这里下载~  <a href="http://cdn.mmmxcc.cn/blog/student.txt" target="_blank" rel="external">http://cdn.mmmxcc.cn/blog/student.txt</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># 存放文件的目录</span></div><div class="line">filepath = <span class="string">'D:'</span></div><div class="line"></div><div class="line">os.chdir(filepath)</div><div class="line"><span class="comment"># 读取文件内容</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'student.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    content = f.read()</div><div class="line"><span class="comment"># 转为json</span></div><div class="line">d = json.loads(content)</div><div class="line">file = xlwt.Workbook()</div><div class="line"><span class="comment"># 添加sheet</span></div><div class="line">table = file.add_sheet(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">for</span> row, i <span class="keyword">in</span> enumerate(list(d)):</div><div class="line">    table.write(row, <span class="number">0</span>, i)</div><div class="line">    <span class="keyword">for</span> col, j <span class="keyword">in</span> enumerate(d[i]):</div><div class="line">        table.write(row, col + <span class="number">1</span>, j)</div><div class="line">file.save(<span class="string">'student.xls'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;。&lt;strong&gt;题目1.8：&lt;/strong&gt; 将纯文本文件 student.txt为学生信息,，写到 student.xls 文件内。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python_camp" scheme="http://feiyang.li/categories/Python-camp/"/>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Python_camp" scheme="http://feiyang.li/tags/Python-camp/"/>
    
      <category term="自然语言处理" scheme="http://feiyang.li/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>第1.7题：Python敏感词检测</title>
    <link href="http://feiyang.li/2017/02/15/python-camp7/index.html"/>
    <id>http://feiyang.li/2017/02/15/python-camp7/index.html</id>
    <published>2017-02-15T11:28:20.000Z</published>
    <updated>2017-03-27T11:44:17.551Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>。<strong>题目1.7：</strong>敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="Python-find-方法"><a href="#Python-find-方法" class="headerlink" title="Python find()方法"></a>Python find()方法</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Python find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>find()方法语法：<br>str.find(str, beg=0, end=len(string))</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>str – 指定检索的字符串<br>beg – 开始索引，默认为0。<br>end – 结束索引，默认为字符串的长度。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>如果包含子字符串返回开始的索引值，否则返回-1。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例展示了find()方法的实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">info = <span class="string">'abca'</span></div><div class="line"><span class="keyword">print</span> info.find(<span class="string">'a'</span>)<span class="comment">##从下标0开始，查找在字符串里第一个出现的子串，返回结果：0</span></div><div class="line"></div><div class="line">info = <span class="string">'abca'</span></div><div class="line"><span class="keyword">print</span> info.find(<span class="string">'a'</span>,<span class="number">1</span>)<span class="comment">##从下标1开始，查找在字符串里第一个出现的子串：返回结果3</span></div><div class="line"></div><div class="line">info = <span class="string">'abca'</span></div><div class="line"><span class="keyword">print</span> info.find(<span class="string">'333'</span>)<span class="comment">##返回-1,查找不到返回-1</span></div></pre></td></tr></table></figure></p>
<h1 id="Python-strip-方法"><a href="#Python-strip-方法" class="headerlink" title="Python strip()方法"></a>Python strip()方法</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>strip()方法语法：<br>str.strip([chars]);</p>
<h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>chars – 移除字符串头尾指定的字符。</p>
<h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>返回移除字符串头尾指定的字符生成的新字符串。</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>以下实例展示了strip()函数的使用方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"0000000this is string example....wow!!!0000000"</span>;</div><div class="line"><span class="keyword">print</span> str.strip( <span class="string">'0'</span> );</div></pre></td></tr></table></figure></p>
<p>以上实例输出结果如下：<br>this is string example….wow!!!</p>
<h1 id="Python-map-方法"><a href="#Python-map-方法" class="headerlink" title="Python map()方法"></a>Python map()方法</h1><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><p>很简单，第一个参数接收一个函数名，第二个参数接收一个可迭代对象。</p>
<h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>map(f, iterable)<br>基本上等于：<br>[f(x) for x in iterable]</p>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add100</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+<span class="number">100</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hh = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(add100,hh)</div><div class="line">[<span class="number">111</span>, <span class="number">122</span>, <span class="number">133</span>]</div></pre></td></tr></table></figure>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p><a href="http://cdn.mmmxcc.cn//blog/filtered_words.txt" target="_blank" rel="external">filtered_words.txt</a><br>将文件下载到D盘内即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> cmd</div><div class="line"><span class="comment"># 存放敏感词文件的路径</span></div><div class="line">filtered_words_filepath = <span class="string">'d:/filtered_words.txt'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLI</span><span class="params">(cmd.Cmd)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> <span class="comment">#初始基础类方法  </span></div><div class="line">        cmd.Cmd.__init__(self)  <span class="comment"># 初始化，提取敏感词列表</span></div><div class="line">        self.intro = <span class="string">'Python敏感词检测:'</span> <span class="comment">#输出欢迎信息</span></div><div class="line">        f = open(filtered_words_filepath)</div><div class="line">        self.words = list(map(<span class="keyword">lambda</span> i: i.strip(<span class="string">'\n'</span>), f.readlines()))</div><div class="line">        self.prompt = <span class="string">"&gt;&gt;&gt; "</span>    <span class="comment"># 定义提示符</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, line)</span>:</span></div><div class="line">        <span class="keyword">if</span> any([i <span class="keyword">in</span> line <span class="keyword">for</span> i <span class="keyword">in</span> self.words]):</div><div class="line">            <span class="keyword">print</span> (<span class="string">'Freedom'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'Human Rights'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_quit</span><span class="params">(self, arg)</span>:</span></div><div class="line">        exit()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</div><div class="line">    cli = CLI()</div><div class="line">    cli.cmdloop()</div></pre></td></tr></table></figure></p>
<hr>
<p>其实这个地方出现过一个错误，map()形成的<strong>iterable</strong>是一次性的。</p>
<p>也就是如果不保存，直接迭代之后，<code>self.words =map(lambda i: i.strip(&#39;\n&#39;), f.readlines())</code><br><strong>self.words </strong>里边的数据会丢失，因此这个地方加了一个list()函数，将<strong>iterable</strong>到处保存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;。&lt;strong&gt;题目1.7：&lt;/strong&gt;敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python_camp" scheme="http://feiyang.li/categories/Python-camp/"/>
    
    
      <category term="Python" scheme="http://feiyang.li/tags/Python/"/>
    
      <category term="Python_camp" scheme="http://feiyang.li/tags/Python-camp/"/>
    
      <category term="自然语言处理" scheme="http://feiyang.li/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
