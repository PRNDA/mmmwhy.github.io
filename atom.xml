<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李飞阳</title>
  <subtitle>PM、Coder、Data mining</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mmmxcc.cn/"/>
  <updated>2017-02-10T14:20:17.832Z</updated>
  <id>https://mmmxcc.cn/</id>
  
  <author>
    <name>Wing Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python正则表达式</title>
    <link href="https://mmmxcc.cn/2017/02/10/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://mmmxcc.cn/2017/02/10/Python正则表达式/</id>
    <published>2017-02-10T14:18:55.000Z</published>
    <updated>2017-02-10T14:20:17.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h1><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p>Python中经常要对字符串进行处理，处理用户的输入，对文本的编辑等等。使用正则表达式，会使得字符串的处理很方便。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/204306504.png" alt="Python支持的正则表达式元字符和语法" title="">
                </div>
                <div class="image-caption">Python支持的正则表达式元字符和语法</div>
            </figure></p>
<h2 id="数量词的贪婪模式与非贪婪模式"><a href="#数量词的贪婪模式与非贪婪模式" class="headerlink" title="数量词的贪婪模式与非贪婪模式"></a>数量词的贪婪模式与非贪婪模式</h2><p>正则表达式通常用于在文本中查找匹配的字符串。</p>
<p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。</p>
<p>例如：正则表达式”ab<em>“如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。</p>
<h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><h2 id="开始使用re"><a href="#开始使用re" class="headerlink" title="开始使用re"></a>开始使用re</h2><p>Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding: UTF-8</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 将正则表达式编译成Pattern对象</span></div><div class="line">    pattern1 = re.compile(<span class="string">r'hello'</span>) </div><div class="line">    <span class="comment"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span></div><div class="line">    <span class="keyword">return</span> pattern1.match(<span class="string">'hello world!'</span>)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> test():</div><div class="line">    <span class="comment"># 使用Match获得分组信息</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"match"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> (<span class="string">"not match"</span>)</div></pre></td></tr></table></figure>
<p><strong>re.compile(strPattern[, flag]):</strong><br>这个方法用于将字符串形式的正则表达式编译为Pattern对象， 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如<strong>re.compile(‘pattern’, re.I | re.M)</strong>与<strong>re.compile(‘(?im)pattern’)</strong>是等价的。<br>可选值有：</p>
<ul>
<li>re.<strong>I</strong>(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）</li>
<li><strong>M</strong>(MULTILINE): 多行模式，改变’^’和’$’的行为（参见上图）</li>
<li><strong>S</strong>(DOTALL): 点任意匹配模式，改变’.’的行为</li>
<li><strong>L</strong>(LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</li>
<li><strong>U</strong>(UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</li>
<li><strong>X</strong>(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = re.compile(<span class="string">r"""\d +  # the integral part</span></div><div class="line">                   \.    # the decimal point</div><div class="line">                   \d *  # some fractional digits""", re.X)</div><div class="line">b = re.compile(<span class="string">r"\d+\.\d*"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>re提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m = re.match(<span class="string">r'hello'</span>, <span class="string">'hello world!'</span>)</div><div class="line"><span class="keyword">print</span> m.group()</div></pre></td></tr></table></figure></p>
<p>re模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。</p>
<h2 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h2><p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>
<h3 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h3><ul>
<li><strong>string</strong>: 匹配时使用的文本。</li>
<li><strong>re</strong>: 匹配时使用的Pattern对象。</li>
<li><strong>pos</strong>: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>
<li><strong>endpos</strong>: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>
<li><strong>lastindex</strong>: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</li>
<li><strong>lastgroup</strong>: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</li>
</ul>
<h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul>
<li><strong>group([group1, …])</strong>:<br>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</li>
<li><strong>groups([default]): </strong><br>以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</li>
<li><strong>groupdict([default]): </strong><br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</li>
<li><strong>start([group]): </strong><br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</li>
<li><strong>end([group]): </strong><br>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</li>
<li><strong>span([group]): </strong><br>返回(start(group), end(group))。</li>
<li><strong>expand(template): </strong><br>将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g<1>0。</1></id></name></id></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">m = re.match(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, <span class="string">'hello world!'</span>)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> (<span class="string">"m.string:"</span>, m.string)</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.re:"</span>, m.re)</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.pos:"</span>, m.pos)</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.endpos:"</span>, m.endpos)</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.lastindex:"</span>, m.lastindex)</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.lastgroup:"</span>, m.lastgroup)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> (<span class="string">"m.group(1,2):"</span>, m.group(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.groups():"</span>, m.groups())</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.groupdict():"</span>, m.groupdict())</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.start(2):"</span>, m.start(<span class="number">2</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.end(2):"</span>, m.end(<span class="number">2</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">"m.span(2):"</span>, m.span(<span class="number">2</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">r"m.expand(r'\2 \1\3'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>))</div></pre></td></tr></table></figure>
<p>输出内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">m.string: hello world!</div><div class="line">m.re: re.compile(&apos;(\\w+) (\\w+)(?P&lt;sign&gt;.*)&apos;)</div><div class="line">m.pos: 0</div><div class="line">m.endpos: 12</div><div class="line">m.lastindex: 3</div><div class="line">m.lastgroup: sign</div><div class="line">m.group(1,2): (&apos;hello&apos;, &apos;world&apos;)</div><div class="line">m.groups(): (&apos;hello&apos;, &apos;world&apos;, &apos;!&apos;)</div><div class="line">m.groupdict(): &#123;&apos;sign&apos;: &apos;!&apos;&#125;</div><div class="line">m.start(2): 6</div><div class="line">m.end(2): 11</div><div class="line">m.span(2): (6, 11)</div><div class="line">m.expand(r&apos;\2 \1\3&apos;): world hello!</div></pre></td></tr></table></figure></p>
<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。</p>
<p>Pattern不能直接实例化，必须使用re.compile()进行构造。</p>
<p>Pattern提供了几个可读属性用于获取表达式的相关信息：</p>
<ul>
<li>pattern: 编译时用的表达式字符串。</li>
<li>flags: 编译时用的匹配模式。数字形式。</li>
<li>groups: 表达式中分组的数量。</li>
<li>groupindex: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">p = re.compile(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, re.DOTALL)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> (<span class="string">"p.pattern:"</span>, p.pattern)</div><div class="line"><span class="keyword">print</span> (<span class="string">"p.flags:"</span>, p.flags)</div><div class="line"><span class="keyword">print</span> (<span class="string">"p.groups:"</span>, p.groups)</div><div class="line"><span class="keyword">print</span> (<span class="string">"p.groupindex:"</span>, p.groupindex)</div><div class="line"> </div><div class="line"><span class="comment">### output ###</span></div><div class="line"><span class="comment"># p.pattern: (\w+) (\w+)(?P&lt;sign&gt;.*)</span></div><div class="line"><span class="comment"># p.flags: 16</span></div><div class="line"><span class="comment"># p.groups: 3</span></div><div class="line"><span class="comment"># p.groupindex: &#123;'sign': 3&#125;</span></div></pre></td></tr></table></figure>
<p>####实例方法[ | re模块方法]：####</p>
<ul>
<li><p><strong>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags]): </strong><br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。<br>pos和endpos的默认值分别为0和len(string)；<br>re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。<br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’。 </p>
</li>
<li><p><strong>search(string[, pos[, endpos]]) | re.search(pattern, string[, flags]): </strong><br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；<br>若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。<br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。 </p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding: UTF-8 </span></div><div class="line"><span class="keyword">import</span> re </div><div class="line"> </div><div class="line"><span class="comment"># 将正则表达式编译成Pattern对象 </span></div><div class="line">pattern = re.compile(<span class="string">r'world'</span>) </div><div class="line"> </div><div class="line"><span class="comment"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None </span></div><div class="line"><span class="comment"># 这个例子中使用match()无法成功匹配 </span></div><div class="line">match = pattern.search(<span class="string">'hello world!'</span>) </div><div class="line"> </div><div class="line"><span class="keyword">if</span> match: </div><div class="line">    <span class="comment"># 使用Match获得分组信息 </span></div><div class="line">    <span class="keyword">print</span> (match.group() )</div><div class="line"> </div><div class="line"><span class="comment">### 输出 ### </span></div><div class="line"><span class="comment"># world</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit]): </strong><br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。 </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">p = re.compile(<span class="string">r'\d+'</span>)</div><div class="line"><span class="keyword">print</span> (p.split(<span class="string">'one1two2three3four4'</span>))</div><div class="line"> </div><div class="line"><span class="comment">### output ###</span></div><div class="line"><span class="comment"># ['one', 'two', 'three', 'four', '']</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags]): </strong><br>搜索string，以列表形式返回全部能匹配的子串。 </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">p = re.compile(<span class="string">r'\d+'</span>)</div><div class="line"><span class="keyword">print</span> (p.findall(<span class="string">'one1two2three3four4'</span>))</div><div class="line"> </div><div class="line"><span class="comment">### output ###</span></div><div class="line"><span class="comment"># ['1', '2', '3', '4']</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags]): </strong><br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。 </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">p = re.compile(<span class="string">r'\d+'</span>)</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> p.finditer(<span class="string">'one1two2three3four4'</span>):</div><div class="line">    <span class="keyword">print</span> m.group(),</div><div class="line"> </div><div class="line"><span class="comment">### output ###</span></div><div class="line"><span class="comment"># 1 2 3 4</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]): </strong><br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<br>当repl是一个字符串时，可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。<br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br>count用于指定最多替换次数，不指定时全部替换。 </name></id></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</div><div class="line">s = <span class="string">'i say, hello world!'</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> p.sub(<span class="string">r'\2 \1'</span>, s)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</div><div class="line"> </div><div class="line"><span class="keyword">print</span> p.sub(func, s)</div><div class="line"> </div><div class="line"><span class="comment">### output ###</span></div><div class="line"><span class="comment"># say i, world hello!</span></div><div class="line"><span class="comment"># I Say, Hello World!</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>subn(repl, string[, count]) |re.sub(pattern, repl, string[, count]): </strong><br>返回 (sub(repl, string[, count]), 替换次数)。 </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</div><div class="line">s = <span class="string">'i say, hello world!'</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> p.subn(<span class="string">r'\2 \1'</span>, s)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</div><div class="line"> </div><div class="line"><span class="keyword">print</span> p.subn(func, s)</div><div class="line"> </div><div class="line"><span class="comment">### output ###</span></div><div class="line"><span class="comment"># ('say i, world hello!', 2)</span></div><div class="line"><span class="comment"># ('I Say, Hello World!', 2)</span></div></pre></td></tr></table></figure>
<p>以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能。笔者也是看的迷迷糊糊，文章来自<a href="http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="external">cnblog</a>，原版博客基于Python2.4完成，年代有点久，我稍微修改了一下代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式基础&quot;&gt;&lt;a href=&quot;#正则表达式基础&quot; class=&quot;headerlink&quot; title=&quot;正则表达式基础&quot;&gt;&lt;/a&gt;正则表达式基础&lt;/h1&gt;&lt;h2 id=&quot;常用语法&quot;&gt;&lt;a href=&quot;#常用语法&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第三题：将  200 个激活码保存到 MySQL</title>
    <link href="https://mmmxcc.cn/2017/02/10/%E7%AC%AC%E4%B8%89%E9%A2%98%EF%BC%9A%E5%B0%86200%E4%B8%AA%E6%BF%80%E6%B4%BB%E7%A0%81%E4%BF%9D%E5%AD%98%E5%88%B0-MySQL/"/>
    <id>https://mmmxcc.cn/2017/02/10/第三题：将200个激活码保存到-MySQL/</id>
    <published>2017-02-10T07:16:52.000Z</published>
    <updated>2017-02-10T08:36:02.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>，今天做的是第三题，使用 Python 将激活码保存到 MySQL。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="准备姿势"><a href="#准备姿势" class="headerlink" title="准备姿势"></a>准备姿势</h1><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><p>如果是windows 用户，mysql 的安装非常简单，直接下载安装文件，双击安装文件一步一步进行操作即可。</p>
<p>Linux 下的安装可能会更加简单，除了下载安装包进行安装外，一般的linux 仓库中都会有mysql ，我们只需要通过一个命令就可以下载安装：</p>
<p>Ubuntu\deepin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server </div><div class="line">sudo apt-get install  mysql-client</div></pre></td></tr></table></figure></p>
<p>centOS/redhat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="安装MySQL-python"><a href="#安装MySQL-python" class="headerlink" title="安装MySQL-python"></a>安装MySQL-python</h2><p>要想使python可以操作mysql 就需要MySQL-python驱动，它是python 操作mysql必不可少的模块。</p>
<p>下载地址：<a href="https://pypi.python.org/pypi/MySQL-python/" target="_blank" rel="external">https://pypi.python.org/pypi/MySQL-python/</a></p>
<p>下载MySQL-python-1.2.5.zip 文件之后直接解压。进入MySQL-python-1.2.5目录:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<p>可能会提示缺少<strong>“error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from <a href="http://aka.ms/vcpython27" target="_blank" rel="external">http://aka.ms/vcpython27</a>”</strong><br>这个地方查找了很多资料，有的说要修改注册表，有的说要改VS2015的配置。简直一派胡言，I am angry。直接按照要求，在这个<em><a href="http://aka.ms/vcpython27" target="_blank" rel="external">http://aka.ms/vcpython27</a></em>下载安装就可以了。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170209/192148401.png" alt="Microsoft" title="">
                </div>
                <div class="image-caption">Microsoft</div>
            </figure></h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import MySQLdb</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import mysql</div></pre></td></tr></table></figure></p>
<p>如果不报错，那么就安装成功了。</p>
<hr>
<h2 id="mysql-的基本操作"><a href="#mysql-的基本操作" class="headerlink" title="mysql 的基本操作"></a>mysql 的基本操作</h2><ul>
<li><p>启动mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前所有的数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure>
</li>
<li><p>新建数据库表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database if not exists test;</div></pre></td></tr></table></figure>
</li>
<li><p>使用某表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use test;</div></pre></td></tr></table></figure>
</li>
<li><p>添加数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into user values(&apos;Alen&apos;,&apos;7875&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>查看数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from student</div></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete from user where name = &apos;Jack&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>删除table</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table if exists student</div></pre></td></tr></table></figure>
</li>
<li><p>删除database</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop database if exists test</div></pre></td></tr></table></figure>
</li>
<li><p>mysql卡死怎么办<br>查看目前连接情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show processlist;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/103558354.png" alt="卡死" title="">
                </div>
                <div class="image-caption">卡死</div>
            </figure>
<p>发现多个线程数据处理间出现了死锁，也没什么好的办法，kill掉就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill 65;</div></pre></td></tr></table></figure></p>
<h2 id="然后就可以继续使用了。"><a href="#然后就可以继续使用了。" class="headerlink" title="然后就可以继续使用了。"></a>然后就可以继续使用了。</h2><h2 id="python-操作mysql基本语法"><a href="#python-操作mysql基本语法" class="headerlink" title="python 操作mysql基本语法"></a>python 操作mysql基本语法</h2><ul>
<li>建立数据库连接<br>注意，这个地方的test表要存在，否则无法连接<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line">conn=MySQLdb.connect(</div><div class="line">        host=<span class="string">'localhost'</span>,</div><div class="line">        port = <span class="number">3306</span>, <span class="comment">#默认3306端口，不写也可以</span></div><div class="line">        user=<span class="string">'root'</span>,</div><div class="line">        passwd=<span class="string">'123456'</span>,</div><div class="line">        db =<span class="string">'test'</span>,</div><div class="line">)</div><div class="line">cur = conn.cursor()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>cursor 是游标, 通过获取到的数据库连接conn下的cursor()方法来创建游标。</strong><br>其中，第二行代码可以缩写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(&apos;localhost&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;test&apos;)</div></pre></td></tr></table></figure></p>
<ul>
<li><p>创建数据表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cur.execute(&quot;create table student(id int ,name varchar(20),class varchar(30),age varchar(10))&quot;) </div><div class="line">#通过游标cur 操作execute()方法可以写入纯sql语句。通过execute()方法中写如sql语句来对数据进行操作。</div></pre></td></tr></table></figure>
</li>
<li><p>插入一条数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cur.execute(&quot;insert into student values(&apos;2&apos;,&apos;Tom&apos;,&apos;3 year 2 class&apos;,&apos;9&apos;)&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>修改查询条件的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cur.execute(&quot;update student set class=&apos;3 year 1 class&apos; where name = &apos;Tom&apos;&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>删除查询条件的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cur.execute(&quot;delete from student where age=&apos;9&apos;&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>关闭游标</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cur.close()</div></pre></td></tr></table></figure>
</li>
<li><p>提交数据<br>向数据库插入一条数据时必须要有这个方法，否则数据不会被真正的插入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn.commit()</div></pre></td></tr></table></figure>
</li>
<li><p>关闭数据库连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn.close()</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="打印表中所有数据"><a href="#打印表中所有数据" class="headerlink" title="打印表中所有数据"></a>打印表中所有数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn= MySQLdb.connect(</div><div class="line">        host=<span class="string">'localhost'</span>,</div><div class="line">        port = <span class="number">3306</span>,</div><div class="line">        user=<span class="string">'root'</span>,</div><div class="line">        passwd=<span class="string">'123456'</span>,</div><div class="line">        db =<span class="string">'test'</span>,</div><div class="line">        )</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment">#获得表中有多少条数据</span></div><div class="line">aa=cur.execute(<span class="string">"select * from student"</span>)</div><div class="line"><span class="keyword">print</span> aa</div><div class="line"></div><div class="line"><span class="comment">#打印表中的多少数据</span></div><div class="line">info = cur.fetchmany(aa)</div><div class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> info:</div><div class="line">    <span class="keyword">print</span> ii</div><div class="line">cur.close()</div><div class="line">conn.commit()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn= MySQLdb.connect(</div><div class="line">        host=<span class="string">'localhost'</span>,</div><div class="line">        port = <span class="number">3306</span>,</div><div class="line">        user=<span class="string">'root'</span>,</div><div class="line">        passwd=<span class="string">'123456'</span>,</div><div class="line">        db =<span class="string">'test'</span>,</div><div class="line">        )</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment">#一次插入多条记录</span></div><div class="line">sqli=<span class="string">"insert into student values(%s,%s,%s,%s)"</span></div><div class="line">cur.executemany(sqli,[</div><div class="line">    (<span class="string">'3'</span>,<span class="string">'Tom'</span>,<span class="string">'1 year 1 class'</span>,<span class="string">'6'</span>),</div><div class="line">    (<span class="string">'3'</span>,<span class="string">'Jack'</span>,<span class="string">'2 year 1 class'</span>,<span class="string">'7'</span>),</div><div class="line">    (<span class="string">'3'</span>,<span class="string">'Yaheng'</span>,<span class="string">'2 year 2 class'</span>,<span class="string">'7'</span>),</div><div class="line">    ])</div><div class="line"></div><div class="line">cur.close()</div><div class="line">conn.commit()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<p>以上两段代码参考 虫师的博客</p>
<hr>
<h1 id="正式代码"><a href="#正式代码" class="headerlink" title="正式代码"></a>正式代码</h1><p>经过以上铺垫之后，就可以写出满足要求的代码了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</div><div class="line"><span class="keyword">import</span> MySQLdb,random, string</div><div class="line">chars = string.digits + string.letters</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uuidkey</span><span class="params">(num)</span>:</span><span class="comment"># 使用uuid方法得到随机值</span></div><div class="line">    id_list = [str(uuid4()) <span class="keyword">for</span> i <span class="keyword">in</span> range(num)]</div><div class="line">    <span class="keyword">return</span> id_list</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomkey</span><span class="params">(num)</span>:</span><span class="comment"># 使用random随机取数据值</span></div><div class="line">    id_list = [<span class="string">""</span>.join(random.sample(chars, <span class="number">20</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(num)]</div><div class="line">    <span class="keyword">return</span> id_list</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table_put_keys</span><span class="params">(id_list,table)</span>:</span><span class="comment">#将获得的随机值存入mysql</span></div><div class="line">    conn= MySQLdb.connect(</div><div class="line">        host=<span class="string">'localhost'</span>,</div><div class="line">        port = <span class="number">3306</span>,</div><div class="line">        user=<span class="string">'root'</span>,</div><div class="line">        passwd=<span class="string">'lyyc12345'</span>,</div><div class="line">        db =<span class="string">'test'</span>,</div><div class="line">        )</div><div class="line">    cur = conn.cursor()</div><div class="line">    cur.execute(<span class="string">"drop table if exists %s"</span> % table)    <span class="comment">#若存在table表则删除</span></div><div class="line">    cur.execute(<span class="string">"create table %s(id int, coupon char(40))"</span> % table)    <span class="comment">#创建数据表</span></div><div class="line">    temp = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> id_list:    <span class="comment">#将id_list里边的数据插入到mysql中</span></div><div class="line">        cur.execute(<span class="string">"insert into %s values('%d','%s')"</span> %(table,temp,i))</div><div class="line">        temp=temp+<span class="number">1</span></div><div class="line">    cur.close()    <span class="comment">#关闭游标</span></div><div class="line">    conn.commit()    <span class="comment">#提交数据</span></div><div class="line">    conn.close()    <span class="comment">#关闭数据库连接</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    create_table_put_keys(uuidkey(<span class="number">200</span>),<span class="string">'uuidtable'</span>)</div><div class="line">    create_table_put_keys(randomkey(<span class="number">200</span>),<span class="string">'randomtable'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>python 中 % 的使用：<code>cur.execute(&quot;insert into %s values(&#39;%d&#39;,&#39;%s&#39;)&quot; %(table,temp,i))</code>，前后两部分用%相隔</li>
<li>提交数据<strong>conn.commit()</strong>，否则数据将不会保存。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;，今天做的是第三题，使用 Python 将激活码保存到 MySQL。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Python练习题" scheme="https://mmmxcc.cn/tags/Python%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>frp内网穿透</title>
    <link href="https://mmmxcc.cn/2017/02/09/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://mmmxcc.cn/2017/02/09/frp内网穿透/</id>
    <published>2017-02-09T02:56:15.000Z</published>
    <updated>2017-02-09T02:57:39.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我之前写过一篇文章是用Ngrok方式进行内网穿透，该方法需要借助到别人的服务器，非常麻烦。后来发现了Frp这个神器，只需要有一台公网的主机，就可以进行端口穿透，同时还可以转发tcp，udp，dns查询。</p>
</blockquote>
<hr>
<a id="more"></a>
<p>这里仅使用的到最简单的端口映射，需要一台有公网的vps，以及一台本地主机。</p>
<h1 id="ssh登录公网vps"><a href="#ssh登录公网vps" class="headerlink" title="ssh登录公网vps"></a>ssh登录公网vps</h1><h2 id="下载frp安装包"><a href="#下载frp安装包" class="headerlink" title="下载frp安装包"></a>下载frp安装包</h2><p>这里下载的是64位安装包<br><code>wget http://home.ustc.edu.cn/~mmmwhy/frp/frp_0.9.3_linux_amd64.tar.gz</code><br>如果你的系统版本是32位，那么建议使用如下命令：<strong>(如果不知道自己系统版本的，也用这个)</strong><br><code>wget http://home.ustc.edu.cn/~mmmwhy/frp/frp_0.9.3_linux_386.tar.gz</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170209/100609833.png" alt="frp" title="">
                </div>
                <div class="image-caption">frp</div>
            </figure></p>
<h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><p><code>tar -xzvf frp_0.9.3_linux_386.tar.gz</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170209/100924889.png" alt="frp" title="">
                </div>
                <div class="image-caption">frp</div>
            </figure></p>
<h2 id="修改-frps-ini-文件，配置一个名为-ssh-的反向代理："><a href="#修改-frps-ini-文件，配置一个名为-ssh-的反向代理：" class="headerlink" title="修改 frps.ini 文件，配置一个名为 ssh 的反向代理："></a>修改 <strong>frps.ini</strong> 文件，配置一个名为 ssh 的反向代理：</h2><p><code>cd frp_0.9.3_linux_386/ &amp;&amp; vi frps.ini</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># frps.ini</div><div class="line">[common]</div><div class="line">bind_port = 7000</div><div class="line"></div><div class="line">[ssh]</div><div class="line">listen_port = 6000</div><div class="line">auth_token = 123</div></pre></td></tr></table></figure></p>
<p>[ssh]后边写vps自己的端口。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170209/104436103.png" alt="公网端口" title="">
                </div>
                <div class="image-caption">公网端口</div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170209/102426087.png" alt="ssh端口号" title="">
                </div>
                <div class="image-caption">ssh端口号</div>
            </figure></p>
<h2 id="启动-frps："><a href="#启动-frps：" class="headerlink" title="启动 frps："></a>启动 frps：</h2><p>./frps -c ./frps.ini</p>
<h1 id="登录无公网主机"><a href="#登录无公网主机" class="headerlink" title="登录无公网主机"></a>登录无公网主机</h1><p>下载frp安装包与 解压安装包，与上部相同，在此不赘述。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170209/102821860.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="修改-frpc-ini-文件，配置一个名为-ssh-的反向代理："><a href="#修改-frpc-ini-文件，配置一个名为-ssh-的反向代理：" class="headerlink" title="修改 frpc.ini 文件，配置一个名为 ssh 的反向代理："></a>修改 <strong>frpc.ini</strong> 文件，配置一个名为 ssh 的反向代理：</h2><p><code>cd frp_0.9.3_linux_386/ &amp;&amp; vi frpc.ini</code><br>如果希望转发到本地8888端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line">server_addr = 115.159.102.118</div><div class="line">server_port = 7000</div><div class="line">auth_token = 123</div><div class="line"></div><div class="line">[ssh]</div><div class="line">local_ip = 127.0.0.1</div><div class="line">local_port = 8888</div></pre></td></tr></table></figure></p>
<h2 id="启动-frpc："><a href="#启动-frpc：" class="headerlink" title="启动 frpc："></a>启动 frpc：</h2><p>./frpc -c ./frpc.ini</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我之前写过一篇文章是用Ngrok方式进行内网穿透，该方法需要借助到别人的服务器，非常麻烦。后来发现了Frp这个神器，只需要有一台公网的主机，就可以进行端口穿透，同时还可以转发tcp，udp，dns查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="VPS" scheme="https://mmmxcc.cn/tags/VPS/"/>
    
      <category term="frp" scheme="https://mmmxcc.cn/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>第二题：使用 Python 如何生成 200 个激活码</title>
    <link href="https://mmmxcc.cn/2017/02/07/%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8-Python-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-200-%E4%B8%AA%E6%BF%80%E6%B4%BB%E7%A0%81/"/>
    <id>https://mmmxcc.cn/2017/02/07/第二题：使用-Python-如何生成-200-个激活码/</id>
    <published>2017-02-07T11:50:11.000Z</published>
    <updated>2017-02-10T08:36:01.474Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>，今天做的是第二题，使用 Python 如何生成 200 个激活码。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="random模块介绍"><a href="#random模块介绍" class="headerlink" title="random模块介绍"></a>random模块介绍</h1><p>我们可以使用python中的random模块，用于生成随机浮点数、整数、字符串，甚至帮助你随机选择列表序列中的一个元素，打乱一组数据等。</p>
<h2 id="random模块五个函数"><a href="#random模块五个函数" class="headerlink" title="random模块五个函数"></a>random模块五个函数</h2><ul>
<li>random() 返回0&lt;=n&lt;1之间的随机实数n；</li>
<li>choice(seq) 从序列seq中返回随机的元素；</li>
<li>getrandbits(n) 以长整型形式返回n个随机位；</li>
<li>shuffle(seq[, random]) 原地指定seq序列；</li>
<li>sample(seq, n) 从序列seq中选择n个随机且独立的元素；</li>
</ul>
<h2 id="random模块方法说明"><a href="#random模块方法说明" class="headerlink" title="random模块方法说明"></a>random模块方法说明</h2><ul>
<li><strong>random.random()</strong>函数是这个模块中最常用的方法了，它会生成一个随机的浮点数，范围是在0.0~1.0之间。</li>
<li><strong>random.uniform()</strong>正好弥补了上面函数的不足，它可以设定浮点数的范围，一个是上限，一个是下限。</li>
<li><strong>random.randint()</strong>随机生一个整数int类型，可以指定这个整数的范围，同样有上限和下限值，<em>python random.randint</em>。</li>
<li><strong>random.choice()</strong>可以从任何序列，比如list列表中，选取一个随机的元素返回，可以用于字符串、列表、<a href="http://www.iplaypython.com/jichu/tuple.html" target="_blank" rel="external">元组</a>等。</li>
<li><strong>random.shuffle()</strong>如果你想将一个序列中的元素，随机打乱的话可以用这个函数方法。</li>
<li><strong>random.sample()</strong>可以从指定的序列中，随机的截取指定长度的片断，不作原地修改。</li>
</ul>
<h1 id="使用random直接随机抽取"><a href="#使用random直接随机抽取" class="headerlink" title="使用random直接随机抽取"></a>使用random直接随机抽取</h1><p>从26个大小字母+10个数字，随机选取10个数字，组成一组激活码。重复此过程200次即可。</p>
<h2 id="设定字符串内容"><a href="#设定字符串内容" class="headerlink" title="设定字符串内容"></a>设定字符串内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random, string</div><div class="line">chars = string.letters + string.digits</div><div class="line"><span class="keyword">print</span> chars</div></pre></td></tr></table></figure>
<p>输出内容为：<br><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</code></p>
<h2 id="从给定内容中随机选取"><a href="#从给定内容中随机选取" class="headerlink" title="从给定内容中随机选取"></a>从给定内容中随机选取</h2><p>使用<strong>random.choice()</strong>和<strong>random.sample()</strong>两个函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s= <span class="string">""</span>.join(random.choice(chars) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line">gene = <span class="string">""</span>.join(random.sample(chars, <span class="number">10</span>))</div><div class="line"><span class="keyword">print</span> s +<span class="string">"    ///////   "</span> + gene</div></pre></td></tr></table></figure></p>
<p>其中s与gene分别可以获得两个随机序列，从这里我们可以看出两个函数使用上的差异，相对来说，<strong>random.sample()简单一些</strong>。</p>
<h1 id="使用UUID"><a href="#使用UUID" class="headerlink" title="使用UUID"></a>使用UUID</h1><p><a href="http://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="external">UUID</a>是128位的全局唯一标识符，通常由32字节的字符串表示。 它可以保证时间和空间的唯一性，也称为GUID，全称为：Universally Unique IDentifie。</p>
<h2 id="UUID的五种实现方法"><a href="#UUID的五种实现方法" class="headerlink" title="UUID的五种实现方法"></a>UUID的五种实现方法</h2><ul>
<li>uuid1()——基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</li>
<li>uuid2()——基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID，实际中很少用到该方法。</li>
<li>uuid3()——基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。    </li>
<li>uuid4()——基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</li>
<li>uuid5()——基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法<h2 id="使用UUID生成激活码"><a href="#使用UUID生成激活码" class="headerlink" title="使用UUID生成激活码"></a>使用UUID生成激活码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    <span class="keyword">print</span> uuid.uuid1()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出：<br><code>ebb4911e-ed1e-11e6-82ec-708bcda57790
ebb4b82e-ed1e-11e6-9f24-708bcda57790
ebb4b82f-ed1e-11e6-9d5c-708bcda57790
ebb4b830-ed1e-11e6-9f8b-708bcda57790
ebb4b831-ed1e-11e6-89d4-708bcda57790
ebb4b832-ed1e-11e6-903a-708bcda57790
ebb4b833-ed1e-11e6-9038-708bcda57790
ebb4b834-ed1e-11e6-b1dc-708bcda57790
ebb4b835-ed1e-11e6-8fb8-708bcda57790
ebb4b836-ed1e-11e6-a399-708bcda57790
ebb4b837-ed1e-11e6-a9a0-708bcda57790
ebb4b838-ed1e-11e6-8f85-708bcda57790
ebb4b839-ed1e-11e6-9ac2-708bcda57790
ebb4b83a-ed1e-11e6-8f48-708bcda57790
ebb4b83b-ed1e-11e6-b6d8-708bcda57790
ebb4b83c-ed1e-11e6-9bde-708bcda57790
ebb4b83d-ed1e-11e6-b03f-708bcda57790
ebb4b83e-ed1e-11e6-ac70-708bcda57790
ebb4b83f-ed1e-11e6-baf1-708bcda57790
ebb4b840-ed1e-11e6-a694-708bcda57790</code></p>
<h1 id="写入文件代码示例"><a href="#写入文件代码示例" class="headerlink" title="写入文件代码示例"></a>写入文件代码示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> string</div><div class="line">FIELD = string.digits + string.letters</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(n, many=<span class="number">1</span>, where=None)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCode</span><span class="params">(n)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(random.sample(FIELD, n))</div><div class="line">    gene = [getCode(n) <span class="keyword">for</span> i <span class="keyword">in</span> range(many)]</div><div class="line">    <span class="keyword">return</span> gene</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeIn</span><span class="params">(n, many, where)</span>:</span></div><div class="line">    count = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> generate(n, many):</div><div class="line">        <span class="keyword">with</span> open(where, <span class="string">"a"</span>) <span class="keyword">as</span> boom:</div><div class="line">            boom.write(str(count).rjust(<span class="number">3</span>)+<span class="string">"  "</span>+i+<span class="string">"\n"</span>)</div><div class="line">        count += <span class="number">1</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    writeIn(<span class="number">20</span>, <span class="number">200</span>, <span class="string">"coupon.txt"</span>)</div></pre></td></tr></table></figure>
<p>以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;，今天做的是第二题，使用 Python 如何生成 200 个激活码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Python练习题" scheme="https://mmmxcc.cn/tags/Python%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages + CDN全站加速</title>
    <link href="https://mmmxcc.cn/2017/02/07/Github-Pages-CDN%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F/"/>
    <id>https://mmmxcc.cn/2017/02/07/Github-Pages-CDN全站加速/</id>
    <published>2017-02-07T05:38:38.000Z</published>
    <updated>2017-02-07T05:50:20.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>常见的Pages服务有 Coding Pages和Github Pages，因为众所周知的原因，此类服务仅能放在国外，通过国内CDN加速Pages访问速度是一种不错的选择。以Coding Pages和腾讯CDN为例。</p>
</blockquote>
<p>本方法同样可以对虚拟主机进行CDN加速。</p>
<a id="more"></a>
<hr>
<p>本方法可解决以下问题：</p>
<ul>
<li>提高Pages的访问速度；</li>
<li>利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题；</li>
</ul>
<hr>
<h1 id="加速效果展示"><a href="#加速效果展示" class="headerlink" title="加速效果展示"></a>加速效果展示</h1><h2 id="不使用CDN加速"><a href="#不使用CDN加速" class="headerlink" title="不使用CDN加速"></a>不使用CDN加速</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/123752053.png" alt="不使用CDN" title="">
                </div>
                <div class="image-caption">不使用CDN</div>
            </figure>
<p>平均响应时间130ms，比我想象中要好。可能因为现在是上午11点上网的人少（?），之前我在学校测得时候动辄200ms。</p>
<h2 id="使用CDN加速"><a href="#使用CDN加速" class="headerlink" title="使用CDN加速"></a>使用CDN加速</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/123341114.png?imageMogr2/thumbnail/!60p" alt="CDN加速后" title="">
                </div>
                <div class="image-caption">CDN加速后</div>
            </figure>
<p>可以看到平均响应时间大约24.2ms，祖国山河一片绿。多环保~</p>
<h1 id="利用Pages搭建个人网站"><a href="#利用Pages搭建个人网站" class="headerlink" title="利用Pages搭建个人网站"></a>利用Pages搭建个人网站</h1><p>这一步在网上搜一下，有很多教程，在此不赘述。</p>
<h1 id="使用CDN为Pages加速"><a href="#使用CDN为Pages加速" class="headerlink" title="使用CDN为Pages加速"></a>使用CDN为Pages加速</h1><p>推荐腾讯云CDN，<a href="https://www.qcloud.com/product/cdn" target="_blank" rel="external">https://www.qcloud.com/product/cdn</a> 目前可以免费送300G流量。<br>根据服务商的要求，如Coding要求为：</p>
<blockquote>
<p><strong>在您的域名管理面板中添加 CNAME 记录指向到 pages.coding.me</strong>。</p>
</blockquote>
<h2 id="获得CNAME的IP地址"><a href="#获得CNAME的IP地址" class="headerlink" title="获得CNAME的IP地址"></a>获得CNAME的IP地址</h2><p>ping 一下 <strong>pages.coding.me</strong>，获得IP地址： 23.248.162.138，源站设置为该IP。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/140625255.png?imageMogr2/thumbnail/!80p" alt="设置源站" title="">
                </div>
                <div class="image-caption">设置源站</div>
            </figure></p>
<p>接下来，加速服务配置，默认时长都是30天。明显这个时间忒长了，我们可以设置为1天或者几个小时。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/141205144.png" alt="设置缓存逻辑" title="">
                </div>
                <div class="image-caption">设置缓存逻辑</div>
            </figure><br><strong> 点击提交 </strong>，过约5分钟会返回提示成功。点击管理进一步设置；</p>
<h2 id="配置回源host"><a href="#配置回源host" class="headerlink" title="配置回源host"></a>配置回源host</h2><p>我们可以把回源host理解为，访问<em>23.248.162.138</em>这个IP地址的服务器时，向服务器发出的url访问请求，服务器根据host头部里边的url地址，映射到内部相应访问空间去。<strong>回源host是用于CDN回源到源站时的访问域名，即http请求包包头的host字段内容。</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/151918753.png?imageMogr2/thumbnail/!80p" alt="回源host" title="">
                </div>
                <div class="image-caption">回源host</div>
            </figure></p>
<h2 id="配置域名CNAME"><a href="#配置域名CNAME" class="headerlink" title="配置域名CNAME"></a>配置域名CNAME</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/152322828.png?imageMogr2/thumbnail/!80p" alt="CNAME" title="">
                </div>
                <div class="image-caption">CNAME</div>
            </figure>
<p>为域名配置相应的CNAME，常见的是<strong>@</strong>和<strong>www</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/152658278.png?imageMogr2/thumbnail/!80p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>ping 一下自己的域名，如果PING到后缀为cdntip.com或后缀为tcdn.qq.com表示域名CNAME已生效。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/153033720.png?imageMogr2/thumbnail/!80p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>使用CDN为Pages加速，到这一步已经算结束了。但是由于使用国内CDN，使得网站在国外加载速度会慢的令人发指。</p>
<h1 id="分地区DNS"><a href="#分地区DNS" class="headerlink" title="分地区DNS"></a>分地区DNS</h1><p>国内国外设置不同CANME，国外指向 <strong>mmmwhy.github.io</strong>或者<strong>pages.coding.me</strong>（设置自己的），国内的指向刚才CDN给出的地址。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170126/153601063.png?imageMogr2/thumbnail/!80p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<hr>
<p>以上</p>
<p>通过此方法可以将pages或者国外的免费空间，速度快到令人发指的地步~<br>祝新年快乐~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常见的Pages服务有 Coding Pages和Github Pages，因为众所周知的原因，此类服务仅能放在国外，通过国内CDN加速Pages访问速度是一种不错的选择。以Coding Pages和腾讯CDN为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本方法同样可以对虚拟主机进行CDN加速。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CDN" scheme="https://mmmxcc.cn/tags/CDN/"/>
    
      <category term="Pages" scheme="https://mmmxcc.cn/tags/Pages/"/>
    
  </entry>
  
  <entry>
    <title>jupyter notebook使用帮助</title>
    <link href="https://mmmxcc.cn/2017/01/12/jupyter-notebook%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <id>https://mmmxcc.cn/2017/01/12/jupyter-notebook使用帮助/</id>
    <published>2017-01-12T12:50:52.000Z</published>
    <updated>2017-02-07T05:50:12.304Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>jupyer notebook 使用的时候常见换主题，以及换工作空间的问题。</p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="jupyter-notebook-换字体换颜色换主题"><a href="#jupyter-notebook-换字体换颜色换主题" class="headerlink" title="jupyter notebook 换字体换颜色换主题"></a>jupyter notebook 换字体换颜色换主题</h1><p>jupyter notebook自带的默认颜色实在是阳春白雪，看的多了眼睛有点累。页面的相关定义都是在CSS内完成的，我们可以通过修改CSS来达到目标。<br>但是这样实在是太累了，在<a href="https://github.com/mmmwhy/jupyter-themes" target="_blank" rel="external">Github</a>有一个<strong><a href="https://github.com/mmmwhy/jupyter-themes" target="_blank" rel="external">jupyter-themes</a></strong>工具，真的很好用，通过pip进行安装，分分钟更换成自己喜欢的主题。</p>
<h2 id="安装-jupyterthemes"><a href="#安装-jupyterthemes" class="headerlink" title="安装 jupyterthemes"></a>安装 jupyterthemes</h2><p><code>pip install jupyterthemes</code><br>通过pip安装省时省力，如果你当前pip安装速度很慢，可以考虑使用清华源，代码如下：<br><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jupyterthemes</code></p>
<h2 id="命令行格式"><a href="#命令行格式" class="headerlink" title="命令行格式"></a>命令行格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">usage: jt [-h] [-l] [-t THEME] [-f MONOFONT] [-fs MONOSIZE] [-nf NBFONT]</div><div class="line">          [-nfs NBFONTSIZE] [-tf TCFONT] [-tfs TCFONTSIZE] [-m MARGINS]</div><div class="line">          [-cursw CURSORWIDTH] [-cursc CURSORCOLOR] [-cellw CELLWIDTH]</div><div class="line">          [-lineh LINEHEIGHT] [-alt] [-vim] [-T] [-N] [-r]</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">options</th>
<th style="text-align:center">arg</th>
<th style="text-align:center">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Usage help</td>
<td style="text-align:center">-h</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">List Themes</td>
<td style="text-align:center">-l</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Theme Name to Install</td>
<td style="text-align:center">-t</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Code Font</td>
<td style="text-align:center">-f</td>
<td style="text-align:center">droidmono</td>
</tr>
<tr>
<td style="text-align:left">Code Font-Size</td>
<td style="text-align:center">-fs</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:left">Notebook Font</td>
<td style="text-align:center">-nf</td>
<td style="text-align:center">exosans</td>
</tr>
<tr>
<td style="text-align:left">Notebook Font Size</td>
<td style="text-align:center">-nfs</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:left">Text/MD Cell Font</td>
<td style="text-align:center">-tf</td>
<td style="text-align:center">loraserif</td>
</tr>
<tr>
<td style="text-align:left">Text/MD Cell Fontsize</td>
<td style="text-align:center">-tfs</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:left">Intro Page Margins</td>
<td style="text-align:center">-m</td>
<td style="text-align:center">auto</td>
</tr>
<tr>
<td style="text-align:left">Cell Width</td>
<td style="text-align:center">-cellw</td>
<td style="text-align:center">980</td>
</tr>
<tr>
<td style="text-align:left">Line Height</td>
<td style="text-align:center">-lineh</td>
<td style="text-align:center">170</td>
</tr>
<tr>
<td style="text-align:left">Cursor Width</td>
<td style="text-align:center">-cursw</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:left">Cursor Color</td>
<td style="text-align:center">-cursc</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Alt Text/MD Layout</td>
<td style="text-align:center">-alt</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Alt Prompt Layout</td>
<td style="text-align:center">-altp</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Style Vim NBExt*</td>
<td style="text-align:center">-vim</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Toolbar Visible</td>
<td style="text-align:center">-T</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Name &amp; Logo Visible</td>
<td style="text-align:center">-N</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:left">Restore Default</td>
<td style="text-align:center">-r</td>
<td style="text-align:center">–</td>
</tr>
</tbody>
</table>
<p>举个例子<br><code>jt -t oceans16 -f roboto -fs 15</code><br>意味着选择oceans16主题，roboto字体，大小为15，效果如下。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170112/204004006.png?imageMogr2/thumbnail/!60p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>恢复原始主题，重新启动Jupyter notebook，如果主题没有改变，Ctrl+F5刷新即可。<br><code># restore default themejt -r</code></p>
<h1 id="jupyter-notebook换工作空间"><a href="#jupyter-notebook换工作空间" class="headerlink" title="jupyter notebook换工作空间"></a>jupyter notebook换工作空间</h1><ul>
<li>打开 cmd 输入命令<br><code>jupyter notebook --generate-config</code><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170112/204418862.png?imageMogr2/thumbnail/!100p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>进入自己工作目录，<strong>.jupyter</strong>，打开<strong>jupyter_notebook_config.py</strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170112/204526634.png?imageMogr2/thumbnail/!100p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>ctrl+f查到<strong>c.NotebookApp.notebook_dir</strong>，<br>将这一行改为<strong>c.NotebookApp.notebook_dir = ‘自己的位置’</strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170112/204842314.png?imageMogr2/thumbnail/!100p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>启动 jupyter notebook<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170112/204957560.png?imageMogr2/thumbnail/!60p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;jupyer notebook 使用的时候常见换主题，以及换工作空间的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Jupyer" scheme="https://mmmxcc.cn/tags/Jupyer/"/>
    
  </entry>
  
  <entry>
    <title>部署在线IPyhton notebook(在线python编译器)</title>
    <link href="https://mmmxcc.cn/2016/12/31/%E9%83%A8%E7%BD%B2%E5%9C%A8%E7%BA%BFIPyhton-notebook-%E5%9C%A8%E7%BA%BFpython%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://mmmxcc.cn/2016/12/31/部署在线IPyhton-notebook-在线python编译器/</id>
    <published>2016-12-31T14:52:39.000Z</published>
    <updated>2017-02-07T05:49:43.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>jupyter notebook在数据分析时使用非常的方便，特别那优美的页面，简直让我着迷。</p>
</blockquote>
<hr>
<a id="more"></a>
<p>优点：</p>
<ul>
<li>支持的格式很多，Markdown，Latex等都支持，还有很方便的快捷键。</li>
<li>可以将代码可视化分享给其他人，<a href="https://www.continuum.io/blog/developer/jupyter-and-conda-r" target="_blank" rel="external">From notebook to slides</a></li>
<li>像一张草稿纸，可以一边通过它来进行你的思考探索过程，交互式的进行，每一步都能看到结果，也很方便查看之前的结果。<h5 id="可以到我的博客，点击左边的python在线编译试，密码是我的名字。我把《利用Python进行数据挖掘》的所有数据集和代码都放到了服务器里边2333333"><a href="#可以到我的博客，点击左边的python在线编译试，密码是我的名字。我把《利用Python进行数据挖掘》的所有数据集和代码都放到了服务器里边2333333" class="headerlink" title="可以到我的博客，点击左边的python在线编译试，密码是我的名字。我把《利用Python进行数据挖掘》的所有数据集和代码都放到了服务器里边2333333"></a>可以到<a href="https://mmmxcc.cn/">我的博客</a>，点击左边的python在线编译试，密码是我的名字。我把《利用Python进行数据挖掘》的所有数据集和代码都放到了服务器里边2333333</h5><h1 id="本地安装Jupyter"><a href="#本地安装Jupyter" class="headerlink" title="本地安装Jupyter"></a>本地安装Jupyter</h1>推荐先安装<a href="https://www.continuum.io/downloads" target="_blank" rel="external">python科学计算包ANACONDA</a>点击进入官网下载，按要求下载安装完成之后。期间会有一步提示是否加入Path，勾选加入环境变量。如果但是没有勾选，对于win事后可以手动添加环境变量。对于linux，使用<code>export PATH=~/anaconda2/bin:$PATH</code>进行添加。<br>anaconda安装完后，对于win10用户，可以看到已经成功安装Jupyter Notebook，点击即可打开食用~<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161231/212802868.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
点击之后，默认直接打开浏览器localhost:8888<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161231/213001998.png?imageMogr2/thumbnail/!100p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
用命令行也可以打开此页面，并且在打开的页面会形成<strong>.ipynb</strong>文件<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161231/213247968.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h1 id="线上部署-Jupyter-Notebook"><a href="#线上部署-Jupyter-Notebook" class="headerlink" title="线上部署 Jupyter Notebook"></a>线上部署 Jupyter Notebook</h1><p>在本地部署好了之后，其实给了我一些灵感，既然可以在浏览器运行。那么其实部署在服务器上也是可以的，大家如果看过我看过我之前的文章，就知道我对vps很感兴趣。其实在本地看到的那个localhost:8888，在外网也可以访问，只需要稍微加以设置即可。</p>
<h2 id="首先要申请虚拟机"><a href="#首先要申请虚拟机" class="headerlink" title="首先要申请虚拟机"></a>首先要申请虚拟机</h2><p>这里推荐腾讯云或者<a href="https://m.do.co/c/990a117f5061" target="_blank" rel="external">DO</a>，通过本链接注册送$10。然后再加上github的学生优惠包，可以很便宜哦。设置好之后，使用SSH连接上服务器。</p>
<h2 id="服务器下载Anaconda"><a href="#服务器下载Anaconda" class="headerlink" title="服务器下载Anaconda"></a>服务器下载Anaconda</h2><ul>
<li>如果选择国内服务器，推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="external">清华Anaconda 镜像</a>，点击进入，选择与自己服务器相符的版本。<code>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda-2.3.0-Linux-x86_64.sh</code></li>
<li>如果选择国外服务器，使用代码<code>wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh</code><br>本来想推荐科大源的，但是科大源实在是烂泥扶不上墙，目前清华源是国内比较好的了。</li>
</ul>
<h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p><code>sudo bash Miniconda-latest-Linux-x86_64.sh</code><br><em>Miniconda-latest-Linux-x86_64.sh</em>这个地方，输入自己下载的文件名称，其实只要写前几个字母，然后敲Tab，就可以自动补全了。<br>安装好时候输入<code>conda --v</code>检查一下，如果输出为conda的版本则正常。<br>如果输出<strong>conda: command not found</strong>，出现这种情况的原因是conda没有在path添加，使用<code>export PATH=~/anaconda2/bin:$PATH</code> 添加即可。</p>
<h2 id="打开Ipython-设置密码"><a href="#打开Ipython-设置密码" class="headerlink" title="打开Ipython ,设置密码"></a>打开Ipython ,设置密码</h2><p>设置过程中要设置用于远程登录的密码，把生成的密文‘sha:ce…’复制下来<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161231/223937327.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [1]: from IPython.lib import passwd</div><div class="line">In [2]: passwd()</div><div class="line">Enter password:</div><div class="line">Verify password: </div><div class="line">Out[2]: &apos;sha1:7467b73*************************3003b****&apos;</div></pre></td></tr></table></figure></p>
<h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><p>终端输入：<br><code>jupyter notebook --generate-config</code><br>这个时候在当前目录会生成一个<strong>.jupyter</strong>的隐藏文件夹，修改文件内的jupyter_notebook_config.py<br><code>vim ~/.jupyter/jupyter_notebook_config.py</code></p>
<blockquote>
<p>关于vim的常用功能：按a在光标所在位置插入内容（进入编辑模式），Esc退出编辑模式，连续按两下z，保存并退出。</p>
</blockquote>
<p>jupyter_notebook_config.py内包含以下内容，稍作修改即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c.NotebookApp.ip=&apos;*&apos; # 就是设置所有ip皆可访问</div><div class="line">c.NotebookApp.password = u&apos;sha:ce...刚才复制的那个密文&apos;</div><div class="line">c.NotebookApp.open_browser = False # 禁止自动打开浏览器</div><div class="line">c.NotebookApp.port =8888 #随便指定一个端口</div></pre></td></tr></table></figure></p>
<h2 id="启动jupyter-notebook"><a href="#启动jupyter-notebook" class="headerlink" title="启动jupyter notebook"></a>启动jupyter notebook</h2><p><code>jupyter notebook</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161231/225106541.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>此时应该可以直接从本地浏览器直接访问<em><a href="http://address_of_remote:8888" target="_blank" rel="external">http://address_of_remote:8888</a></em>就可以看到jupyter的登陆界面。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161231/224810212.png?imageMogr2/thumbnail/!80p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>如果希望不要在退出SSH命令行的时候，同时也停止jupyter notebook服务，推荐<strong>nohup </strong>，之前写过篇博客解释过<a href="https://mmmxcc.cn/2016/10/19/%E6%97%A0%E5%85%AC%E7%BD%91IP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAWeb%E7%AB%99%E7%82%B9/">nohup的作用</a><br>在线python编译器就搭建好了，是不是很洋气~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;jupyter notebook在数据分析时使用非常的方便，特别那优美的页面，简直让我着迷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="VPS" scheme="https://mmmxcc.cn/tags/VPS/"/>
    
      <category term="Jupyter" scheme="https://mmmxcc.cn/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>第一题：Python图片添加水印</title>
    <link href="https://mmmxcc.cn/2016/12/31/%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9APython%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/"/>
    <id>https://mmmxcc.cn/2016/12/31/第一题：Python图片添加水印/</id>
    <published>2016-12-31T04:16:16.000Z</published>
    <updated>2017-02-10T08:36:00.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>题目来自：<a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">Python 练习册</a>，今天做的是第一题，将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 </p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="添加文字水印"><a href="#添加文字水印" class="headerlink" title="添加文字水印"></a>添加文字水印</h1><p>初始图像<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161216/122038769.png?imageMogr2/thumbnail/!80p" alt="我的头像" title="">
                </div>
                <div class="image-caption">我的头像</div>
            </figure></p>
<h2 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(img)</span>:</span></div><div class="line">    draw = ImageDraw.Draw(img)</div><div class="line">    myfont = ImageFont.truetype(<span class="string">'C:/windows/fonts/Arial.ttf'</span>, size=<span class="number">40</span>)</div><div class="line">    fillcolor = <span class="string">"#ff0000"</span></div><div class="line">    width, height = img.size</div><div class="line">    draw.text((width<span class="number">-50</span>, <span class="number">5</span>), <span class="string">'99'</span>, font=myfont, fill=fillcolor)</div><div class="line">    img.save(<span class="string">'result.jpg'</span>,<span class="string">'jpeg'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    image = Image.open(<span class="string">'F:/Picture/touxiang.jpg'</span>)</div><div class="line">    add_num(image)</div><div class="line">    image.show()</div></pre></td></tr></table></figure>
<h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><ul>
<li><code>from PIL import Image, ImageDraw, ImageFont</code> 导入PIL图像处理库</li>
<li><code>draw = ImageDraw.Draw(img)</code>，查了一下ImageDraw作用：</li>
</ul>
<p><strong>创建绘画对象</strong> ImageDraw module creates drawing surface for image<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import Image, ImageDraw</div><div class="line">im = Image.open(“vacation.jpeg") </div><div class="line">drawSurface = ImageDraw.Draw(im)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>draw.text((width-50, 5), &#39;99&#39;, font=myfont, fill=fillcolor)</code> 第一个括号填写的是位置，表示在x轴在width-50，y轴在5的位置加入文字，也就是右上角的意思。</li>
</ul>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161216/115246388.jpg?imageMogr2/thumbnail/!80p" alt="文字水印" title="">
                </div>
                <div class="image-caption">文字水印</div>
            </figure>
<h1 id="添加图片水印"><a href="#添加图片水印" class="headerlink" title="添加图片水印"></a>添加图片水印</h1><h2 id="Python代码-1"><a href="#Python代码-1" class="headerlink" title="Python代码"></a>Python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(im,mark)</span>:</span></div><div class="line">    layer = Image.new(<span class="string">'RGBA'</span>, im.size, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">    layer.paste(mark, (im.size[<span class="number">0</span>] - <span class="number">150</span>, im.size[<span class="number">1</span>] - <span class="number">150</span>))</div><div class="line">    out = Image.composite(layer, im, layer)</div><div class="line">    out.save(<span class="string">'result.jpg'</span>,<span class="string">'jpeg'</span>)</div><div class="line">    out.show()</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    image = Image.open(<span class="string">'F:/Picture/touxiang.jpg'</span>)</div><div class="line">    mark = Image.open(<span class="string">'F:/Picture/1022.png'</span>)</div><div class="line">    add_num(image,mark)</div></pre></td></tr></table></figure>
<h2 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h2><ul>
<li><code>Image.composite(layer, im, layer)</code> 解释一下<code>Image.composite()</code>的意思<br>使用案例<br><code>Image.composite(image1, image2, mask) =&gt; image</code><br>使用遮罩（mask）作为alpha，通过在两个图像之间进行插值来创建一个新图像。遮罩图像的模式可以是“1”，“L”，或者“RGBA”。所有的图像的大小必须有相同。 </li>
<li><code>out.save(&#39;result.jpg&#39;,&#39;jpeg&#39;)</code>，对图片进行保存，设置文件名和文件格式。</li>
</ul>
<h2 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161216/115917853.jpg?imageMogr2/thumbnail/!80p" alt="图片水印" title="">
                </div>
                <div class="image-caption">图片水印</div>
            </figure>
<p>参考文章<a href="http://www.cnblogs.com/wei-li/archive/2012/04/19/2456725.html" target="_blank" rel="external"><a href="http://www.cnblogs.com/wei-li/archive/2012/04/19/2456725.html" target="_blank" rel="external">Python图像处理库：PIL中Image,ImageDraw等基本模块介绍</a></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来自：&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;Python 练习册&lt;/a&gt;，今天做的是第一题，将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Python练习题" scheme="https://mmmxcc.cn/tags/Python%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册</title>
    <link href="https://mmmxcc.cn/2016/12/31/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    <id>https://mmmxcc.cn/2016/12/31/Python练习册/</id>
    <published>2016-12-31T03:35:04.000Z</published>
    <updated>2017-02-10T08:45:07.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/mmmwhy/python-camp" target="_blank" rel="external">参考代码</a>一同附上，分析过程见<a href="https://mmmxcc.cn/tags/Python%E7%BB%83%E4%B9%A0%E9%A2%98/">李飞阳</a>，请多指教。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="一、基础问题"><a href="#一、基础问题" class="headerlink" title="一、基础问题"></a>一、基础问题</h1><p><strong>题目1.1：</strong><a href="https://mmmxcc.cn/2016/12/16/%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9APython%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/">图片加水印</a>，类似于微信未读信息数量那种提示效果</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161216/115246388.jpg?imageMogr2/thumbnail/!80p" alt="头像" title="">
                </div>
                <div class="image-caption">头像</div>
            </figure>
<p><strong>题目1.2：</strong><a href="https://mmmxcc.cn/2017/02/07/%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8-Python-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-200-%E4%B8%AA%E6%BF%80%E6%B4%BB%E7%A0%81/">使用 Python 如何生成 200 个激活码（或者优惠券）</a></p>
<p><strong>题目1.3</strong>：<a href="https://mmmxcc.cn/2017/02/10/%E7%AC%AC%E4%B8%89%E9%A2%98%EF%BC%9A%E5%B0%86200%E4%B8%AA%E6%BF%80%E6%B4%BB%E7%A0%81%E4%BF%9D%E5%AD%98%E5%88%B0-MySQL/">将 0002 题生成的 200 个激活码（或者优惠券）保存到 <strong>MySQL</strong> 关系型数据库中。 </a></p>
<p><strong>题目1.4：</strong>任一个英文的纯文本文件，统计其中的单词出现的个数。</p>
<p><strong>题目1.5：</strong>你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。</p>
<p><strong>题目1.6：</strong>使用 Python 生成类似于下图中的<strong>字母验证码图片</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/164221438.png" alt="验证码" title="">
                </div>
                <div class="image-caption">验证码</div>
            </figure>
<ul>
<li><a href="http://stackoverflow.com/questions/2823316/generate-a-random-letter-in-python" target="_blank" rel="external">阅读资料</a> </li>
</ul>
<p><strong>题目1.7：</strong> 敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。</p>
<pre><code>北京
程序员
公务员
领导
牛比
牛逼
你娘
你妈
love
sex
jiangge
</code></pre><p><strong>题目1.8：</strong> 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</p>
<pre><code>{
    &quot;1&quot;:[&quot;张三&quot;,150,120,100],
    &quot;2&quot;:[&quot;李四&quot;,90,99,95],
    &quot;3&quot;:[&quot;王五&quot;,60,66,68]
}
</code></pre><p>请将上述内容写到 student.xls 文件中，如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/164341562.png" alt="student.xls" title="">
                </div>
                <div class="image-caption">student.xls</div>
            </figure>
<ul>
<li><a href="http://www.cnblogs.com/skynet/archive/2013/05/06/3063245.html" target="_blank" rel="external">阅读资料</a> 腾讯游戏开发 XML 和 Excel 内容相互转换</li>
</ul>
<p><strong>题目1.9：</strong> 通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。</p>
<ul>
<li><p>阅读资料 <a href="http://zhuoqiang.me/password-storage-and-python-example.html" target="_blank" rel="external">用户密码的存储与 Python 示例</a></p>
</li>
<li><p>阅读资料 <a href="http://www.pythoncentral.io/hashing-strings-with-python/" target="_blank" rel="external">Hashing Strings with Python</a></p>
</li>
<li><p>阅读资料 <a href="http://stackoverflow.com/questions/2572099/pythons-safest-method-to-store-and-retrieve-passwords-from-a-database" target="_blank" rel="external">Python’s safest method to store and retrieve passwords from a database</a></p>
</li>
</ul>
<hr>
<h1 id="二、数据分析"><a href="#二、数据分析" class="headerlink" title="二、数据分析"></a>二、数据分析</h1><p><strong>题目2.1：</strong>你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</p>
<p><strong>题目2.2：</strong>有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。</p>
<p><strong>题目2.3：</strong> <a href="http://iservice.10010.com/index_.html" target="_blank" rel="external">登陆中国联通网上营业厅</a> 后选择「自助服务」 –&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。</p>
<hr>
<h1 id="三、爬虫方面"><a href="#三、爬虫方面" class="headerlink" title="三、爬虫方面"></a>三、爬虫方面</h1><p><strong>题目3.1：</strong>一个HTML文件，找出里面的<strong>正文</strong>。</p>
<p><strong>题目3.2：</strong><a href="https://mmmxcc.cn/2016/12/13/%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/">一个HTML文件，找出里面的<strong>链接</strong>。</a></p>
<p><strong>题目3.3：</strong> 用 Python 写一个爬图片的程序，可以参考<a href="https://mmmxcc.cn/2016/12/15/Python%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87%EF%BC%88%E4%BD%BF%E7%94%A8urllib2%EF%BC%89/">Python爬取图片（使用urllib2）</a>，如果出现难题，可以尝试<a href="https://mmmxcc.cn/2016/12/29/%E4%BD%BF%E7%94%A8Python-selenium%E5%A4%84%E7%90%86%E9%A1%B5%E9%9D%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/">selenium自动化测试工具</a></p>
<hr>
<h1 id="四、Web问题"><a href="#四、Web问题" class="headerlink" title="四、Web问题"></a>四、Web问题</h1><p><strong>题目4.1：</strong> 使用 Python 的 Web 框架，做一个 Web 版本 留言簿 应用。</p>
<p><a href="http://v2ex.com/t/151643#reply53" target="_blank" rel="external">阅读资料：Python 有哪些 Web 框架</a></p>
<ul>
<li><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/164432170.png" alt="留言簿参考" title="">
                </div>
                <div class="image-caption">留言簿参考</div>
            </figure>
</li>
</ul>
<p><strong>题目4.2：</strong> 使用 Python 的 Web 框架，做一个 Web 版本 TodoList 应用。</p>
<ul>
<li><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20170210/164451954.png" alt="SpringSide" title="">
                </div>
                <div class="image-caption">SpringSide</div>
            </figure>
</li>
</ul>
<p><strong>题目来自 <a href="https://github.com/Yixiaohan" target="_blank" rel="external">易枭寒的Github</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mmmwhy/python-camp&quot;&gt;参考代码&lt;/a&gt;一同附上，分析过程见&lt;a href=&quot;https://mmmxcc.cn/tags/Python%E7%BB%83%E4%B9%A0%E9%A2%98/&quot;&gt;李飞阳&lt;/a&gt;，请多指教。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Python练习题" scheme="https://mmmxcc.cn/tags/Python%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>使用Python selenium处理页面延迟加载问题</title>
    <link href="https://mmmxcc.cn/2016/12/29/%E4%BD%BF%E7%94%A8Python-selenium%E5%A4%84%E7%90%86%E9%A1%B5%E9%9D%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <id>https://mmmxcc.cn/2016/12/29/使用Python-selenium处理页面延迟加载问题/</id>
    <published>2016-12-29T08:06:43.000Z</published>
    <updated>2017-02-07T05:49:34.921Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用python爬取数据的时候，碰到了一个非常无语的问题。有个网站，在输入url进入页面之后，会强制加载一段动画，之后才显示正确内容。后来发现了selenium这个神器，不过还是折腾了我好久。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="用selenium-设置浏览器等待时间"><a href="#用selenium-设置浏览器等待时间" class="headerlink" title="用selenium 设置浏览器等待时间"></a>用selenium 设置浏览器等待时间</h1><p>很多人问，这个下拉框定位不到、那个弹出框定位不到…各种定位不到，其实大多数情况下就是两种问题：1 有frame，2 没有加等待。殊不知，你的代码运行速度是什么量级的，而浏览器加载渲染速度又是什么量级的，就好比闪电侠和奥特曼约好去打怪兽，然后闪电侠打完回来之后问奥特曼你为啥还在穿鞋没出门？奥特曼分分中内心一万只羊驼飞过，欺负哥速度慢，哥不跟<br>运行需要两个前提，每个都不好搞。。</p>
<ul>
<li>首先需要安装<strong>selenium </strong>，<br>推荐使用pip安装,<code>pip install selenium</code><br>或者直接下载selenium包:<a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="external">https://pypi.python.org/pypi/selenium</a>  解压，cmd进入目录:<code>python setup.py install</code></li>
<li>接下来安装<strong> ChromeDriver</strong><br>推荐在这里 <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">https://sites.google.com/a/chromium.org/chromedriver/downloads</a> 下载，然后放在Chrome浏览器目录内，配置Path环境变量为形如 <em>XXGoogle\Chrome\Application</em>的形式<br>你玩了，抛个异常撂挑子了。</li>
</ul>
<p>最简单粗暴的一种办法就是强制等待sleep(xx)，强制让闪电侠等xx时间，不管凹凸曼能不能跟上速度，还是已经提前到了，都必须等xx时间。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line">driver = webdriver.Chrome()</div><div class="line">driver.get(<span class="string">'https://mmmxcc.cn'</span>)</div><div class="line">sleep(<span class="number">3</span>) <span class="comment"># 强制等待3秒再执行下一步</span></div><div class="line"><span class="keyword">print</span> driver.title</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<h1 id="结合selenium使用Xpath获得所需信息"><a href="#结合selenium使用Xpath获得所需信息" class="headerlink" title="结合selenium使用Xpath获得所需信息"></a>结合selenium使用Xpath获得所需信息</h1><ul>
<li>需要注意的是，selenium内find_elements的方法有很多种，xpath表达式的要求很严格，所以可以试试<strong>find_elements_id</strong>等方法。</li>
<li>Xpath表达式可以检测文字中是否包含某文字，以此为标准过滤。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161229/170825303.png" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></li>
<li>Xpath表达式支持and 和 or。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_from</span><span class="params">(browser)</span>:</span></div><div class="line">    links = browser.find_elements_by_xpath(<span class="string">"//p[contains(text(), '出处') or contains(text(), '组成') or contains(text(), '组成') or contains(text(), '主治') or contains(text(), '用法')] "</span>)</div><div class="line">    print(browser.title)</div><div class="line">    <span class="keyword">return</span> [link.text <span class="keyword">for</span> link <span class="keyword">in</span> links]</div></pre></td></tr></table></figure>
<h1 id="中文输入输出问题"><a href="#中文输入输出问题" class="headerlink" title="中文输入输出问题"></a>中文输入输出问题</h1><ul>
<li>send_keys() 不能正确的输入关键字，在中文前边加一个u即可，比如<code>elem.send_keys(u&#39;你好哇&#39;)</code></li>
<li>不能正确的输出中文，<code>print (&#39;\n&#39;.join(extract_from(browser)))</code><br>以上两个问题都跟python2的特性有关，升级至3之后应当不会出现此类问题。</li>
</ul>
<p>写了一个小demo，解释中文输入输出问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(key)</span>:</span></div><div class="line">    elem = browser.find_element_by_xpath(<span class="string">"//input[@id='kw']"</span>)</div><div class="line">    elem.send_keys(key)</div><div class="line">    elem.send_keys(Keys.RETURN)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_from</span><span class="params">(browser)</span>:</span></div><div class="line">    links = browser.find_elements_by_xpath(<span class="string">"//div[contains(text(),'李银河')]"</span>)</div><div class="line">    <span class="keyword">return</span> [link.text <span class="keyword">for</span> link <span class="keyword">in</span> links]</div><div class="line">key = <span class="string">u"你好哇"</span></div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.get(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">search(key)</div><div class="line"><span class="keyword">print</span> (<span class="string">'\n'</span>.join(extract_from(browser)))</div><div class="line">browser.close()</div></pre></td></tr></table></figure></p>
<p>运行结果见下，可以抽取出对应文字。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161229/171126089.png" alt="运行结果" title="">
                </div>
                <div class="image-caption">运行结果</div>
            </figure></p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(key)</span>:</span></div><div class="line">    elem = browser.find_element_by_xpath(<span class="string">"//input[@id='simple_search_filed']"</span>)</div><div class="line">    elem.send_keys(key)</div><div class="line">    elem.send_keys(Keys.RETURN)</div><div class="line">    time.sleep(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_from</span><span class="params">(browser)</span>:</span></div><div class="line">    links = browser.find_elements_by_xpath(<span class="string">"//p[contains(text(), '出处') or contains(text(), '组成') or contains(text(), '组成') or contains(text(), '主治') or contains(text(), '用法')] "</span>)</div><div class="line">    print(browser.title)</div><div class="line">    <span class="keyword">return</span> [link.text <span class="keyword">for</span> link <span class="keyword">in</span> links]</div><div class="line"></div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line">html = requests.get(<span class="string">"http://www.zk120.com/fang/"</span>)</div><div class="line">html.encoding = <span class="string">'utf-8'</span></div><div class="line">selector = etree.HTML(html.text)</div><div class="line">content = selector.xpath(<span class="string">"//ul/li/a/span[@class='free_icon_r']/../@href"</span>)</div><div class="line"><span class="keyword">for</span> imgurl <span class="keyword">in</span> content:</div><div class="line">    imgurl = <span class="string">"http://www.zk120.com"</span> +imgurl</div><div class="line">    browser = webdriver.Chrome()</div><div class="line">    browser.get(imgurl)</div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">print</span> (<span class="string">'\n'</span>.join(extract_from(browser)))</div><div class="line">    print(<span class="string">"------------"</span>)</div><div class="line">    browser.close()</div></pre></td></tr></table></figure>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>在搜索资料的时候，同时发现了一个非常好的示例代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_data</span><span class="params">(browser)</span>:</span></div><div class="line">    links = browser.find_elements_by_xpath(<span class="string">'//i[@class="RecordStats"]/a'</span>)</div><div class="line">    <span class="keyword">return</span> [link.get_attribute(<span class="string">'href'</span>) <span class="keyword">for</span> link <span class="keyword">in</span> links]</div><div class="line"></div><div class="line"></div><div class="line">browser = webdriver.Firefox()</div><div class="line">browser.get(<span class="string">"http://www.scba.gov.ar/jurisprudencia/Navbar.asp?Busca=Fallos+Completos&amp;SearchString=Inconstitucionalidad"</span>)</div><div class="line"></div><div class="line"><span class="comment"># get max pages</span></div><div class="line">element = WebDriverWait(browser, <span class="number">10</span>).until(EC.presence_of_element_located((By.XPATH, <span class="string">"//p[@class='c'][last()]"</span>)))</div><div class="line">max_pages = int(re.search(<span class="string">r'\d+ de (\d+)'</span>, element.text).group(<span class="number">1</span>), re.UNICODE)</div><div class="line"></div><div class="line"><span class="comment"># extract from the current (1) page</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Page 1"</span></div><div class="line"><span class="keyword">print</span> extract_data(browser)</div><div class="line"></div><div class="line"><span class="comment"># loop over the rest of the pages</span></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> xrange(<span class="number">2</span>, max_pages + <span class="number">1</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"Page %d"</span> % page</div><div class="line"></div><div class="line">    next_page = browser.find_element_by_xpath(<span class="string">"//table[last()]//td[last()]/a"</span>).click()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> extract_data(browser)</div><div class="line">    <span class="keyword">print</span> <span class="string">"-----"</span></div></pre></td></tr></table></figure>
<p>这个地方真的花费了我好大的精力啊，让人头疼。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用python爬取数据的时候，碰到了一个非常无语的问题。有个网站，在输入url进入页面之后，会强制加载一段动画，之后才显示正确内容。后来发现了selenium这个神器，不过还是折腾了我好久。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="https://mmmxcc.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Xpath" scheme="https://mmmxcc.cn/tags/Xpath/"/>
    
      <category term="selenium" scheme="https://mmmxcc.cn/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>牛顿迭代法计算平方根(Java,Python实现)</title>
    <link href="https://mmmxcc.cn/2016/12/28/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E8%AE%A1%E7%AE%97%E5%B9%B3%E6%96%B9%E6%A0%B9-Java-Python%E5%AE%9E%E7%8E%B0/"/>
    <id>https://mmmxcc.cn/2016/12/28/牛顿迭代法计算平方根-Java-Python实现/</id>
    <published>2016-12-28T08:33:55.000Z</published>
    <updated>2017-02-07T05:49:58.104Z</updated>
    
    <content type="html"><![CDATA[<p>牛顿法的作用是使用迭代的方法来求解函数方程的根。简单地说，牛顿法就是不断求取切线的过程。</p>
<hr>
<a id="more"></a>
<h1 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h1><p>假设c为原数，t为c的根数。</p>
<p>$$ t^2 \quad = \quad c$$<br>$$2t^2 \quad = \quad c + \quad t^2$$<br>$$2t \quad = \quad \frac{c}{t}+  \quad t$$<br>$$t  \quad  =  \quad \frac{\frac{c}{t}  +  t}{2.0}$$</p>
<h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span> <span class="params">(<span class="keyword">double</span> c)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(c&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> Double.NaN;</div><div class="line">		<span class="keyword">double</span> err = <span class="number">1e-15</span>;</div><div class="line">		<span class="keyword">double</span> t = c;</div><div class="line">		<span class="keyword">while</span>(Math.abs(t-c/t)&gt;err)</div><div class="line">			t = (c/t+t)/<span class="number">2.0</span>;</div><div class="line">		<span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">double</span> a = sqrt(sc.nextDouble());		</div><div class="line">		System.out.println(a);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">c = input()</div><div class="line">err = <span class="number">1e-15</span></div><div class="line">t = c</div><div class="line"><span class="keyword">while</span> abs(t - c/t)&gt;err:</div><div class="line">    t = (c/t+t)/<span class="number">2.0</span></div><div class="line">print(t)</div></pre></td></tr></table></figure>
<blockquote>
<p>Python代码真心简洁啊</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;牛顿法的作用是使用迭代的方法来求解函数方程的根。简单地说，牛顿法就是不断求取切线的过程。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Algorithms" scheme="https://mmmxcc.cn/tags/Algorithms/"/>
    
      <category term="Java" scheme="https://mmmxcc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LaTex 编辑公式</title>
    <link href="https://mmmxcc.cn/2016/12/28/LaTex-%E7%BC%96%E8%BE%91%E5%85%AC%E5%BC%8F/"/>
    <id>https://mmmxcc.cn/2016/12/28/LaTex-编辑公式/</id>
    <published>2016-12-28T07:21:21.000Z</published>
    <updated>2017-02-07T05:49:24.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 在计算机直接输入数学公式是一件棘手的事情，我一般是用一个专业的数学工具MathType，但最近在使用Markdown写作，遂产生念头用LaTex输入公式。发现目前网上的语法介绍往往不够全面，于是自己写了一份。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="LaTex-公式"><a href="#LaTex-公式" class="headerlink" title="LaTex 公式"></a>LaTex 公式</h1><h2 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h2><ul>
<li>使用单 <strong>$</strong> 围住表达式，居左展示。</li>
<li>使用双 <strong>$$</strong> 围住表达式，可以居中显示。</li>
</ul>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>当前环境标准字体宽度为 M</p>
<ul>
<li>两个quad空格    <strong>a \qquad b</strong> 两个m的宽度<br><code>$$ C_1 \qquad C_2 $$</code><br>$$ C_1 \qquad C_2 $$</li>
<li>quad空格    <strong>a \quad b</strong>    一个m的宽度<br><code>$$ C_1 \quad C_2 $$</code><br>$$ C_1 \quad C_2 $$</li>
<li>大空格    <strong>a\ b</strong>        1/3m宽度<br><code>$$ C_1 \ C_2 $$</code><br>$$ C_1 \ C_2 $$</li>
<li>中等空格    <strong>C_1\;C_2</strong> 2/7m宽度<br><code>$$C_1\;C_2$$</code><br>$$C_1\;C_2$$</li>
<li>小空格    <strong>C_1\,C_2</strong> 1/6m宽度<br><code>$$C_1\,C_2$$</code><br>$$C_1\,C_2$$</li>
<li>没有空格    <strong>C_1C_2</strong><br><code>$$C_1C_2$$</code><br>$$C_1C_2$$</li>
<li>紧贴    <strong>C_1!C_2</strong>        缩进1/6m宽度<br><code>$$C_1\!C_2$$</code><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161228/153631309.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><ul>
<li>上标符号 <strong>^</strong><br><code>$$ c_{1}^{2}=a^{2}+b^{2} $$</code><br>$$ c_{1}^{2}=a^{2}+b^{2} $$</li>
<li>下标符号<strong>_</strong><br><code>$$C_{m,n}$$</code><br>$$C_{m,n}$$</li>
</ul>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p><code>$$\lambda,\xi,\pi,\mu,\Phi,\Omega,\alpha, \beta, \gamma,\Gamma, \Delta $$</code><br>$$\lambda,\xi,\pi,\mu,\Phi,\Omega,\alpha, \beta, \gamma,\Gamma, \Delta $$</p>
<h2 id="值比较符"><a href="#值比较符" class="headerlink" title="值比较符"></a>值比较符</h2><ul>
<li>大于等于小于，使用正常<strong>&gt;,&lt;,=</strong>即可</li>
<li>大于等于使用 <strong>\geq</strong><br><code>$$e^{x^2} \geq {e^x}^2$$</code><br>$$e^{x^2} \geq {e^x}^2$$</li>
<li>小于等于使用<strong>\leq</strong><br><code>$$e^{x^2} \leq {e^x}^2$$</code><br>$$e^{x^2} \leq {e^x}^2$$</li>
<li>不等于使用<strong>neq</strong><br><code>$$e^{x^2} \neq {e^x}^2$$</code><br>$$e^{x^2} \neq {e^x}^2$$</li>
</ul>
<h2 id="平方根"><a href="#平方根" class="headerlink" title="平方根"></a>平方根</h2><p>使用<strong>\sqrt</strong>或 <strong>\surd</strong><br><code>$$\sqrt{x+y}$$</code><br>$$\sqrt{x+y}$$</p>
<h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><p>使用 <strong>\overline,\underline</strong><br><code>$$\overline{m+n} \quad \underline{m+n}$$</code><br>$$\overline{m+n} \quad \underline{m+n}$$</p>
<h2 id="水平括号"><a href="#水平括号" class="headerlink" title="水平括号"></a>水平括号</h2><p>使用<strong>\overbrace 和 \underbrace</strong><br><code>$$ \underbrace{a+b+\cdots+z}_{26}$$</code><br>$$ \underbrace{a+b+\cdots+z}_{26}$$</p>
<h2 id="重音号"><a href="#重音号" class="headerlink" title="重音号"></a>重音号</h2><p>使用<strong>\widetilde 和 \widehat</strong><br>$$y’=3\widetilde a+4\widehat b$$</p>
<h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>使用<strong>\overrightarrow 和 \overleftarrow</strong><br><code>$$\overrightarrow {AC} = \overrightarrow {AB} +\overrightarrow {BC} $$</code><br>$$\overrightarrow {AC} = \overleftarrow {AB} +\overrightarrow {BC} $$ </p>
<h2 id="圆点"><a href="#圆点" class="headerlink" title="圆点"></a>圆点</h2><p>使用<strong>\cdot, \cdots,\vdots,\ddot</strong><br><code>$$ a \vdots =b \cdot c \cdots d  \ddot  e$$</code><br>$$ a \vdots =b \cdot c \cdots d  \ddot  e$$ </p>
<h2 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h2><p>\arccos \cos \csc \arcsin \cosh \deg \arctan \cot \det \arg \coth \dim \sinh \sup \tan</p>
<p>[\lim_{x \rightarrow 0} \frac{\sin x}{x}=1]</p>
<p>\exp \ker \limsup \min \gcd \lg \ln \Pr \hom \lim \log \sec \inf \liminf \max \sin </p>
<p>\tanh</p>
<p><code>$$lim_{x \rightarrow 0} \frac{\sin x}{x}=1$$</code><br>$$lim_{x \rightarrow 0} \frac{\sin x}{x}=1$$</p>
<h2 id="数学符"><a href="#数学符" class="headerlink" title="数学符"></a>数学符</h2><p><strong>\mathbf</strong><br><code>$$ x^{2} \geq 0\qquad \textrm{for all }x\in\mathbf{R} $$</code><br>$$ x^{2} \geq 0\qquad \textrm{for all }x\in\mathbf{R} $$</p>
<h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><p><strong>直接输入或者\frac{}{} </strong></p>
<ul>
<li><code>$$\sin \alpha = \frac{a}{c} $$</code><br>$$\sin \alpha = \frac{a}{c} $$</li>
<li><code>$$x^{1/2} $$</code><br>$$x^{1/2} $$</li>
</ul>
<h2 id="二项系数"><a href="#二项系数" class="headerlink" title="二项系数"></a>二项系数</h2><p><strong>{… \choose …} 或 {… \atop …}。第二个命令与第一个命令的输出相同,只是没有括号。</strong><br><code>$${n\choose m} \qquad {x\atop y+2}$$</code><br>$${n\choose m} \qquad {x\atop y+2}$$</p>
<h2 id="前缀符号"><a href="#前缀符号" class="headerlink" title="前缀符号"></a>前缀符号</h2><p><strong>\int,\sum,\prod</strong></p>
<ul>
<li><p><code>$$ {\int_{0}^{\frac{\pi}{2}}} $$</code><br>$$ {\int_{0}^{\frac{\pi}{2}}} $$</p>
</li>
<li><p><code>$$ \sum_{i=1}^{n}$$</code><br>$$ \sum_{i=1}^{n}$$</p>
</li>
<li><p><code>$$\prod_\epsilon$$</code><br>$$\prod_\epsilon$$</p>
</li>
</ul>
<h2 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h2><p><strong>有时保留字需要加入\来进行转义</strong><br><code>$${a,b,c}\neq\{a,b,c\}$$</code><br>$${a,b,c}\neq{a,b,c}$$</p>
<h2 id="括号层次"><a href="#括号层次" class="headerlink" title="括号层次"></a>括号层次</h2><ul>
<li>正确的括号大小\left和\right。如果将命令 \left 放在开分隔符前,TEX会自动决定分隔符的正确大 小。注意必须用对应的右分隔符 \right 来关闭每一个左分隔符 \left,并 且只有当这两个分隔符排在同一行时大小才会被正确确定。<strong>我们可以看到右式没有采用\left形式，不能正确确定括号大小</strong><br><code>$$ 1+\left(\frac {1}{1-x^2}\right) ^3 \qquad 1+(\frac {1}{1-x^2}) ^3$$</code><br>$$ 1+\left(\frac {1}{1-x^2}\right) ^3 \qquad 1+(\frac {1}{1-x^2}) ^3$$ </li>
</ul>
<p>另外也可以手工指出括号大小，使用\big,\Big,\bigg,\Bigg。</p>
<ul>
<li><code>$$ \Big( (x+y) (x-y) \Big)^{2} $$</code><br>$$ \Big( (x+y) (x-y) \Big)^{2} $$</li>
<li><code>$$\big(\Big(\bigg(\Bigg($$</code><br>$$\big(\Big(\bigg(\Bigg($$</li>
<li><code>$$\big\}\Big\}\bigg\}\Bigg\} $$</code><br>$$\big}\Big}\bigg}\Bigg} $$</li>
<li><code>$$\big\|\Big\|\bigg\|\Bigg\| $$</code><br>$$\big|\Big|\bigg|\Bigg| $$</li>
</ul>
<h2 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h2><p>使用array命令，并\命令来分行。注意转义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$$\mathbf&#123;X&#125; =</div><div class="line">	\left( \begin&#123;array&#125;&#123;ccc&#125;</div><div class="line">	x_&#123;11&#125; &amp; x_&#123;12&#125; &amp; \ldots \\\</div><div class="line">	x_&#123;21&#125; &amp; x_&#123;22&#125; &amp; \ldots \\\</div><div class="line">	\vdots &amp; \vdots &amp; \ddots</div><div class="line">	\end&#123;array&#125; \right) $$</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161228/153602468.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 在计算机直接输入数学公式是一件棘手的事情，我一般是用一个专业的数学工具MathType，但最近在使用Markdown写作，遂产生念头用LaTex输入公式。发现目前网上的语法介绍往往不够全面，于是自己写了一份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="LaTex" scheme="https://mmmxcc.cn/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>Nginx环境下配置HTTPS</title>
    <link href="https://mmmxcc.cn/2016/12/18/Nginx%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AEHTTPS/"/>
    <id>https://mmmxcc.cn/2016/12/18/Nginx环境下配置HTTPS/</id>
    <published>2016-12-18T08:47:29.000Z</published>
    <updated>2017-02-07T05:49:29.639Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>现在，你应该能在访问<a href="https://mmmxcc.cn">https://mmmxcc.cn</a> 的时候，在地址栏里看到一个漂亮的小绿锁<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3326314-809c3f4f6b7a83d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>作为肤浅的人，为了这么洋气的小绿锁也要上HTTPS~</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="申请免费SSL证书"><a href="#申请免费SSL证书" class="headerlink" title="申请免费SSL证书"></a>申请免费SSL证书</h1><p>普通的SSL证书动辄好几千，简直令人发指。不过别担心，我找到了3个免费申请HTTPS证书的方式。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161218/161515528.png?imageMogr2/thumbnail/!80p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<ul>
<li><strong>StartSSL也免费提供了一个证书（纯英文）</strong><br>申请地址：<a href="https://www.startssl.com/Account?r=L1ZhbGlkYXRl" target="_blank" rel="external">https://www.startssl.com/Account?r=L1ZhbGlkYXRl</a></li>
<li>阿里云免费提供的证书<br><a href="https://common-buy.aliyun.com/?spm=5176.7968328.231195.3.Vh92u7&amp;commodityCode=cas#/buy" target="_blank" rel="external">https://common-buy.aliyun.com/?spm=5176.7968328.231195.3.Vh92u7&amp;commodityCode=cas#/buy</a><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161218/162129508.png?imageMogr2/thumbnail/!80p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>腾讯云免费申请<br><a href="https://console.qcloud.com/ssl" target="_blank" rel="external">https://console.qcloud.com/ssl</a><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3326314-f86b2f0ec2e121b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<p>获得证书之后，下载至本地。</p>
<h1 id="VPS上安装SSL证书"><a href="#VPS上安装SSL证书" class="headerlink" title="VPS上安装SSL证书"></a>VPS上安装SSL证书</h1><p><strong>以Nginx 为例</strong></p>
<h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>Nginx文件夹内获得SSL证书文件 1_www.domain.com_bundle.crt 和私钥文件 2_www.domain.com.key,</p>
<p>1_www.domain.com_bundle.crt 文件包括两段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,<br>2_www.domain.com.key 文件包括一段私钥代码“—–BEGIN RSA PRIVATE KEY—–”和“—–END RSA PRIVATE KEY—–”。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3326314-47e83ff91ca63910.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="上传和部署SSL证书"><a href="#上传和部署SSL证书" class="headerlink" title="上传和部署SSL证书"></a>上传和部署SSL证书</h2><p>将域名 www.domain.com 的证书文件1_www.domain.com_bundle.crt 、私钥文件2_www.domain.com.key保存到同一个目录，例如/usr/local/nginx/conf目录下。更新Nginx根目录下 conf/nginx.conf 文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 443;</div><div class="line">        server_name www.domain.com; #填写绑定证书的域名</div><div class="line">        ssl on;</div><div class="line">        ssl_certificate 1_www.domain.com_bundle.crt;</div><div class="line">        ssl_certificate_key 2_www.domain.com.key;</div><div class="line">        ssl_session_timeout 5m;</div><div class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置</div><div class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</div><div class="line">        ssl_prefer_server_ciphers on;</div><div class="line">        location / &#123;</div><div class="line">            root   html; #站点目录</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:left">配置文件参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">listen 443</td>
<td style="text-align:left">SSL访问端口号为443</td>
</tr>
<tr>
<td style="text-align:left">ssl on</td>
<td style="text-align:left">启用SSL功能</td>
</tr>
<tr>
<td style="text-align:left">ssl_certificate</td>
<td style="text-align:left">证书文件</td>
</tr>
<tr>
<td style="text-align:left">ssl_certificate_key</td>
<td style="text-align:left">私钥文件</td>
</tr>
<tr>
<td style="text-align:left">ssl_protocols</td>
<td style="text-align:left">使用的协议</td>
</tr>
<tr>
<td style="text-align:left">ssl_ciphers</td>
<td style="text-align:left">配置加密套件，写法遵循openssl标准</td>
</tr>
</tbody>
</table>
<h2 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h2><p>输入 <code>nginx -s reload</code>  ：修改配置后重新加载生效<br>可以看到SSL证书生效，且HTTPS可以访问站点。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/3326314-f690fba71ee4240b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;现在，你应该能在访问&lt;a href=&quot;https://mmmxcc.cn&quot;&gt;https://mmmxcc.cn&lt;/a&gt; 的时候，在地址栏里看到一个漂亮的小绿锁&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3326314-809c3f4f6b7a83d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;&lt;br&gt;作为肤浅的人，为了这么洋气的小绿锁也要上HTTPS~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="VPS" scheme="https://mmmxcc.cn/tags/VPS/"/>
    
      <category term="Nginx" scheme="https://mmmxcc.cn/tags/Nginx/"/>
    
      <category term="HTTPS" scheme="https://mmmxcc.cn/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>使用Python插入排序</title>
    <link href="https://mmmxcc.cn/2016/12/15/%E4%BD%BF%E7%94%A8Python%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://mmmxcc.cn/2016/12/15/使用Python插入排序/</id>
    <published>2016-12-15T13:44:51.000Z</published>
    <updated>2017-02-07T05:47:48.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用Python进行数据结构操作比较少见，但为了更深入的理解Python的操作原理，提升自己的算法能力。我决定认真过一遍 <strong>普林斯顿大学教授Robert Sedgewick主讲的《Algorithms》</strong></p>
</blockquote>
<hr>
<a id="more"></a>
<p><a href="http://download.csdn.net/detail/mmmwhy/9712719" target="_blank" rel="external">【普林斯顿算法下载链接】普林斯顿大学教授Robert Sedgewick主讲的《Algorithms》</a></p>
<h1 id="使用C-插入排序"><a href="#使用C-插入排序" class="headerlink" title="使用C++插入排序"></a>使用C++插入排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a[] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> &#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> key = a[i];</div><div class="line">		<span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span> (j &gt;= <span class="number">0</span>&amp;&amp;a[j] &gt; key) &#123;</div><div class="line">			a[j + <span class="number">1</span>] = a[j];  </div><div class="line">			j--;</div><div class="line">		&#125;</div><div class="line">		a[j + <span class="number">1</span>] = key;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; a[i];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一段比较简单，我也就不多说了。</p>
<h1 id="使用Python进行排序"><a href="#使用Python进行排序" class="headerlink" title="使用Python进行排序"></a>使用Python进行排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(data)):</div><div class="line">    key = data[i]</div><div class="line">    j = i - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> data[j] &gt; key:</div><div class="line">            data[j+<span class="number">1</span>]=data[j]</div><div class="line">            j = j - <span class="number">1</span></div><div class="line">    data[j+<span class="number">1</span>] = key</div><div class="line">print(data)</div></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>Python的确比CPP简洁得多；</li>
<li>while循环体中条件部分可以使用 and ，不能用&amp;&amp;</li>
<li>python没有{}，需要对齐，输入Tab或者敲空格。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用Python进行数据结构操作比较少见，但为了更深入的理解Python的操作原理，提升自己的算法能力。我决定认真过一遍 &lt;strong&gt;普林斯顿大学教授Robert Sedgewick主讲的《Algorithms》&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="Algorithms" scheme="https://mmmxcc.cn/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取图片（使用urllib2）</title>
    <link href="https://mmmxcc.cn/2016/12/15/Python%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87%EF%BC%88%E4%BD%BF%E7%94%A8urllib2%EF%BC%89/"/>
    <id>https://mmmxcc.cn/2016/12/15/Python爬取图片（使用urllib2）/</id>
    <published>2016-12-15T11:14:24.000Z</published>
    <updated>2017-02-07T05:47:49.680Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上篇文章 <a href="http://mmmxcc.cn/2016/12/13/提取网页信息/">使用 XPath 提取网页信息</a> 之后，将链接中的内容下载至本地，需要使用到 urllib2 。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="urllib2-简介"><a href="#urllib2-简介" class="headerlink" title="urllib2 简介"></a>urllib2 简介</h1><p>urllib2提供一个基础函数urlopen，通过向指定的URL发出请求来获取数据。最简单的形式就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2 </div><div class="line">response = urllib2.urlopen(<span class="string">'http://mmmxcc.cn/'</span>) </div><div class="line">html = response.read()</div></pre></td></tr></table></figure>
<p>可以将上述代码看作两个步骤，我们指定一个域名并发送请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request=urllib2.request(&apos;http://mmmxcc.cn/&apos;)</div></pre></td></tr></table></figure></p>
<p>接着服务端响应来自客户端的请求 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response=urllib2.urlopen(request)</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161215/162727432.png?imageMogr2/thumbnail/!80p" alt="运行结果" title="">
                </div>
                <div class="image-caption">运行结果</div>
            </figure>
<p>我们可以发现title这个地方本来应该是中文的，但因为编码的原因，导致出现乱码。通过将html页面重新用”utf-8”编码，可以解决这个问题。</p>
<hr>
<h1 id="将获得的response保存至本地"><a href="#将获得的response保存至本地" class="headerlink" title="将获得的response保存至本地"></a>将获得的response保存至本地</h1><h2 id="使用Xpath表达式提取图片链接"><a href="#使用Xpath表达式提取图片链接" class="headerlink" title="使用Xpath表达式提取图片链接"></a>使用Xpath表达式提取图片链接</h2><p>详见上一文章 <a href="http://mmmxcc.cn/2016/12/13/提取网页信息/">http://mmmxcc.cn/2016/12/13/提取网页信息/</a>  ，关于XPath和beautifulsoup，可以参考<a href="https://www.zhihu.com/question/26494302" target="_blank" rel="external">python中的beautifulsoup和xpath有什么异同点？</a></p>
<p>这里需要导入lxml，代码格式如下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line">html = requests.get(<span class="string">"http://jandan.net/ooxx"</span>)</div><div class="line">html.encoding = <span class="string">'utf-8'</span></div><div class="line">selector = etree.HTML(html.text)</div><div class="line">content = selector.xpath(<span class="string">'//ol[@class = "commentlist"]//@src'</span>)</div></pre></td></tr></table></figure>
<p>单独运行 以上代码可以获得<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161215/182806800.png" alt="Xpath运行结果" title="">
                </div>
                <div class="image-caption">Xpath运行结果</div>
            </figure></p>
<h2 id="设置保存的位置"><a href="#设置保存的位置" class="headerlink" title="设置保存的位置"></a>设置保存的位置</h2><p>需要使用到os库中的 <em>os.chdir(r””)</em>函数，””中间插入地址。<strong>注意</strong>这个位置必须是<strong>存在</strong>的，如果位置不存在，函数会报错。因为该函数的意义是：将工作空间从python代码所在位置，改为指定的这个位置。</p>
<h2 id="模拟正常浏览器下载图片（如果Python下载的图片不显示-）"><a href="#模拟正常浏览器下载图片（如果Python下载的图片不显示-）" class="headerlink" title="模拟正常浏览器下载图片（如果Python下载的图片不显示 ）"></a>模拟正常浏览器下载图片（如果Python下载的图片不显示 ）</h2><p>有时你会碰到，程序也对，但是服务器拒绝你的访问。这是为什么呢?</p>
<p>问题出在请求中的头信息(header)。 有的服务端有洁癖，不喜欢程序来触摸它。</p>
<p>这个时候你需要将你的程序伪装成浏览器来发出请求。请求的方式就包含在header中。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">header = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36'</span>,</div><div class="line">        <span class="string">'Cookie'</span>: <span class="string">'AspxAutoDetectCookieSupport=1'</span>,</div><div class="line">    &#125;</div><div class="line">    request = urllib2.Request(imgurl, <span class="keyword">None</span>, header)  </div><div class="line">    response = urllib2.urlopen(request)</div></pre></td></tr></table></figure>
<p>可以看到<em>urllib2.Request()</em>里边加入了一个header，用于模拟浏览器访问，第二个位置<strong>None</strong>表示data，用<a href="https://docs.python.org/2/howto/urllib2.html" target="_blank" rel="external">Python官方文档</a>的说法：<em>Sometimes you want to send data to a URL (often the URL will refer to a CGI (Common Gateway Interface) script <a href="https://docs.python.org/2/howto/urllib2.html#id9" target="_blank" rel="external">[1]</a> or other web application). With HTTP, this is often done using what’s known as a POST request. </em><br>暂时我们用不着，所以不深究，等我碰到这个问题了再说。</p>
<h2 id="为图片命名（下载图片只有一张）"><a href="#为图片命名（下载图片只有一张）" class="headerlink" title="为图片命名（下载图片只有一张）"></a>为图片命名（下载图片只有一张）</h2><p>在获得response之后，将图片直接保存为某个特定名字的话。会导致之后抓取到的图片顶替掉之前的图片，导致图片看起来只有一张。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"%s.jpg"</span> %name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(response.read())</div><div class="line">    print(imgurl)</div><div class="line">    name += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>使用with as语句，将文件名保存为%s.jpg，类似于C语言的输出。循环结束的时候name++，保证文件名不重复。</p>
<h2 id="使用with-as-函数"><a href="#使用with-as-函数" class="headerlink" title="使用with as 函数"></a>使用with as 函数</h2><p><em>Python’s with statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.</em><br>有一些任务，可能事先需要设置，事后做清理工作。对于这种场景，Python的with语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。</p>
<p><strong>Without the with statement, one would write something along the lines of:<br>如果不用with语句，代码如下：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file = open(<span class="string">"/tmp/foo.txt"</span>)</div><div class="line">data = file.read()</div><div class="line">file.close()</div></pre></td></tr></table></figure></p>
<p>使用with as之后代码为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"%s.jpg"</span> %name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">       f.write(response.read())</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文通过XPath表达式提取页面图片链接，使用urllib2下载，其中使用header模仿浏览器访问。解决了以下问题：</p>
<ul>
<li>Python下载的图片不显示 </li>
<li>下载图片只有一张</li>
<li>设置保存的位置</li>
<li>使用with f函数</li>
</ul>
<p><strong>效果如下：</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161215/191015695.png" alt="抓取到的图片" title="">
                </div>
                <div class="image-caption">抓取到的图片</div>
            </figure></p>
<p><strong>完整代码</strong></p>
<pre><code class="python"><span class="comment"># coding=utf-8</span>
<span class="keyword">import</span> requests
<span class="keyword">import</span> urllib2
<span class="keyword">import</span> os

<span class="keyword">from</span> lxml <span class="keyword">import</span> etree
html = requests.get(<span class="string">"http://cl.d5j.biz/htm_mob/7/1612/2172569.html"</span>)
html.encoding = <span class="string">'utf-8'</span>
selector = etree.HTML(html.text)
content = selector.xpath(<span class="string">'//table//img/@src'</span>)
<span class="keyword">for</span> imgurl <span class="keyword">in</span> content:
    name = imgurl[<span class="number">-9</span>:];
    os.chdir(<span class="string">r"D:"</span>)
    header = {
        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36'</span>,
        <span class="string">'Cookie'</span>: <span class="string">'AspxAutoDetectCookieSupport=1'</span>,
    }
    request = urllib2.Request(imgurl, <span class="keyword">None</span>, header)  <span class="comment">#刻意增加头部header，否则本行与下一行可以写为：response = urllib2.urlopen(imgurl)</span>
    response = urllib2.urlopen(request)
    f = open(name , <span class="string">'wb'</span>)
    f.write(response.read())
    f.close()
    print(imgurl)
</code></pre>
<p>代码重新修改了一下，上手运行会发现D盘有惊喜哦~<br>加入print(imgurl)，运行起来更洋气~<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161215/191141723.png" alt="输入下载来源" title="">
                </div>
                <div class="image-caption">输入下载来源</div>
            </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上篇文章 &lt;a href=&quot;http://mmmxcc.cn/2016/12/13/提取网页信息/&quot;&gt;使用 XPath 提取网页信息&lt;/a&gt; 之后，将链接中的内容下载至本地，需要使用到 urllib2 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="https://mmmxcc.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib2" scheme="https://mmmxcc.cn/tags/urllib2/"/>
    
  </entry>
  
  <entry>
    <title>使用 XPath 提取网页信息</title>
    <link href="https://mmmxcc.cn/2016/12/13/%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF/"/>
    <id>https://mmmxcc.cn/2016/12/13/提取网页信息/</id>
    <published>2016-12-13T08:24:34.000Z</published>
    <updated>2017-02-07T05:47:51.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 以1024举例，使用XPath提取图片链接以及磁力链接地址。</p>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="学习XPath的基本知识"><a href="#学习XPath的基本知识" class="headerlink" title="学习XPath的基本知识"></a>学习XPath的基本知识</h1><p>推荐 <a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="external">Xpath教程</a>  很容易理解。<br>推荐可以将常用的语法记下来，不常用的可以等用的时候再查。</p>
<h2 id="推荐使用Chrome浏览器中的XPath-Helper，良心之作"><a href="#推荐使用Chrome浏览器中的XPath-Helper，良心之作" class="headerlink" title="推荐使用Chrome浏览器中的XPath Helper，良心之作."></a>推荐使用Chrome浏览器中的<a href="https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="external">XPath Helper</a>，<strong>良心之作</strong>.</h2><ul>
<li><p>左边输入XPath表达式，右侧会自动展示结果。</p>
</li>
<li><p>选择元素之后按下<em>ctral + shift + x</em>，可以自动提取该元素的XPath表达式。</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161213/154603126.png?imageMogr2/thumbnail/!80p" alt="使用Xpath" title="">
                </div>
                <div class="image-caption">使用Xpath</div>
            </figure>
<h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><ul>
<li>/    从根节点选取。</li>
<li>//    从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</li>
<li>@    选取属性，常见使用方法为[@class = “title”]</li>
</ul>
<p>举例，比如在<a href="https://s.taobao.com/search?q=%E5%8F%8C%E9%9D%A2%E8%83%B6&amp;refpid=430266_1006&amp;source=tbsy&amp;style=grid&amp;tab=all&amp;pvid=b644f95644f7acd22cbc011dd2b4335f&amp;clk1=e2a07cd1788da47d4c393b5b8bbbcc27&amp;spm=a21bo.50862.201856-sline.1.o2a4b1" target="_blank" rel="external">双面胶-淘宝搜索</a> 页面</p>
<p>输入: <strong>//*[@class=”m-itemlist”]//a[@trace-price&lt;20]/@href</strong>，用来提取出class为itemlist内a标签里所有price 小于20的产品，并将其href(即超链接)输出<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161213/155438640.png?imageMogr2/thumbnail/!80p" alt="结果展示" title="">
                </div>
                <div class="image-caption">结果展示</div>
            </figure></p>
<p>需要结合Chrome浏览器的F12一起使用，先选定大致的框架，比如itemlist这个class，然后逐渐加上更多的要求，具体见文首给出的链接学习。</p>
<p><code>知道这些就可以抓取1024上的图片和磁力链接了，目测是不是很简单</code></p>
<hr>
<h1 id="挑选网页实验一下"><a href="#挑选网页实验一下" class="headerlink" title="挑选网页实验一下"></a>挑选网页实验一下</h1><blockquote>
<p>作为一名1024资深游客，首先在技术讨论区选择一篇好文，这里用的是<a href="http://www.t66y.com/htm_mob/7/1612/2172569.html" target="_blank" rel="external">[榴民资讯]11月精品主题推荐（49期）</a></p>
</blockquote>
<p><img src="http://cdn.mmmxcc.cn/blog/20161213/160946786.png?imageMogr2/thumbnail/!80p" alt="还是熟悉的味道"></p>
<h2 id="使用F12查看网页的结构"><a href="#使用F12查看网页的结构" class="headerlink" title="使用F12查看网页的结构"></a>使用F12查看网页的结构</h2><p>有两个主要标签 header 和 main ，鼠标移动到main上，可以看到内容页面都被包含起来，所以第一个节点应该选main。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161213/161454868.png?imageMogr2/thumbnail/!80p" alt="main标签" title="">
                </div>
                <div class="image-caption">main标签</div>
            </figure></p>
<h2 id="使用XPath表达式筛选图片链接"><a href="#使用XPath表达式筛选图片链接" class="headerlink" title="使用XPath表达式筛选图片链接"></a>使用XPath表达式筛选图片链接</h2><p>我们看到图片前边都有一个属性src，这个src后边就是我们所需的图片链接。</p>
<p>综上，使用XPath表达式: <strong>//*[@id=”main”]//@src</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161213/161747115.png?imageMogr2/thumbnail/!80p" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure><br>输入XPath代码，获得图片链接。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161213/161335310.png?imageMogr2/thumbnail/!80p" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure></p>
<h2 id="使用XPath表达式筛选磁力链接"><a href="#使用XPath表达式筛选磁力链接" class="headerlink" title="使用XPath表达式筛选磁力链接"></a>使用XPath表达式筛选磁力链接</h2><p>同理，我们可以发现，磁力链接前边都有一个blockquote，与上一条处理方式类似，使用XPath表达式: <strong>//*[@id=”main”]//blockquote</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161213/162129381.png?imageMogr2/thumbnail/!80p" alt="磁力链接" title="">
                </div>
                <div class="image-caption">磁力链接</div>
            </figure>
<p><strong>以上</strong> </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 以1024举例，使用XPath提取图片链接以及磁力链接地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="https://mmmxcc.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Xpath" scheme="https://mmmxcc.cn/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>永远的7012</title>
    <link href="https://mmmxcc.cn/2016/10/28/%E6%B0%B8%E8%BF%9C%E7%9A%847012/"/>
    <id>https://mmmxcc.cn/2016/10/28/永远的7012/</id>
    <published>2016-10-28T13:33:08.000Z</published>
    <updated>2017-02-07T05:47:51.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Gary要从Running man下车了，这真是10月以来最悲伤的一件事了。</p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="慌张"><a href="#慌张" class="headerlink" title="慌张"></a>慌张</h1><p>在这件事情还没有成为热搜之前，室友私下给我发了这个消息。</p>
<p>当时我第一反应就觉得是假的，“怎么可能嘛，Gary之前说过七个人要永远在一起的啊。”</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/215708622.png?imageMogr2/thumbnail/!100p" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>就算我信誓旦旦的否认了，可还是忍不住又把这个消息多看了好几遍，想找到这是个假消息的依据。</p>
<p><strong>可到后来我越看越慌，直到过了两个小时以后，热搜出现Gary的名字，我才被迫相信，但还是不愿接受。</strong></p>
<hr>
<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>其实我并没有认识他们太长时间，但却在最短的时间内被他们所吸引。</p>
<p>因为他们七个人，让我爱上了一个国家。</p>
<p><img src="http://cdn.mmmxcc.cn/blog/20161028/215804845.png?imageMogr2/thumbnail/!100p" alt=""></p>
<p>我觉得这就是韩国跑男的魅力吧，<strong>他们永远谦逊，努力，敬业，总是希望把最好的一面呈献给观众。</strong>他们七个人的感情好到让我嫉妒，多少不经意间的小动作让我们觉得这就是<strong>一家人的感觉</strong>，这种感情，绝对不是靠”We are family“就能喊出来的。</p>
<p><img src="http://cdn.mmmxcc.cn/blog/20161028/215846791.png?imageMogr2/thumbnail/!100p" alt=""></p>
<hr>
<h1 id="七年"><a href="#七年" class="headerlink" title="七年"></a>七年</h1><p>Running man在一起跑了七年了，每个周一都准时准点的出现在我们面前，风雨无阻，真的不是所有的综艺都可以坚持那么久的。</p>
<ul>
<li>王鼻子大叔已经50岁了，体力明显跟不上了。</li>
<li>金钟国浑身是伤，根本无法再扮演能力者的角色。</li>
<li>其他的成员也是或多或少身体状况都不佳，不可能再回到大规模撕名牌的环节中。</li>
</ul>
<p>我们看得出来现在的running man确实不如以前好看了，可是看到<strong>他们七个人在一起，就是最开心的事。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/215947619.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我知道我们总有一天要和Runningman告别，我也曾想过很多次他们会以怎样的方式跟我们说再见。可这种方式是我最不愿意见到的。</p>
<p> <strong>与其Gary一人离开，不如节目就到此为止吧。 因为在我心里，他们就是一个整体，谁也不能替代，谁也无法分割。</strong></p>
<p><img src="http://cdn.mmmxcc.cn/blog/20161028/220012151.png?imageMogr2/thumbnail/!80p" alt=""></p>
<p>不知道RM以后会怎么发展下去，但我知道<strong>所有深爱过这个节目的人，都不会责怪他们。</strong></p>
<p> 就算不舍，也会把最真的祝福送给每一位成员。并且要告诉他们：谢谢他们七年的陪伴，谢谢他们为我们所做的努力，谢谢他们给我们带来那么多的快乐。</p>
<p><img src="http://cdn.mmmxcc.cn/blog/20161028/220138915.png?imageMogr2/thumbnail/!80p" alt=""></p>
<p><strong>综艺人姜Gary，我们有缘再见！音乐人姜Gary，我们敬请期待！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Gary要从Running man下车了，这真是10月以来最悲伤的一件事了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Running man" scheme="https://mmmxcc.cn/tags/Running-man/"/>
    
      <category term="臭臭" scheme="https://mmmxcc.cn/tags/%E8%87%AD%E8%87%AD/"/>
    
  </entry>
  
  <entry>
    <title>C / C++ 文件读取写入、文件夹的打开</title>
    <link href="https://mmmxcc.cn/2016/10/28/C-C-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%86%99%E5%85%A5%E3%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%89%93%E5%BC%80/"/>
    <id>https://mmmxcc.cn/2016/10/28/C-C-文件读取写入、文件夹的打开/</id>
    <published>2016-10-28T11:09:24.000Z</published>
    <updated>2017-02-07T05:47:54.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用C++做文件处理时常用的几个函数</p>
</blockquote>
<a id="more"></a>
<h1 id="文件的打开与关闭-open和close函数"><a href="#文件的打开与关闭-open和close函数" class="headerlink" title="文件的打开与关闭 (open和close函数)"></a>文件的打开与关闭 (open和close函数)</h1><p>文件读取之前，使用open函数进行打开。文件使用完毕后，使用close命令关闭。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">infile.open(<span class="string">"E:\\hello.txt"</span>);</div><div class="line">infile.close();</div></pre></td></tr></table></figure>
<h1 id="文件读取与写入-infile-gt-gt-income-outfile-lt-lt-“income-”"><a href="#文件读取与写入-infile-gt-gt-income-outfile-lt-lt-“income-”" class="headerlink" title="文件读取与写入(infile &gt;&gt; income,outfile &lt;&lt;  “income:”)"></a>文件读取与写入(infile &gt;&gt; income,outfile &lt;&lt;  “income:”)</h1><p>C++中可以调用库 </p>
<pre><code>#include&lt;fstream&gt;
</code></pre><p>之后可以使用，”&gt;&gt;”和”&lt;&lt;”输入输出流的形式进行文件的读取</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (infile &gt;&gt; income)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (income &lt; cutoff)</div><div class="line">				tax = rate1*income;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				tax = rate2*income;</div><div class="line">			outfile &lt;&lt;  <span class="string">"income:"</span>&lt;&lt;left&lt;&lt;setw(<span class="number">6</span>) &lt;&lt; income &lt;&lt; right&lt;&lt;setw(<span class="number">8</span>) &lt;&lt; <span class="string">"Tax:"</span> &lt;&lt;tax&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h1 id="文件夹-文件的打开"><a href="#文件夹-文件的打开" class="headerlink" title="文件夹/文件的打开"></a>文件夹/文件的打开</h1><p>在程序运行完之后，你可能会希望自动将输出的结果文件打开。调 <strong>Windows Exploler </strong>打开一个文件夹，</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">system(<span class="string">"start E:\\tax.out"</span>);</div></pre></td></tr></table></figure>
<p>E:\tax.out 就是你文件的地址</p>
<h1 id="运行程序demo"><a href="#运行程序demo" class="headerlink" title="运行程序demo"></a>运行程序demo</h1><p>读取hello.txt文件内的收入数据，计算税金，并输出到tax.txt中</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/190446344.png" alt="demo" title="">
                </div>
                <div class="image-caption">demo</div>
            </figure>
<p><a href="http://cdn.mmmxcc.cn/blog/20161028/190626684.txt" target="_blank" rel="external">hello.txt</a>，直接 Ctrl+S 保存到E盘即可</p>
<p>C++代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> cutoff = <span class="number">6000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">float</span> rate1 = <span class="number">0.3</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">float</span> rate2 = <span class="number">0.6</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	ifstream infile;</div><div class="line">	ofstream outfile;</div><div class="line">	<span class="keyword">int</span> income, tax;</div><div class="line">	infile.open(<span class="string">"E:\\hello.txt"</span>);</div><div class="line">	outfile.open(<span class="string">"E:\\tax.txt"</span>);</div><div class="line">		<span class="keyword">while</span> (infile &gt;&gt; income)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (income &lt; cutoff)</div><div class="line">				tax = rate1*income;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				tax = rate2*income;</div><div class="line">			outfile &lt;&lt;  <span class="string">"income:"</span>&lt;&lt;left&lt;&lt;setw(<span class="number">6</span>) &lt;&lt; income &lt;&lt; right&lt;&lt;setw(<span class="number">8</span>) &lt;&lt; <span class="string">"Tax:"</span> &lt;&lt;tax&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		&#125;</div><div class="line">		infile.close();</div><div class="line">		outfile.close();</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"done"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		system(<span class="string">"start E:\\tax.txt"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用C++做文件处理时常用的几个函数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://mmmxcc.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>解忧杂货店</title>
    <link href="https://mmmxcc.cn/2016/10/28/%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    <id>https://mmmxcc.cn/2016/10/28/解忧杂货店/</id>
    <published>2016-10-28T04:30:59.000Z</published>
    <updated>2017-02-07T05:47:03.322Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我一直很努力去当一个善良的人，却总是在现实中受到各种打击。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>以至于让我觉得根本不需要总是对别人那么好，或者说其实我希望可以一直对别人保持一颗有爱的心，只不过我需要力量支撑而已。</p>
<pre><code>而解忧杂货店就给了我这种力量。
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/122006987.png?imageMogr2/thumbnail/!100p" alt="解忧杂货店" title="">
                </div>
                <div class="image-caption">解忧杂货店</div>
            </figure>
<ul>
<li><p>浪矢爷爷说，<strong>人的心声</strong>是最不能被忽视的。所以不管是什么内容的信，玩笑的或是严肃的，甚至是一张白纸，他都会认认真真的回复。</p>
</li>
<li><p>因为人与人之间本来就是相互影响的，你的一举一动，一句在你看来是无所谓的话，却可能对别人造成很大的影响。</p>
</li>
<li><p>不要总想着设身处地，我们永远不是别人，总是很难站在别人角度考虑问题，稍不留神就以己度人了。</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/122134157.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>所以，<strong>子所不欲勿施于人，己所欲也勿施于人。</strong></p>
<p> 收到那么多封烦恼咨询信后，我慢慢发现其实很多人在写信的时候心里就已经有<strong>自己的答案</strong>了，他们写信的目的就是为了让别人可以支持<strong>他们的想法</strong>。</p>
<p>但他们读过回信之后会再写信过来，就说明双方观点不太一样。所以才会反反复复进行那么多次通信，就为了说服别人同意自己的想法。</p>
<p>我就想到每次我想买啥东西又不好意思买的时候，就会<strong>假装向阳询问</strong>，而阳就会 <strong><em>二话不说</em></strong> 立马给我买了。他竟然那么早就懂了这个道理，<strong>真是好棒呀！</strong> </p>
<p><img src="http://cdn.mmmxcc.cn/blog/20161028/122234749.png" alt=""></p>
<p>我不知道别人判断一本好书的标准是什么，我不认识东野圭吾，不知道kindle里边他的排名，就只是很喜欢这种故事，<strong>有爱情，有亲情，有事业，有梦想。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/122722215.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>很平凡，平凡到感觉里边的人物就是生活中的你和我。但文学总是高于生活的，时空的交错，<strong>奇妙的构思让我觉得善良的人在冥冥之中总会受到保佑。</strong></p>
<p>文章中的最后一段话好像是这样的，敦也从信纸上抬起头，正好对上了另两个人的视线，他发现他俩的眼里闪着光芒，他想他的眼里也一定是这样的。而我想说，读完这本书以后，我也是这样的感觉。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/blog/20161028/122838719.jpeg?imageMogr2/thumbnail/!50p" alt="mark" title="">
                </div>
                <div class="image-caption">mark</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我一直很努力去当一个善良的人，却总是在现实中受到各种打击。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="臭臭" scheme="https://mmmxcc.cn/tags/%E8%87%AD%E8%87%AD/"/>
    
      <category term="读书笔记" scheme="https://mmmxcc.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://mmmxcc.cn/2016/10/27/Python%E5%9F%BA%E7%A1%80/"/>
    <id>https://mmmxcc.cn/2016/10/27/Python基础/</id>
    <published>2016-10-27T03:38:32.000Z</published>
    <updated>2017-02-07T05:46:54.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h1><ul>
<li>Windows 下需将python加入的系统变量中；</li>
<li><p>Linux 下需添加头部</p>
<a id="more"></a>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/enc python</span></div><div class="line">    print(<span class="string">'Hello World!'</span>)</div></pre></td></tr></table></figure>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ul>
<li>for 循环<pre><code>for 元素 in 序列:
    statement
</code></pre></li>
</ul>
<ul>
<li>while 循环<pre><code>while 条件:
    statement
</code></pre></li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_sum</span><span class="params">(a,b)</span>:</span> </div><div class="line">    c = a**<span class="number">2</span> + b**<span class="number">2</span> </div><div class="line">    <span class="keyword">return</span> c</div></pre></td></tr></table></figure>
<p>def，这个关键字通知python：我在定义一个函数。square_sum是函数名。括号中的a, b是函数的<strong>参数</strong>，是对函数的<strong>输入</strong>。</p>
<h2 id="函数调用和参数传递"><a href="#函数调用和参数传递" class="headerlink" title="函数调用和参数传递"></a>函数调用和参数传递</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_integer</span><span class="params">(a)</span>:</span></div><div class="line">    a = a + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="keyword">print</span> (change_integer(a))      <span class="comment">#注意观察结果</span></div><div class="line"><span class="keyword">print</span> (a)      <span class="comment">#注意观察结果</span></div><div class="line"></div><div class="line"><span class="comment">#===(Python中 "#" 后面跟的内容是注释，不执行 )</span></div><div class="line"></div><div class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_list</span><span class="params">(b)</span>:</span></div><div class="line">    b[<span class="number">0</span>] = b[<span class="number">0</span>] + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> b</div><div class="line"></div><div class="line"><span class="keyword">print</span> (change_list(b))      <span class="comment">#注意观察结果</span></div><div class="line"><span class="keyword">print</span> (b)      <span class="comment">#注意观察结果</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn.mmmxcc.cn/python/1.jpg" alt="运行结果" title="">
                </div>
                <div class="image-caption">运行结果</div>
            </figure>
<p>第一个例子，我们将一个<strong>整数变量传递给函数</strong>，函数对它进行操作，但<strong>原整数变量a不发生变化</strong>。<br>第二个例子，我们将一个<strong>表传递给函数</strong>，函数进行操作，<strong>原来的表b发生变化</strong>。<br>对于基本数据类型的变量，变量传递给函数后，函数会在内存中复制一个新的变量，从而不影响原来的变量。（我们称此为<strong>值传递</strong>）<br>但是对于表来说，表传递给函数的是一个指针，指针指向序列在内存中的位置，在函数中对表的操作将在原有内存中进行，从而影响原有变量。 （我们称此为<strong>指针传递</strong>）。</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>我们定义一个类“鸟”，鸟有羽毛，鸟的方法是下蛋，定义一个函数fly()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(object)</span>:</span></div><div class="line">    feather = <span class="keyword">True</span></div><div class="line">    way = <span class="string">'egg'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self, dx, dy)</span>:</span></div><div class="line">        position = [<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">        position[<span class="number">0</span>] = position[<span class="number">0</span>] + dx</div><div class="line">        position[<span class="number">1</span>] = position[<span class="number">1</span>] + dy</div><div class="line">        <span class="keyword">return</span> position</div><div class="line"></div><div class="line">summer = Bird()</div><div class="line"><span class="keyword">print</span> (after move:<span class="string">',summer.fly(5,8))</span></div></pre></td></tr></table></figure></p>
<p><strong>方法的第一个参数必须是self，无论是否用到。</strong></p>
<p>我的summer可以飞了。</p>
<hr>
<h1 id="常见python-os-命令"><a href="#常见python-os-命令" class="headerlink" title="常见python os 命令"></a>常见python os 命令</h1><ul>
<li>os.getcwd() 函数得到当前工作目录，即当前Python脚本工作的目录路径。</li>
<li>os.listdir() 返回指定目录下的所有文件和目录名。</li>
<li>os.remove() 删除一个文件。</li>
<li>os.chdir(dirname) 改变工作目录到dirname</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;脚本运行&quot;&gt;&lt;a href=&quot;#脚本运行&quot; class=&quot;headerlink&quot; title=&quot;脚本运行&quot;&gt;&lt;/a&gt;脚本运行&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Windows 下需将python加入的系统变量中；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux 下需添加头部&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://mmmxcc.cn/tags/Python/"/>
    
  </entry>
  
</feed>
